
D:/OS/diy-x86os-master/start/start/build/source/kernel/kernel.elf:     file format elf32-i386
D:/OS/diy-x86os-master/start/start/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00003677 memsz 0x00003677 flags r-x
    LOAD off    0x00005000 vaddr 0x00014000 paddr 0x00014000 align 2**12
         filesz 0x00000044 memsz 0x00006e00 flags rw-
    LOAD off    0x00006000 vaddr 0x80000000 paddr 0x0001ae00 align 2**12
         filesz 0x00000095 memsz 0x00000095 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e84  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       000007f3  00012e84  00012e84  00003e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000044  00014000  00014000  00005000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00005e00  00015000  00015000  00005044  2**12
                  ALLOC
  4 .first_task   00000095  80000000  0001ae00  00006000  2**0
                  CONTENTS, ALLOC, LOAD, CODE
  5 .debug_line   00001c87  00000000  00000000  00006095  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004927  00000000  00000000  00007d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001304  00000000  00000000  0000c643  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000200  00000000  00000000  0000d948  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001289  00000000  00000000  0000db48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .comment      00000011  00000000  00000000  0000edd1  2**0
                  CONTENTS, READONLY
 11 .debug_frame  000013cc  00000000  00000000  0000ede4  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
00012e84 l    d  .rodata	00000000 .rodata
00014000 l    d  .data	00000000 .data
00015000 l    d  .bss	00000000 .bss
80000000 l    d  .first_task	00000000 .first_task
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 CMakeFiles/kernel.dir/init/start.S.obj
00010013 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 memory.c
000102f8 l     F .text	0000000c write_cr3
00010304 l     F .text	00000011 mmu_set_page_dir
00010315 l     F .text	00000014 pde_index
00010329 l     F .text	00000019 pte_index
00010342 l     F .text	00000010 pde_paddr
00010352 l     F .text	00000010 pte_paddr
00010362 l     F .text	00000014 down2
00010376 l     F .text	0000001c up2
00015000 l     O .bss	00000028 paddr_alloc
00016000 l     O .bss	00001004 kernel_page_dir
00010392 l     F .text	00000058 addr_alloc_init
000103ea l     F .text	00000067 addr_alloc_page
00010451 l     F .text	00000062 addr_free_page
00012f94 l     O .rodata	00000012 __func__.2204
00014000 l     O .data	00000040 kernel_map.2215
000106e0 l     F .text	00000037 total_mem_size
00012fa8 l     O .rodata	0000000c __func__.2243
00010a9e l     F .text	00000010 curr_page_dir
00000000 l    df *ABS*	00000000 syscall.c
00012fb4 l     O .rodata	00000004 sys_table
00000000 l    df *ABS*	00000000 task.c
00010b90 l     F .text	0000001b list_node_init
00010bab l     F .text	0000000b list_node_next
00010bb6 l     F .text	0000000b list_count
00010bc1 l     F .text	0000000a list_first
00010bcb l     F .text	00000007 hlt
00010bd2 l     F .text	00000017 write_tr
00010be9 l     F .text	0000000c write_cr3
00010bf5 l     F .text	00000011 mmu_set_page_dir
00017020 l     O .bss	00001000 idle_task_stack
00018020 l     O .bss	00000198 task_manager
00010c06 l     F .text	00000188 tss_init
0001306c l     O .rodata	0000000a __func__.2267
00013078 l     O .rodata	00000010 __func__.2285
00010f69 l     F .text	0000001d idle_task_entry
00000000 l    df *ABS*	00000000 cpu.c
00011301 l     F .text	00000028 lgdt
00011329 l     F .text	0000001a far_jump
000181c0 l     O .bss	00000800 gdt_table
000189c0 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 irq.c
00011583 l     F .text	00000007 cli
0001158a l     F .text	00000007 sti
00011591 l     F .text	0000001d inb
000115ae l     F .text	0000001f outb
000115cd l     F .text	00000028 lidt
000115f5 l     F .text	00000007 hlt
000115fc l     F .text	00000010 read_eflags
0001160c l     F .text	0000000b write_eflags
00011617 l     F .text	00000011 read_cr2
00011628 l     F .text	000000ff dump_core_regs
00011727 l     F .text	0000003a do_default_handler
00011b10 l     F .text	00000093 init_pic
000189e0 l     O .bss	00000400 idt_table
00000000 l    df *ABS*	00000000 mmu.c
00000000 l    df *ABS*	00000000 time.c
00011f03 l     F .text	0000001f outb
00018de0 l     O .bss	00000004 sys_tick
00011f4a l     F .text	00000060 init_pit
00000000 l    df *ABS*	00000000 init.c
00013618 l     O .rodata	0000000c __func__.2266
00013624 l     O .rodata	00000013 __func__.2271
00000000 l    df *ABS*	00000000 mutex.c
000120cf l     F .text	0000000b list_count
00000000 l    df *ABS*	00000000 sem.c
00012256 l     F .text	0000000b list_count
00000000 l    df *ABS*	00000000 bitmap.c
00000000 l    df *ABS*	00000000 klib.c
000125ea l     F .text	00000007 hlt
00014040 l     O .data	00000004 num2ch.1933
00000000 l    df *ABS*	00000000 list.c
00012ad5 l     F .text	00000013 list_is_empty
00000000 l    df *ABS*	00000000 log.c
00012ccd l     F .text	0000001d inb
00012cea l     F .text	0000001f outb
00018de4 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 first_task.c
80000012 l     F .first_task	00000047 sys_call
80000059 l     F .first_task	0000002a msleep
00011af4 g     F .text	0000001c do_handler_control_protection_exception
00012403 g     F .text	0000003e bitmap_get_bit
00012743 g     F .text	0000004f kernel_memcpy
000110cd g     F .text	0000000a task_current
00011ad8 g     F .text	0000001c do_handler_virtualization_exception
00011809 g     F .text	0000001c do_handler_bound_range_exceeded
00011ea4 g     F .text	0000000b irq_enable_global
00012b6c g     F .text	00000064 list_insert_last
00011895 g     F .text	0000001c do_handler_segment_not_present
00011036 g     F .text	00000034 task_set_ready
00012515 g     F .text	0000001b bitmap_is_set
00012792 g     F .text	00000041 kernel_memset
00010b18 g     F .text	00000078 do_handler_syscall
00011454 g     F .text	0000001e cpu_init
00012d09 g     F .text	0000009d log_init
00012079 g     F .text	00000056 init_main
0001020f g       .text	00000000 exception_handler_alignment_check
0001154a g     F .text	00000039 gdt_free_sel
000125f1 g     F .text	00000047 kernel_strcpy
00014000 g       .data	00000000 s_data
00011d9d g     F .text	00000080 irq_enable
0001002b g       .text	00000000 exception_handler_unknown
000100a7 g       .text	00000000 exception_handler_breakpoint
000117ed g     F .text	0000001c do_handler_overflow
00011a84 g     F .text	0000001c do_handler_alignment_check
000105b9 g     F .text	00000084 memory_create_map
000101b6 g       .text	00000000 exception_handler_general_protection
000118cd g     F .text	000000b5 do_handler_general_protection
00012371 g     F .text	00000029 sem_count
80000083 g     F .first_task	00000012 first_task_main
0001177d g     F .text	0000001c do_handler_divider
00012441 g     F .text	000000d4 bitmap_set_bit
0001185d g     F .text	0000001c do_handler_double_fault
00011982 g     F .text	000000e6 do_handler_page_fault
000100e5 g       .text	00000000 exception_handler_bound_range_exceeded
0001026a g       .text	00000000 exception_handler_virtualization_exception
00011537 g     F .text	00000013 swith_to_tss
00010142 g       .text	00000000 exception_handler_double_fault
00011eaf g     F .text	0000002b pic_send_eoi
00010f5f g     F .text	0000000a task_first_task
00010000 g       .text	00000000 s_text
000107f8 g     F .text	00000085 memory_create_uvm
00012284 g     F .text	0000006b sem_wait
00010a5c g     F .text	00000022 memory_alloc_page_for
00012c48 g     F .text	00000085 list_remove_node
00010199 g       .text	00000000 exception_handler_stack_segment_fault
80000000 g       .first_task	00000000 first_task_entry
000100c6 g       .text	00000000 exception_handler_overflow
000102c5 g       .text	00000000 simple_switch
000102a6 g       .text	00000000 exception_handler_time
00011abc g     F .text	0000001c do_handler_simd_exception
00018e00 g     O .bss	00002000 stack
000112aa g     F .text	00000057 sys_sleep
00010aae g     F .text	0000006a memory_free_page
0001ae00 g       *ABS*	00000000 s_first_task
00010988 g     F .text	000000d4 memory_alloc_for_page_dir
000122ef g     F .text	00000082 sem_notify
00011825 g     F .text	0000001c do_handler_invalid_opcode
0001015f g       .text	00000000 exception_handler_invalid_tss
00011a68 g     F .text	0000001c do_handler_fpu_error
00010e99 g     F .text	000000c6 task_first_init
00011aa0 g     F .text	0000001c do_handler_machine_check
00011799 g     F .text	0000001c do_handler_Debug
000104b3 g     F .text	00000056 show_mem_info
0001024b g       .text	00000000 exception_handler_simd_exception
00012b0d g     F .text	0000005f list_insert_first
0001128a g     F .text	00000020 task_set_wakeup
000117b5 g     F .text	0000001c do_handler_NMI
0001004a g       .text	00000000 exception_handler_divider
00012638 g     F .text	00000070 kernel_strncpy
00011e99 g     F .text	0000000b irq_disable_global
000110d7 g     F .text	00000061 sys_sched_yield
0001ae95 g       *ABS*	00000000 mem_free_start
00011fc2 g     F .text	00000053 kernel_init
00012261 g     F .text	00000023 sem_init
00010000 g       .text	00000000 _start
00012954 g     F .text	0000014b kernel_vsprintf
00010104 g       .text	00000000 exception_handler_invalid_opcode
0001ae00 g       .bss	00000000 e_data
00012108 g     F .text	00000091 mutex_lock
0001022c g       .text	00000000 exception_handler_machine_check
00011879 g     F .text	0000001c do_handler_invalid_tss
00000000 g       .text	00000000 kernel_base
0001ae95 g       *ABS*	00000000 e_first_task
00011250 g     F .text	0000003a task_set_sleep
00011d63 g     F .text	0000003a irq_install
000113c9 g     F .text	0000008b init_gdt
00011eda g     F .text	00000018 irq_enter_protection
000120da g     F .text	0000002e mutex_init
00011e1d g     F .text	0000007c irq_disable
00011841 g     F .text	0000001c do_handler_device_not_available
0001087d g     F .text	000000ec free_pagemap
0001239a g     F .text	00000016 bitmap_byte_count
00011138 g     F .text	0000005b task_dispatch
00012015 g     F .text	00000064 move_to_first_task
0001108a g     F .text	00000043 task_next_run
000127d3 g     F .text	00000064 kernel_memcmp
0001063d g     F .text	000000a3 create_kernel_table
00012ae8 g     F .text	00000025 list_init
000101d3 g       .text	00000000 exception_handler_page_fault
0001106a g     F .text	00000020 task_set_block
00011761 g     F .text	0000001c do_handler_unknown
00010a7e g     F .text	00000020 memory_alloc_page
000101f0 g       .text	00000000 exception_handler_fpu_error
00010e7b g     F .text	0000001e task_switch_from_to
00011ba3 g     F .text	000001c0 irq_init
00012199 g     F .text	000000bd mutex_unlock
00011ef2 g     F .text	00000011 irq_leave_protection
00012708 g     F .text	0000003b kernel_strlen
00011343 g     F .text	00000086 segment_desc_set
000102da g       .text	00000000 exception_handler_syscall
00012bd0 g     F .text	00000078 list_remove_first
00013677 g       .rodata	00000000 e_text
00010289 g       .text	00000000 exception_handler_control_protection_exception
000123b0 g     F .text	00000053 bitmap_init
0001017c g       .text	00000000 exception_handler_segment_not_present
00010088 g       .text	00000000 exception_handler_NMI
00012530 g     F .text	000000ba bitmap_alloc_nbits
00010f86 g     F .text	000000b0 task_manager_init
00010069 g       .text	00000000 exception_handler_Debug
00011193 g     F .text	000000bd task_time_tick
00010717 g     F .text	000000e1 memory_init
00012a9f g     F .text	00000036 pannic
000118b1 g     F .text	0000001c do_handler_stack_segment_fault
000117d1 g     F .text	0000001c do_handler_breakpoint
00010969 g     F .text	0000001f task_free_page_map
00012da6 g     F .text	000000de log_printf
00010d8e g     F .text	000000ed task_init
00012837 g     F .text	00000024 kernel_sprintf
000126a8 g     F .text	00000060 kernel_strncpm
000114b9 g     F .text	0000007e gdt_alloc_desc
0001285b g     F .text	000000f9 kernel_itoa
00011472 g     F .text	00000047 gate_desc_set
00010123 g       .text	00000000 exception_handler_device_not_available
00010509 g     F .text	000000b0 find_pte
00011f22 g     F .text	00000028 do_handler_time
00011faa g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
#include"os_cfg.h"
    .text
    .extern kernel_init , init_main
    .global _start
_start:
    push %ebp
   10000:	55                   	push   %ebp
    mov %esp , %ebp
   10001:	89 e5                	mov    %esp,%ebp
    mov 0x8(%ebp) , %eax
   10003:	8b 45 08             	mov    0x8(%ebp),%eax

    push %eax
   10006:	50                   	push   %eax
    call kernel_init
   10007:	e8 b6 1f 00 00       	call   11fc2 <kernel_init>
    jmp $KERNEL_SELECTOR_CS , $gdt_reload
   1000c:	ea 13 00 01 00 08 00 	ljmp   $0x8,$0x10013

00010013 <gdt_reload>:
gdt_reload:
    mov $KERNEL_SELECTOR_DS , %ax
   10013:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax , %ds
   10017:	8e d8                	mov    %eax,%ds
	mov %ax , %ss
   10019:	8e d0                	mov    %eax,%ss
	mov %ax , %es
   1001b:	8e c0                	mov    %eax,%es
	mov %ax , %fs
   1001d:	8e e0                	mov    %eax,%fs
	mov %ax , %gs
   1001f:	8e e8                	mov    %eax,%gs
    mov $( stack + KERNEL_STACK_SIZE ) , %esp
   10021:	bc 00 ae 01 00       	mov    $0x1ae00,%esp
    jmp init_main
   10026:	e9 4e 20 00 00       	jmp    12079 <init_main>

0001002b <exception_handler_unknown>:
    popa
    add $( 2 * 4 ) , %esp
    iret
.endm

exception_handler unknown , -1 , 0
   1002b:	6a 00                	push   $0x0
   1002d:	6a ff                	push   $0xffffffff
   1002f:	60                   	pusha  
   10030:	1e                   	push   %ds
   10031:	06                   	push   %es
   10032:	0f a0                	push   %fs
   10034:	0f a8                	push   %gs
   10036:	54                   	push   %esp
   10037:	e8 25 17 00 00       	call   11761 <do_handler_unknown>
   1003c:	83 c4 04             	add    $0x4,%esp
   1003f:	0f a9                	pop    %gs
   10041:	0f a1                	pop    %fs
   10043:	07                   	pop    %es
   10044:	1f                   	pop    %ds
   10045:	61                   	popa   
   10046:	83 c4 08             	add    $0x8,%esp
   10049:	cf                   	iret   

0001004a <exception_handler_divider>:
exception_handler divider , 0 , 0
   1004a:	6a 00                	push   $0x0
   1004c:	6a 00                	push   $0x0
   1004e:	60                   	pusha  
   1004f:	1e                   	push   %ds
   10050:	06                   	push   %es
   10051:	0f a0                	push   %fs
   10053:	0f a8                	push   %gs
   10055:	54                   	push   %esp
   10056:	e8 22 17 00 00       	call   1177d <do_handler_divider>
   1005b:	83 c4 04             	add    $0x4,%esp
   1005e:	0f a9                	pop    %gs
   10060:	0f a1                	pop    %fs
   10062:	07                   	pop    %es
   10063:	1f                   	pop    %ds
   10064:	61                   	popa   
   10065:	83 c4 08             	add    $0x8,%esp
   10068:	cf                   	iret   

00010069 <exception_handler_Debug>:
exception_handler Debug , 1 , 0
   10069:	6a 00                	push   $0x0
   1006b:	6a 01                	push   $0x1
   1006d:	60                   	pusha  
   1006e:	1e                   	push   %ds
   1006f:	06                   	push   %es
   10070:	0f a0                	push   %fs
   10072:	0f a8                	push   %gs
   10074:	54                   	push   %esp
   10075:	e8 1f 17 00 00       	call   11799 <do_handler_Debug>
   1007a:	83 c4 04             	add    $0x4,%esp
   1007d:	0f a9                	pop    %gs
   1007f:	0f a1                	pop    %fs
   10081:	07                   	pop    %es
   10082:	1f                   	pop    %ds
   10083:	61                   	popa   
   10084:	83 c4 08             	add    $0x8,%esp
   10087:	cf                   	iret   

00010088 <exception_handler_NMI>:
exception_handler NMI , 2 , 0
   10088:	6a 00                	push   $0x0
   1008a:	6a 02                	push   $0x2
   1008c:	60                   	pusha  
   1008d:	1e                   	push   %ds
   1008e:	06                   	push   %es
   1008f:	0f a0                	push   %fs
   10091:	0f a8                	push   %gs
   10093:	54                   	push   %esp
   10094:	e8 1c 17 00 00       	call   117b5 <do_handler_NMI>
   10099:	83 c4 04             	add    $0x4,%esp
   1009c:	0f a9                	pop    %gs
   1009e:	0f a1                	pop    %fs
   100a0:	07                   	pop    %es
   100a1:	1f                   	pop    %ds
   100a2:	61                   	popa   
   100a3:	83 c4 08             	add    $0x8,%esp
   100a6:	cf                   	iret   

000100a7 <exception_handler_breakpoint>:
exception_handler breakpoint , 3 , 0
   100a7:	6a 00                	push   $0x0
   100a9:	6a 03                	push   $0x3
   100ab:	60                   	pusha  
   100ac:	1e                   	push   %ds
   100ad:	06                   	push   %es
   100ae:	0f a0                	push   %fs
   100b0:	0f a8                	push   %gs
   100b2:	54                   	push   %esp
   100b3:	e8 19 17 00 00       	call   117d1 <do_handler_breakpoint>
   100b8:	83 c4 04             	add    $0x4,%esp
   100bb:	0f a9                	pop    %gs
   100bd:	0f a1                	pop    %fs
   100bf:	07                   	pop    %es
   100c0:	1f                   	pop    %ds
   100c1:	61                   	popa   
   100c2:	83 c4 08             	add    $0x8,%esp
   100c5:	cf                   	iret   

000100c6 <exception_handler_overflow>:
exception_handler overflow , 4 , 0
   100c6:	6a 00                	push   $0x0
   100c8:	6a 04                	push   $0x4
   100ca:	60                   	pusha  
   100cb:	1e                   	push   %ds
   100cc:	06                   	push   %es
   100cd:	0f a0                	push   %fs
   100cf:	0f a8                	push   %gs
   100d1:	54                   	push   %esp
   100d2:	e8 16 17 00 00       	call   117ed <do_handler_overflow>
   100d7:	83 c4 04             	add    $0x4,%esp
   100da:	0f a9                	pop    %gs
   100dc:	0f a1                	pop    %fs
   100de:	07                   	pop    %es
   100df:	1f                   	pop    %ds
   100e0:	61                   	popa   
   100e1:	83 c4 08             	add    $0x8,%esp
   100e4:	cf                   	iret   

000100e5 <exception_handler_bound_range_exceeded>:
exception_handler bound_range_exceeded , 5 , 0
   100e5:	6a 00                	push   $0x0
   100e7:	6a 05                	push   $0x5
   100e9:	60                   	pusha  
   100ea:	1e                   	push   %ds
   100eb:	06                   	push   %es
   100ec:	0f a0                	push   %fs
   100ee:	0f a8                	push   %gs
   100f0:	54                   	push   %esp
   100f1:	e8 13 17 00 00       	call   11809 <do_handler_bound_range_exceeded>
   100f6:	83 c4 04             	add    $0x4,%esp
   100f9:	0f a9                	pop    %gs
   100fb:	0f a1                	pop    %fs
   100fd:	07                   	pop    %es
   100fe:	1f                   	pop    %ds
   100ff:	61                   	popa   
   10100:	83 c4 08             	add    $0x8,%esp
   10103:	cf                   	iret   

00010104 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode , 6 , 0
   10104:	6a 00                	push   $0x0
   10106:	6a 06                	push   $0x6
   10108:	60                   	pusha  
   10109:	1e                   	push   %ds
   1010a:	06                   	push   %es
   1010b:	0f a0                	push   %fs
   1010d:	0f a8                	push   %gs
   1010f:	54                   	push   %esp
   10110:	e8 10 17 00 00       	call   11825 <do_handler_invalid_opcode>
   10115:	83 c4 04             	add    $0x4,%esp
   10118:	0f a9                	pop    %gs
   1011a:	0f a1                	pop    %fs
   1011c:	07                   	pop    %es
   1011d:	1f                   	pop    %ds
   1011e:	61                   	popa   
   1011f:	83 c4 08             	add    $0x8,%esp
   10122:	cf                   	iret   

00010123 <exception_handler_device_not_available>:
exception_handler device_not_available , 7 , 0
   10123:	6a 00                	push   $0x0
   10125:	6a 07                	push   $0x7
   10127:	60                   	pusha  
   10128:	1e                   	push   %ds
   10129:	06                   	push   %es
   1012a:	0f a0                	push   %fs
   1012c:	0f a8                	push   %gs
   1012e:	54                   	push   %esp
   1012f:	e8 0d 17 00 00       	call   11841 <do_handler_device_not_available>
   10134:	83 c4 04             	add    $0x4,%esp
   10137:	0f a9                	pop    %gs
   10139:	0f a1                	pop    %fs
   1013b:	07                   	pop    %es
   1013c:	1f                   	pop    %ds
   1013d:	61                   	popa   
   1013e:	83 c4 08             	add    $0x8,%esp
   10141:	cf                   	iret   

00010142 <exception_handler_double_fault>:
exception_handler double_fault , 8 , 1
   10142:	6a 08                	push   $0x8
   10144:	60                   	pusha  
   10145:	1e                   	push   %ds
   10146:	06                   	push   %es
   10147:	0f a0                	push   %fs
   10149:	0f a8                	push   %gs
   1014b:	54                   	push   %esp
   1014c:	e8 0c 17 00 00       	call   1185d <do_handler_double_fault>
   10151:	83 c4 04             	add    $0x4,%esp
   10154:	0f a9                	pop    %gs
   10156:	0f a1                	pop    %fs
   10158:	07                   	pop    %es
   10159:	1f                   	pop    %ds
   1015a:	61                   	popa   
   1015b:	83 c4 08             	add    $0x8,%esp
   1015e:	cf                   	iret   

0001015f <exception_handler_invalid_tss>:
exception_handler invalid_tss , 10 , 1
   1015f:	6a 0a                	push   $0xa
   10161:	60                   	pusha  
   10162:	1e                   	push   %ds
   10163:	06                   	push   %es
   10164:	0f a0                	push   %fs
   10166:	0f a8                	push   %gs
   10168:	54                   	push   %esp
   10169:	e8 0b 17 00 00       	call   11879 <do_handler_invalid_tss>
   1016e:	83 c4 04             	add    $0x4,%esp
   10171:	0f a9                	pop    %gs
   10173:	0f a1                	pop    %fs
   10175:	07                   	pop    %es
   10176:	1f                   	pop    %ds
   10177:	61                   	popa   
   10178:	83 c4 08             	add    $0x8,%esp
   1017b:	cf                   	iret   

0001017c <exception_handler_segment_not_present>:
exception_handler segment_not_present , 11 , 1
   1017c:	6a 0b                	push   $0xb
   1017e:	60                   	pusha  
   1017f:	1e                   	push   %ds
   10180:	06                   	push   %es
   10181:	0f a0                	push   %fs
   10183:	0f a8                	push   %gs
   10185:	54                   	push   %esp
   10186:	e8 0a 17 00 00       	call   11895 <do_handler_segment_not_present>
   1018b:	83 c4 04             	add    $0x4,%esp
   1018e:	0f a9                	pop    %gs
   10190:	0f a1                	pop    %fs
   10192:	07                   	pop    %es
   10193:	1f                   	pop    %ds
   10194:	61                   	popa   
   10195:	83 c4 08             	add    $0x8,%esp
   10198:	cf                   	iret   

00010199 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault , 12 , 1
   10199:	6a 0c                	push   $0xc
   1019b:	60                   	pusha  
   1019c:	1e                   	push   %ds
   1019d:	06                   	push   %es
   1019e:	0f a0                	push   %fs
   101a0:	0f a8                	push   %gs
   101a2:	54                   	push   %esp
   101a3:	e8 09 17 00 00       	call   118b1 <do_handler_stack_segment_fault>
   101a8:	83 c4 04             	add    $0x4,%esp
   101ab:	0f a9                	pop    %gs
   101ad:	0f a1                	pop    %fs
   101af:	07                   	pop    %es
   101b0:	1f                   	pop    %ds
   101b1:	61                   	popa   
   101b2:	83 c4 08             	add    $0x8,%esp
   101b5:	cf                   	iret   

000101b6 <exception_handler_general_protection>:
exception_handler general_protection , 13 , 1
   101b6:	6a 0d                	push   $0xd
   101b8:	60                   	pusha  
   101b9:	1e                   	push   %ds
   101ba:	06                   	push   %es
   101bb:	0f a0                	push   %fs
   101bd:	0f a8                	push   %gs
   101bf:	54                   	push   %esp
   101c0:	e8 08 17 00 00       	call   118cd <do_handler_general_protection>
   101c5:	83 c4 04             	add    $0x4,%esp
   101c8:	0f a9                	pop    %gs
   101ca:	0f a1                	pop    %fs
   101cc:	07                   	pop    %es
   101cd:	1f                   	pop    %ds
   101ce:	61                   	popa   
   101cf:	83 c4 08             	add    $0x8,%esp
   101d2:	cf                   	iret   

000101d3 <exception_handler_page_fault>:
exception_handler page_fault , 14 , 1
   101d3:	6a 0e                	push   $0xe
   101d5:	60                   	pusha  
   101d6:	1e                   	push   %ds
   101d7:	06                   	push   %es
   101d8:	0f a0                	push   %fs
   101da:	0f a8                	push   %gs
   101dc:	54                   	push   %esp
   101dd:	e8 a0 17 00 00       	call   11982 <do_handler_page_fault>
   101e2:	83 c4 04             	add    $0x4,%esp
   101e5:	0f a9                	pop    %gs
   101e7:	0f a1                	pop    %fs
   101e9:	07                   	pop    %es
   101ea:	1f                   	pop    %ds
   101eb:	61                   	popa   
   101ec:	83 c4 08             	add    $0x8,%esp
   101ef:	cf                   	iret   

000101f0 <exception_handler_fpu_error>:
exception_handler fpu_error , 16 , 0
   101f0:	6a 00                	push   $0x0
   101f2:	6a 10                	push   $0x10
   101f4:	60                   	pusha  
   101f5:	1e                   	push   %ds
   101f6:	06                   	push   %es
   101f7:	0f a0                	push   %fs
   101f9:	0f a8                	push   %gs
   101fb:	54                   	push   %esp
   101fc:	e8 67 18 00 00       	call   11a68 <do_handler_fpu_error>
   10201:	83 c4 04             	add    $0x4,%esp
   10204:	0f a9                	pop    %gs
   10206:	0f a1                	pop    %fs
   10208:	07                   	pop    %es
   10209:	1f                   	pop    %ds
   1020a:	61                   	popa   
   1020b:	83 c4 08             	add    $0x8,%esp
   1020e:	cf                   	iret   

0001020f <exception_handler_alignment_check>:
exception_handler alignment_check , 17 , 1
   1020f:	6a 11                	push   $0x11
   10211:	60                   	pusha  
   10212:	1e                   	push   %ds
   10213:	06                   	push   %es
   10214:	0f a0                	push   %fs
   10216:	0f a8                	push   %gs
   10218:	54                   	push   %esp
   10219:	e8 66 18 00 00       	call   11a84 <do_handler_alignment_check>
   1021e:	83 c4 04             	add    $0x4,%esp
   10221:	0f a9                	pop    %gs
   10223:	0f a1                	pop    %fs
   10225:	07                   	pop    %es
   10226:	1f                   	pop    %ds
   10227:	61                   	popa   
   10228:	83 c4 08             	add    $0x8,%esp
   1022b:	cf                   	iret   

0001022c <exception_handler_machine_check>:
exception_handler machine_check , 18 , 0
   1022c:	6a 00                	push   $0x0
   1022e:	6a 12                	push   $0x12
   10230:	60                   	pusha  
   10231:	1e                   	push   %ds
   10232:	06                   	push   %es
   10233:	0f a0                	push   %fs
   10235:	0f a8                	push   %gs
   10237:	54                   	push   %esp
   10238:	e8 63 18 00 00       	call   11aa0 <do_handler_machine_check>
   1023d:	83 c4 04             	add    $0x4,%esp
   10240:	0f a9                	pop    %gs
   10242:	0f a1                	pop    %fs
   10244:	07                   	pop    %es
   10245:	1f                   	pop    %ds
   10246:	61                   	popa   
   10247:	83 c4 08             	add    $0x8,%esp
   1024a:	cf                   	iret   

0001024b <exception_handler_simd_exception>:
exception_handler simd_exception , 19 , 0
   1024b:	6a 00                	push   $0x0
   1024d:	6a 13                	push   $0x13
   1024f:	60                   	pusha  
   10250:	1e                   	push   %ds
   10251:	06                   	push   %es
   10252:	0f a0                	push   %fs
   10254:	0f a8                	push   %gs
   10256:	54                   	push   %esp
   10257:	e8 60 18 00 00       	call   11abc <do_handler_simd_exception>
   1025c:	83 c4 04             	add    $0x4,%esp
   1025f:	0f a9                	pop    %gs
   10261:	0f a1                	pop    %fs
   10263:	07                   	pop    %es
   10264:	1f                   	pop    %ds
   10265:	61                   	popa   
   10266:	83 c4 08             	add    $0x8,%esp
   10269:	cf                   	iret   

0001026a <exception_handler_virtualization_exception>:
exception_handler virtualization_exception , 20 , 0
   1026a:	6a 00                	push   $0x0
   1026c:	6a 14                	push   $0x14
   1026e:	60                   	pusha  
   1026f:	1e                   	push   %ds
   10270:	06                   	push   %es
   10271:	0f a0                	push   %fs
   10273:	0f a8                	push   %gs
   10275:	54                   	push   %esp
   10276:	e8 5d 18 00 00       	call   11ad8 <do_handler_virtualization_exception>
   1027b:	83 c4 04             	add    $0x4,%esp
   1027e:	0f a9                	pop    %gs
   10280:	0f a1                	pop    %fs
   10282:	07                   	pop    %es
   10283:	1f                   	pop    %ds
   10284:	61                   	popa   
   10285:	83 c4 08             	add    $0x8,%esp
   10288:	cf                   	iret   

00010289 <exception_handler_control_protection_exception>:
exception_handler control_protection_exception , 21 , 1
   10289:	6a 15                	push   $0x15
   1028b:	60                   	pusha  
   1028c:	1e                   	push   %ds
   1028d:	06                   	push   %es
   1028e:	0f a0                	push   %fs
   10290:	0f a8                	push   %gs
   10292:	54                   	push   %esp
   10293:	e8 5c 18 00 00       	call   11af4 <do_handler_control_protection_exception>
   10298:	83 c4 04             	add    $0x4,%esp
   1029b:	0f a9                	pop    %gs
   1029d:	0f a1                	pop    %fs
   1029f:	07                   	pop    %es
   102a0:	1f                   	pop    %ds
   102a1:	61                   	popa   
   102a2:	83 c4 08             	add    $0x8,%esp
   102a5:	cf                   	iret   

000102a6 <exception_handler_time>:
exception_handler time , 0x20 , 0
   102a6:	6a 00                	push   $0x0
   102a8:	6a 20                	push   $0x20
   102aa:	60                   	pusha  
   102ab:	1e                   	push   %ds
   102ac:	06                   	push   %es
   102ad:	0f a0                	push   %fs
   102af:	0f a8                	push   %gs
   102b1:	54                   	push   %esp
   102b2:	e8 6b 1c 00 00       	call   11f22 <do_handler_time>
   102b7:	83 c4 04             	add    $0x4,%esp
   102ba:	0f a9                	pop    %gs
   102bc:	0f a1                	pop    %fs
   102be:	07                   	pop    %es
   102bf:	1f                   	pop    %ds
   102c0:	61                   	popa   
   102c1:	83 c4 08             	add    $0x8,%esp
   102c4:	cf                   	iret   

000102c5 <simple_switch>:
    .text
    .global simple_switch
    .global exception_handler_syscall
    .extern do_handler_syscall
simple_switch:
    mov 4(%esp) , %eax
   102c5:	8b 44 24 04          	mov    0x4(%esp),%eax
    mov 8(%esp) , %edx
   102c9:	8b 54 24 08          	mov    0x8(%esp),%edx
    push %ebp
   102cd:	55                   	push   %ebp
    push %ebx
   102ce:	53                   	push   %ebx
    push %esi
   102cf:	56                   	push   %esi
    push %edi
   102d0:	57                   	push   %edi

    mov %esp , (%eax)
   102d1:	89 20                	mov    %esp,(%eax)
    mov %edx , %esp
   102d3:	89 d4                	mov    %edx,%esp

    pop %edi
   102d5:	5f                   	pop    %edi
    pop %esi
   102d6:	5e                   	pop    %esi
    pop %ebx
   102d7:	5b                   	pop    %ebx
    pop %ebp
   102d8:	5d                   	pop    %ebp
    ret
   102d9:	c3                   	ret    

000102da <exception_handler_syscall>:

exception_handler_syscall:
    pusha
   102da:	60                   	pusha  
    push %ds
   102db:	1e                   	push   %ds
    push %es
   102dc:	06                   	push   %es
    push %fs
   102dd:	0f a0                	push   %fs
    push %gs
   102df:	0f a8                	push   %gs
    pushf
   102e1:	9c                   	pushf  

    mov %esp , %eax
   102e2:	89 e0                	mov    %esp,%eax
    push %eax
   102e4:	50                   	push   %eax
    call do_handler_syscall;
   102e5:	e8 2e 08 00 00       	call   10b18 <do_handler_syscall>
    add $4 , %esp
   102ea:	83 c4 04             	add    $0x4,%esp


    popf
   102ed:	9d                   	popf   
    pop %gs
   102ee:	0f a9                	pop    %gs
    pop %fs
   102f0:	0f a1                	pop    %fs
    pop %es
   102f2:	07                   	pop    %es
    pop %ds
   102f3:	1f                   	pop    %ds
    popa
   102f4:	61                   	popa   

   102f5:	ca 14 00             	lret   $0x14

000102f8 <write_cr3>:
    uint32_t cr3;
    __asm__ __volatile__("mov %%cr3 , %[v]":[v]"=r"(cr3));
    return cr3;
}

static inline void write_cr3( uint32_t v ){
   102f8:	55                   	push   %ebp
   102f9:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v] , %%cr3"::[v]"r"(v));
   102fb:	8b 45 08             	mov    0x8(%ebp),%eax
   102fe:	0f 22 d8             	mov    %eax,%cr3
}
   10301:	90                   	nop
   10302:	5d                   	pop    %ebp
   10303:	c3                   	ret    

00010304 <mmu_set_page_dir>:
        uint32_t phy_page_addr : 20;

    };
}pte_t;

static inline void mmu_set_page_dir(uint32_t paddr ){
   10304:	55                   	push   %ebp
   10305:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   10307:	ff 75 08             	pushl  0x8(%ebp)
   1030a:	e8 e9 ff ff ff       	call   102f8 <write_cr3>
   1030f:	83 c4 04             	add    $0x4,%esp
}
   10312:	90                   	nop
   10313:	c9                   	leave  
   10314:	c3                   	ret    

00010315 <pde_index>:


static inline uint32_t pde_index( uint32_t vaddr ){
   10315:	55                   	push   %ebp
   10316:	89 e5                	mov    %esp,%ebp
   10318:	83 ec 10             	sub    $0x10,%esp
    int index = ( vaddr >> 22 );
   1031b:	8b 45 08             	mov    0x8(%ebp),%eax
   1031e:	c1 e8 16             	shr    $0x16,%eax
   10321:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return index;
   10324:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10327:	c9                   	leave  
   10328:	c3                   	ret    

00010329 <pte_index>:

static inline uint32_t pte_index( uint32_t vaddr ){
   10329:	55                   	push   %ebp
   1032a:	89 e5                	mov    %esp,%ebp
   1032c:	83 ec 10             	sub    $0x10,%esp
    int index = ( vaddr >> 12 ) & 0x3ff ;
   1032f:	8b 45 08             	mov    0x8(%ebp),%eax
   10332:	c1 e8 0c             	shr    $0xc,%eax
   10335:	25 ff 03 00 00       	and    $0x3ff,%eax
   1033a:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return index;
   1033d:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10340:	c9                   	leave  
   10341:	c3                   	ret    

00010342 <pde_paddr>:

static inline uint32_t pde_paddr( pde_t * pde ){
   10342:	55                   	push   %ebp
   10343:	89 e5                	mov    %esp,%ebp
    return pde->phy_pt_addr << 12;
   10345:	8b 45 08             	mov    0x8(%ebp),%eax
   10348:	8b 00                	mov    (%eax),%eax
   1034a:	c1 e8 0c             	shr    $0xc,%eax
   1034d:	c1 e0 0c             	shl    $0xc,%eax
}
   10350:	5d                   	pop    %ebp
   10351:	c3                   	ret    

00010352 <pte_paddr>:

static inline uint32_t pte_paddr( pte_t * pte ){
   10352:	55                   	push   %ebp
   10353:	89 e5                	mov    %esp,%ebp
    return pte->phy_page_addr << 12;
   10355:	8b 45 08             	mov    0x8(%ebp),%eax
   10358:	8b 00                	mov    (%eax),%eax
   1035a:	c1 e8 0c             	shr    $0xc,%eax
   1035d:	c1 e0 0c             	shl    $0xc,%eax
}
   10360:	5d                   	pop    %ebp
   10361:	c3                   	ret    

00010362 <down2>:
#define KLIB_H
#include"comm/types.h"
#include<stdarg.h>
#define REALSE

static inline uint32_t down2( uint32_t size , uint32_t bounds ){
   10362:	55                   	push   %ebp
   10363:	89 e5                	mov    %esp,%ebp
    return size / bounds * bounds;
   10365:	8b 45 08             	mov    0x8(%ebp),%eax
   10368:	ba 00 00 00 00       	mov    $0x0,%edx
   1036d:	f7 75 0c             	divl   0xc(%ebp)
   10370:	0f af 45 0c          	imul   0xc(%ebp),%eax
}
   10374:	5d                   	pop    %ebp
   10375:	c3                   	ret    

00010376 <up2>:

static inline uint32_t up2( uint32_t size , uint32_t bounds ){
   10376:	55                   	push   %ebp
   10377:	89 e5                	mov    %esp,%ebp
    return (size + bounds - 1)/ bounds * bounds;
   10379:	8b 55 08             	mov    0x8(%ebp),%edx
   1037c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1037f:	01 d0                	add    %edx,%eax
   10381:	83 e8 01             	sub    $0x1,%eax
   10384:	ba 00 00 00 00       	mov    $0x0,%edx
   10389:	f7 75 0c             	divl   0xc(%ebp)
   1038c:	0f af 45 0c          	imul   0xc(%ebp),%eax
}
   10390:	5d                   	pop    %ebp
   10391:	c3                   	ret    

00010392 <addr_alloc_init>:

static addr_alloc_t paddr_alloc;

static pde_t kernel_page_dir[PDE_CNT] __attribute__((aligned(MEM_PAGE_SIZE))); 
static void addr_alloc_init( addr_alloc_t * alloc , uint8_t * bits , 
    uint32_t start , uint32_t size , uint32_t page_size ){
   10392:	55                   	push   %ebp
   10393:	89 e5                	mov    %esp,%ebp
   10395:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&alloc->mutex);
   10398:	8b 45 08             	mov    0x8(%ebp),%eax
   1039b:	83 ec 0c             	sub    $0xc,%esp
   1039e:	50                   	push   %eax
   1039f:	e8 36 1d 00 00       	call   120da <mutex_init>
   103a4:	83 c4 10             	add    $0x10,%esp
    alloc->start = start;
   103a7:	8b 45 08             	mov    0x8(%ebp),%eax
   103aa:	8b 55 10             	mov    0x10(%ebp),%edx
   103ad:	89 50 1c             	mov    %edx,0x1c(%eax)
    alloc->size = size;
   103b0:	8b 45 08             	mov    0x8(%ebp),%eax
   103b3:	8b 55 14             	mov    0x14(%ebp),%edx
   103b6:	89 50 20             	mov    %edx,0x20(%eax)
    alloc->page_size = page_size;
   103b9:	8b 45 08             	mov    0x8(%ebp),%eax
   103bc:	8b 55 18             	mov    0x18(%ebp),%edx
   103bf:	89 50 24             	mov    %edx,0x24(%eax)
    bitmap_init( &alloc->bitmap , bits , alloc->size / page_size , 0 );
   103c2:	8b 45 08             	mov    0x8(%ebp),%eax
   103c5:	8b 40 20             	mov    0x20(%eax),%eax
   103c8:	ba 00 00 00 00       	mov    $0x0,%edx
   103cd:	f7 75 18             	divl   0x18(%ebp)
   103d0:	89 c2                	mov    %eax,%edx
   103d2:	8b 45 08             	mov    0x8(%ebp),%eax
   103d5:	83 c0 14             	add    $0x14,%eax
   103d8:	6a 00                	push   $0x0
   103da:	52                   	push   %edx
   103db:	ff 75 0c             	pushl  0xc(%ebp)
   103de:	50                   	push   %eax
   103df:	e8 cc 1f 00 00       	call   123b0 <bitmap_init>
   103e4:	83 c4 10             	add    $0x10,%esp
}
   103e7:	90                   	nop
   103e8:	c9                   	leave  
   103e9:	c3                   	ret    

000103ea <addr_alloc_page>:

static uint32_t addr_alloc_page( addr_alloc_t * alloc , int page_count ){
   103ea:	55                   	push   %ebp
   103eb:	89 e5                	mov    %esp,%ebp
   103ed:	83 ec 18             	sub    $0x18,%esp
    uint32_t addr = 0;
   103f0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    mutex_lock(&alloc->mutex);
   103f7:	8b 45 08             	mov    0x8(%ebp),%eax
   103fa:	83 ec 0c             	sub    $0xc,%esp
   103fd:	50                   	push   %eax
   103fe:	e8 05 1d 00 00       	call   12108 <mutex_lock>
   10403:	83 c4 10             	add    $0x10,%esp

    int page_index = bitmap_alloc_nbits( &alloc->bitmap , 0 , page_count );
   10406:	8b 45 08             	mov    0x8(%ebp),%eax
   10409:	83 c0 14             	add    $0x14,%eax
   1040c:	83 ec 04             	sub    $0x4,%esp
   1040f:	ff 75 0c             	pushl  0xc(%ebp)
   10412:	6a 00                	push   $0x0
   10414:	50                   	push   %eax
   10415:	e8 16 21 00 00       	call   12530 <bitmap_alloc_nbits>
   1041a:	83 c4 10             	add    $0x10,%esp
   1041d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if( page_index >= 0 ){
   10420:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10424:	78 17                	js     1043d <addr_alloc_page+0x53>
        addr = alloc->start + page_index * alloc->page_size;
   10426:	8b 45 08             	mov    0x8(%ebp),%eax
   10429:	8b 50 1c             	mov    0x1c(%eax),%edx
   1042c:	8b 45 08             	mov    0x8(%ebp),%eax
   1042f:	8b 48 24             	mov    0x24(%eax),%ecx
   10432:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10435:	0f af c1             	imul   %ecx,%eax
   10438:	01 d0                	add    %edx,%eax
   1043a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    mutex_unlock(&alloc->mutex);
   1043d:	8b 45 08             	mov    0x8(%ebp),%eax
   10440:	83 ec 0c             	sub    $0xc,%esp
   10443:	50                   	push   %eax
   10444:	e8 50 1d 00 00       	call   12199 <mutex_unlock>
   10449:	83 c4 10             	add    $0x10,%esp
    return addr;
   1044c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   1044f:	c9                   	leave  
   10450:	c3                   	ret    

00010451 <addr_free_page>:

static void addr_free_page( addr_alloc_t * alloc , uint32_t addr , int page_count ){
   10451:	55                   	push   %ebp
   10452:	89 e5                	mov    %esp,%ebp
   10454:	53                   	push   %ebx
   10455:	83 ec 14             	sub    $0x14,%esp
    mutex_lock(&alloc->mutex);
   10458:	8b 45 08             	mov    0x8(%ebp),%eax
   1045b:	83 ec 0c             	sub    $0xc,%esp
   1045e:	50                   	push   %eax
   1045f:	e8 a4 1c 00 00       	call   12108 <mutex_lock>
   10464:	83 c4 10             	add    $0x10,%esp
    uint32_t pg_index = ( addr - alloc->start ) / alloc->page_size;
   10467:	8b 45 08             	mov    0x8(%ebp),%eax
   1046a:	8b 40 1c             	mov    0x1c(%eax),%eax
   1046d:	8b 55 0c             	mov    0xc(%ebp),%edx
   10470:	89 d1                	mov    %edx,%ecx
   10472:	29 c1                	sub    %eax,%ecx
   10474:	8b 45 08             	mov    0x8(%ebp),%eax
   10477:	8b 58 24             	mov    0x24(%eax),%ebx
   1047a:	89 c8                	mov    %ecx,%eax
   1047c:	ba 00 00 00 00       	mov    $0x0,%edx
   10481:	f7 f3                	div    %ebx
   10483:	89 45 f4             	mov    %eax,-0xc(%ebp)
    bitmap_set_bit( &alloc->bitmap , pg_index , page_count , 0 );
   10486:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10489:	8b 55 08             	mov    0x8(%ebp),%edx
   1048c:	83 c2 14             	add    $0x14,%edx
   1048f:	6a 00                	push   $0x0
   10491:	ff 75 10             	pushl  0x10(%ebp)
   10494:	50                   	push   %eax
   10495:	52                   	push   %edx
   10496:	e8 a6 1f 00 00       	call   12441 <bitmap_set_bit>
   1049b:	83 c4 10             	add    $0x10,%esp
    mutex_unlock(&alloc->mutex);
   1049e:	8b 45 08             	mov    0x8(%ebp),%eax
   104a1:	83 ec 0c             	sub    $0xc,%esp
   104a4:	50                   	push   %eax
   104a5:	e8 ef 1c 00 00       	call   12199 <mutex_unlock>
   104aa:	83 c4 10             	add    $0x10,%esp

}
   104ad:	90                   	nop
   104ae:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   104b1:	c9                   	leave  
   104b2:	c3                   	ret    

000104b3 <show_mem_info>:

void show_mem_info( boot_info_t * boot_info ){
   104b3:	55                   	push   %ebp
   104b4:	89 e5                	mov    %esp,%ebp
   104b6:	83 ec 18             	sub    $0x18,%esp
    log_printf("mem region");
   104b9:	83 ec 0c             	sub    $0xc,%esp
   104bc:	68 84 2e 01 00       	push   $0x12e84
   104c1:	e8 e0 28 00 00       	call   12da6 <log_printf>
   104c6:	83 c4 10             	add    $0x10,%esp
    for( int i = 0 ; i < boot_info->ram_region_count ; i ++ ){
   104c9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   104d0:	eb 29                	jmp    104fb <show_mem_info+0x48>
        log_printf("[%d]:%x - %x\n" , i , boot_info->ram_region_cfg[i].start , 
   104d2:	8b 45 08             	mov    0x8(%ebp),%eax
   104d5:	8b 55 f4             	mov    -0xc(%ebp),%edx
   104d8:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   104dc:	8b 45 08             	mov    0x8(%ebp),%eax
   104df:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   104e2:	8b 04 c8             	mov    (%eax,%ecx,8),%eax
   104e5:	52                   	push   %edx
   104e6:	50                   	push   %eax
   104e7:	ff 75 f4             	pushl  -0xc(%ebp)
   104ea:	68 8f 2e 01 00       	push   $0x12e8f
   104ef:	e8 b2 28 00 00       	call   12da6 <log_printf>
   104f4:	83 c4 10             	add    $0x10,%esp
    for( int i = 0 ; i < boot_info->ram_region_count ; i ++ ){
   104f7:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   104fb:	8b 45 08             	mov    0x8(%ebp),%eax
   104fe:	8b 40 50             	mov    0x50(%eax),%eax
   10501:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   10504:	7c cc                	jl     104d2 <show_mem_info+0x1f>
        boot_info->ram_region_cfg[i].size);
    }
}
   10506:	90                   	nop
   10507:	c9                   	leave  
   10508:	c3                   	ret    

00010509 <find_pte>:

pte_t * find_pte( pde_t * page_dir , uint32_t vaddr , int alloc ){
   10509:	55                   	push   %ebp
   1050a:	89 e5                	mov    %esp,%ebp
   1050c:	83 ec 18             	sub    $0x18,%esp

    pte_t * page_table;
    //找到是页目录表中的表项
    pde_t * pde = page_dir + pde_index( vaddr );
   1050f:	ff 75 0c             	pushl  0xc(%ebp)
   10512:	e8 fe fd ff ff       	call   10315 <pde_index>
   10517:	83 c4 04             	add    $0x4,%esp
   1051a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10521:	8b 45 08             	mov    0x8(%ebp),%eax
   10524:	01 d0                	add    %edx,%eax
   10526:	89 45 f0             	mov    %eax,-0x10(%ebp)
    //判断该表项是否存在
    if( pde->present ){
   10529:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1052c:	0f b6 00             	movzbl (%eax),%eax
   1052f:	83 e0 01             	and    $0x1,%eax
   10532:	84 c0                	test   %al,%al
   10534:	74 10                	je     10546 <find_pte+0x3d>
        page_table = (pte_t *)pde_paddr(pde);
   10536:	ff 75 f0             	pushl  -0x10(%ebp)
   10539:	e8 04 fe ff ff       	call   10342 <pde_paddr>
   1053e:	83 c4 04             	add    $0x4,%esp
   10541:	89 45 f4             	mov    %eax,-0xc(%ebp)
   10544:	eb 57                	jmp    1059d <find_pte+0x94>
    }
    else{
        if( alloc == 0 ){
   10546:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1054a:	75 07                	jne    10553 <find_pte+0x4a>
            return (pte_t *)0;
   1054c:	b8 00 00 00 00       	mov    $0x0,%eax
   10551:	eb 64                	jmp    105b7 <find_pte+0xae>
        }
        //创建一个二级页表
        uint32_t pg_paddr = addr_alloc_page( &paddr_alloc , 1 );
   10553:	83 ec 08             	sub    $0x8,%esp
   10556:	6a 01                	push   $0x1
   10558:	68 00 50 01 00       	push   $0x15000
   1055d:	e8 88 fe ff ff       	call   103ea <addr_alloc_page>
   10562:	83 c4 10             	add    $0x10,%esp
   10565:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if( pg_paddr == 0 ){
   10568:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1056c:	75 07                	jne    10575 <find_pte+0x6c>
            return (pte_t * )0;
   1056e:	b8 00 00 00 00       	mov    $0x0,%eax
   10573:	eb 42                	jmp    105b7 <find_pte+0xae>
        }

        pde->v = pg_paddr | PDE_P | PDE_W | PDE_U; 
   10575:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10578:	83 c8 07             	or     $0x7,%eax
   1057b:	89 c2                	mov    %eax,%edx
   1057d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10580:	89 10                	mov    %edx,(%eax)
        page_table = (pte_t *)pg_paddr;
   10582:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10585:	89 45 f4             	mov    %eax,-0xc(%ebp)
        kernel_memset( page_table , 0 , MEM_PAGE_SIZE );
   10588:	83 ec 04             	sub    $0x4,%esp
   1058b:	68 00 10 00 00       	push   $0x1000
   10590:	6a 00                	push   $0x0
   10592:	ff 75 f4             	pushl  -0xc(%ebp)
   10595:	e8 f8 21 00 00       	call   12792 <kernel_memset>
   1059a:	83 c4 10             	add    $0x10,%esp
    }

    return page_table + pte_index( vaddr );
   1059d:	83 ec 0c             	sub    $0xc,%esp
   105a0:	ff 75 0c             	pushl  0xc(%ebp)
   105a3:	e8 81 fd ff ff       	call   10329 <pte_index>
   105a8:	83 c4 10             	add    $0x10,%esp
   105ab:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   105b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   105b5:	01 d0                	add    %edx,%eax
}
   105b7:	c9                   	leave  
   105b8:	c3                   	ret    

000105b9 <memory_create_map>:

int memory_create_map (pde_t * page_dir , uint32_t vaddr , uint32_t paddr , int count , uint32_t prem ){
   105b9:	55                   	push   %ebp
   105ba:	89 e5                	mov    %esp,%ebp
   105bc:	83 ec 18             	sub    $0x18,%esp
    for( int i = 0 ; i < count ; i ++ ){
   105bf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   105c6:	eb 6b                	jmp    10633 <memory_create_map+0x7a>
        pte_t * pte = find_pte( page_dir , vaddr , 1 );
   105c8:	83 ec 04             	sub    $0x4,%esp
   105cb:	6a 01                	push   $0x1
   105cd:	ff 75 0c             	pushl  0xc(%ebp)
   105d0:	ff 75 08             	pushl  0x8(%ebp)
   105d3:	e8 31 ff ff ff       	call   10509 <find_pte>
   105d8:	83 c4 10             	add    $0x10,%esp
   105db:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if( pte == (pte_t *)0 ){
   105de:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   105e2:	75 07                	jne    105eb <memory_create_map+0x32>
            return -1;
   105e4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   105e9:	eb 50                	jmp    1063b <memory_create_map+0x82>
        }
        ASSERT( pte->present == 0 );
   105eb:	8b 45 f0             	mov    -0x10(%ebp),%eax
   105ee:	0f b6 00             	movzbl (%eax),%eax
   105f1:	83 e0 01             	and    $0x1,%eax
   105f4:	84 c0                	test   %al,%al
   105f6:	74 19                	je     10611 <memory_create_map+0x58>
   105f8:	68 9d 2e 01 00       	push   $0x12e9d
   105fd:	68 94 2f 01 00       	push   $0x12f94
   10602:	6a 50                	push   $0x50
   10604:	68 b0 2e 01 00       	push   $0x12eb0
   10609:	e8 91 24 00 00       	call   12a9f <pannic>
   1060e:	83 c4 10             	add    $0x10,%esp
        pte->v = paddr | prem | PTE_P;
   10611:	8b 45 10             	mov    0x10(%ebp),%eax
   10614:	0b 45 18             	or     0x18(%ebp),%eax
   10617:	83 c8 01             	or     $0x1,%eax
   1061a:	89 c2                	mov    %eax,%edx
   1061c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1061f:	89 10                	mov    %edx,(%eax)
        vaddr += MEM_PAGE_SIZE;
   10621:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
        paddr += MEM_PAGE_SIZE;
   10628:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    for( int i = 0 ; i < count ; i ++ ){
   1062f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10633:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10636:	3b 45 14             	cmp    0x14(%ebp),%eax
   10639:	7c 8d                	jl     105c8 <memory_create_map+0xf>
    }
}
   1063b:	c9                   	leave  
   1063c:	c3                   	ret    

0001063d <create_kernel_table>:

void create_kernel_table( void ){
   1063d:	55                   	push   %ebp
   1063e:	89 e5                	mov    %esp,%ebp
   10640:	83 ec 28             	sub    $0x28,%esp
        { s_text , e_text ,  s_text , 0 },
        { s_data , (void *)MEM_EBDA_START , s_data , PTE_W } ,
        { (void *)MEM_EXT_START , (void *)MEM_EXT_END , (void *)MEM_EXT_START , PTE_W }
    };

    for( int i = 0 ; i < sizeof(kernel_map) / sizeof(memory_map_t) ; i ++ ){
   10643:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1064a:	e9 82 00 00 00       	jmp    106d1 <create_kernel_table+0x94>
        memory_map_t * map = kernel_map + i;
   1064f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10652:	c1 e0 04             	shl    $0x4,%eax
   10655:	05 00 40 01 00       	add    $0x14000,%eax
   1065a:	89 45 f0             	mov    %eax,-0x10(%ebp)
        uint32_t vstart = down2( (uint32_t)map->vstart , MEM_PAGE_SIZE );
   1065d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10660:	8b 00                	mov    (%eax),%eax
   10662:	68 00 10 00 00       	push   $0x1000
   10667:	50                   	push   %eax
   10668:	e8 f5 fc ff ff       	call   10362 <down2>
   1066d:	83 c4 08             	add    $0x8,%esp
   10670:	89 45 ec             	mov    %eax,-0x14(%ebp)
        uint32_t vend = up2( (uint32_t)map->vend , MEM_PAGE_SIZE );
   10673:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10676:	8b 40 04             	mov    0x4(%eax),%eax
   10679:	68 00 10 00 00       	push   $0x1000
   1067e:	50                   	push   %eax
   1067f:	e8 f2 fc ff ff       	call   10376 <up2>
   10684:	83 c4 08             	add    $0x8,%esp
   10687:	89 45 e8             	mov    %eax,-0x18(%ebp)
        uint32_t paddr = down2((uint32_t)map->p_start , MEM_PAGE_SIZE );
   1068a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1068d:	8b 40 08             	mov    0x8(%eax),%eax
   10690:	68 00 10 00 00       	push   $0x1000
   10695:	50                   	push   %eax
   10696:	e8 c7 fc ff ff       	call   10362 <down2>
   1069b:	83 c4 08             	add    $0x8,%esp
   1069e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        int page_count = (vend - vstart) / MEM_PAGE_SIZE;
   106a1:	8b 45 e8             	mov    -0x18(%ebp),%eax
   106a4:	2b 45 ec             	sub    -0x14(%ebp),%eax
   106a7:	c1 e8 0c             	shr    $0xc,%eax
   106aa:	89 45 e0             	mov    %eax,-0x20(%ebp)
        memory_create_map( kernel_page_dir ,  vstart , paddr , page_count , map->perm );
   106ad:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106b0:	8b 40 0c             	mov    0xc(%eax),%eax
   106b3:	83 ec 0c             	sub    $0xc,%esp
   106b6:	50                   	push   %eax
   106b7:	ff 75 e0             	pushl  -0x20(%ebp)
   106ba:	ff 75 e4             	pushl  -0x1c(%ebp)
   106bd:	ff 75 ec             	pushl  -0x14(%ebp)
   106c0:	68 00 60 01 00       	push   $0x16000
   106c5:	e8 ef fe ff ff       	call   105b9 <memory_create_map>
   106ca:	83 c4 20             	add    $0x20,%esp
    for( int i = 0 ; i < sizeof(kernel_map) / sizeof(memory_map_t) ; i ++ ){
   106cd:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   106d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   106d4:	83 f8 03             	cmp    $0x3,%eax
   106d7:	0f 86 72 ff ff ff    	jbe    1064f <create_kernel_table+0x12>
    }
}
   106dd:	90                   	nop
   106de:	c9                   	leave  
   106df:	c3                   	ret    

000106e0 <total_mem_size>:

static uint32_t total_mem_size( boot_info_t * boot_info ){
   106e0:	55                   	push   %ebp
   106e1:	89 e5                	mov    %esp,%ebp
   106e3:	83 ec 10             	sub    $0x10,%esp
    uint32_t mem_size = 0;
   106e6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for( int i = 0 ; i < boot_info->ram_region_count ; i ++ ){
   106ed:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   106f4:	eb 11                	jmp    10707 <total_mem_size+0x27>
        mem_size += boot_info -> ram_region_cfg[i].size;
   106f6:	8b 45 08             	mov    0x8(%ebp),%eax
   106f9:	8b 55 f8             	mov    -0x8(%ebp),%edx
   106fc:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
   10700:	01 45 fc             	add    %eax,-0x4(%ebp)
    for( int i = 0 ; i < boot_info->ram_region_count ; i ++ ){
   10703:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   10707:	8b 45 08             	mov    0x8(%ebp),%eax
   1070a:	8b 40 50             	mov    0x50(%eax),%eax
   1070d:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   10710:	7c e4                	jl     106f6 <total_mem_size+0x16>
    }
    return mem_size;
   10712:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10715:	c9                   	leave  
   10716:	c3                   	ret    

00010717 <memory_init>:

void memory_init( boot_info_t * boot_info ){
   10717:	55                   	push   %ebp
   10718:	89 e5                	mov    %esp,%ebp
   1071a:	83 ec 18             	sub    $0x18,%esp
    extern uint8_t * mem_free_start;
    log_printf("mem init");
   1071d:	83 ec 0c             	sub    $0xc,%esp
   10720:	68 ef 2e 01 00       	push   $0x12eef
   10725:	e8 7c 26 00 00       	call   12da6 <log_printf>
   1072a:	83 c4 10             	add    $0x10,%esp
    show_mem_info( boot_info );
   1072d:	83 ec 0c             	sub    $0xc,%esp
   10730:	ff 75 08             	pushl  0x8(%ebp)
   10733:	e8 7b fd ff ff       	call   104b3 <show_mem_info>
   10738:	83 c4 10             	add    $0x10,%esp
    uint8_t * mem_free = (uint8_t *)&mem_free_start;
   1073b:	c7 45 f4 95 ae 01 00 	movl   $0x1ae95,-0xc(%ebp)
    uint32_t mem_up1MB_free = total_mem_size(boot_info) - MEM_EXT_START;
   10742:	83 ec 0c             	sub    $0xc,%esp
   10745:	ff 75 08             	pushl  0x8(%ebp)
   10748:	e8 93 ff ff ff       	call   106e0 <total_mem_size>
   1074d:	83 c4 10             	add    $0x10,%esp
   10750:	2d 00 00 10 00       	sub    $0x100000,%eax
   10755:	89 45 f0             	mov    %eax,-0x10(%ebp)
    mem_up1MB_free = down2( mem_up1MB_free , MEM_PAGE_SIZE );
   10758:	83 ec 08             	sub    $0x8,%esp
   1075b:	68 00 10 00 00       	push   $0x1000
   10760:	ff 75 f0             	pushl  -0x10(%ebp)
   10763:	e8 fa fb ff ff       	call   10362 <down2>
   10768:	83 c4 10             	add    $0x10,%esp
   1076b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    log_printf("free memory:%x , size:%x" , MEM_EXT_START , mem_up1MB_free );
   1076e:	83 ec 04             	sub    $0x4,%esp
   10771:	ff 75 f0             	pushl  -0x10(%ebp)
   10774:	68 00 00 10 00       	push   $0x100000
   10779:	68 f8 2e 01 00       	push   $0x12ef8
   1077e:	e8 23 26 00 00       	call   12da6 <log_printf>
   10783:	83 c4 10             	add    $0x10,%esp
    addr_alloc_init( &paddr_alloc , mem_free , MEM_EXT_START , mem_up1MB_free , MEM_PAGE_SIZE );
   10786:	83 ec 0c             	sub    $0xc,%esp
   10789:	68 00 10 00 00       	push   $0x1000
   1078e:	ff 75 f0             	pushl  -0x10(%ebp)
   10791:	68 00 00 10 00       	push   $0x100000
   10796:	ff 75 f4             	pushl  -0xc(%ebp)
   10799:	68 00 50 01 00       	push   $0x15000
   1079e:	e8 ef fb ff ff       	call   10392 <addr_alloc_init>
   107a3:	83 c4 20             	add    $0x20,%esp
    mem_free += bitmap_byte_count( paddr_alloc.size / MEM_PAGE_SIZE );
   107a6:	a1 20 50 01 00       	mov    0x15020,%eax
   107ab:	c1 e8 0c             	shr    $0xc,%eax
   107ae:	83 ec 0c             	sub    $0xc,%esp
   107b1:	50                   	push   %eax
   107b2:	e8 e3 1b 00 00       	call   1239a <bitmap_byte_count>
   107b7:	83 c4 10             	add    $0x10,%esp
   107ba:	01 45 f4             	add    %eax,-0xc(%ebp)
    ASSERT( mem_free < (uint8_t *)MEM_EBDA_START );
   107bd:	81 7d f4 ff ff 07 00 	cmpl   $0x7ffff,-0xc(%ebp)
   107c4:	76 19                	jbe    107df <memory_init+0xc8>
   107c6:	68 14 2f 01 00       	push   $0x12f14
   107cb:	68 a8 2f 01 00       	push   $0x12fa8
   107d0:	6a 7c                	push   $0x7c
   107d2:	68 b0 2e 01 00       	push   $0x12eb0
   107d7:	e8 c3 22 00 00       	call   12a9f <pannic>
   107dc:	83 c4 10             	add    $0x10,%esp

    create_kernel_table();
   107df:	e8 59 fe ff ff       	call   1063d <create_kernel_table>
    mmu_set_page_dir((uint32_t)kernel_page_dir);
   107e4:	b8 00 60 01 00       	mov    $0x16000,%eax
   107e9:	83 ec 0c             	sub    $0xc,%esp
   107ec:	50                   	push   %eax
   107ed:	e8 12 fb ff ff       	call   10304 <mmu_set_page_dir>
   107f2:	83 c4 10             	add    $0x10,%esp
}
   107f5:	90                   	nop
   107f6:	c9                   	leave  
   107f7:	c3                   	ret    

000107f8 <memory_create_uvm>:

uint32_t memory_create_uvm( void ){
   107f8:	55                   	push   %ebp
   107f9:	89 e5                	mov    %esp,%ebp
   107fb:	83 ec 18             	sub    $0x18,%esp
    pde_t * page_dir = (pde_t *)addr_alloc_page(&paddr_alloc , 1);
   107fe:	83 ec 08             	sub    $0x8,%esp
   10801:	6a 01                	push   $0x1
   10803:	68 00 50 01 00       	push   $0x15000
   10808:	e8 dd fb ff ff       	call   103ea <addr_alloc_page>
   1080d:	83 c4 10             	add    $0x10,%esp
   10810:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if( page_dir == 0 ){
   10813:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10817:	75 07                	jne    10820 <memory_create_uvm+0x28>
        return 0;
   10819:	b8 00 00 00 00       	mov    $0x0,%eax
   1081e:	eb 5b                	jmp    1087b <memory_create_uvm+0x83>
    }
    kernel_memset((void *)page_dir , 0 , MEM_PAGE_SIZE );
   10820:	83 ec 04             	sub    $0x4,%esp
   10823:	68 00 10 00 00       	push   $0x1000
   10828:	6a 00                	push   $0x0
   1082a:	ff 75 f0             	pushl  -0x10(%ebp)
   1082d:	e8 60 1f 00 00       	call   12792 <kernel_memset>
   10832:	83 c4 10             	add    $0x10,%esp
    uint32_t user_pde_start = pde_index(MEMORY_TASK_BASE);
   10835:	83 ec 0c             	sub    $0xc,%esp
   10838:	68 00 00 00 80       	push   $0x80000000
   1083d:	e8 d3 fa ff ff       	call   10315 <pde_index>
   10842:	83 c4 10             	add    $0x10,%esp
   10845:	89 45 ec             	mov    %eax,-0x14(%ebp)
    for(int i = 0 ; i < user_pde_start ; i ++ ){
   10848:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1084f:	eb 1f                	jmp    10870 <memory_create_uvm+0x78>
        page_dir[i].v = kernel_page_dir[i].v;
   10851:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10854:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   1085b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1085e:	01 c2                	add    %eax,%edx
   10860:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10863:	8b 04 85 00 60 01 00 	mov    0x16000(,%eax,4),%eax
   1086a:	89 02                	mov    %eax,(%edx)
    for(int i = 0 ; i < user_pde_start ; i ++ ){
   1086c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10870:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10873:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   10876:	77 d9                	ja     10851 <memory_create_uvm+0x59>
    }

    return (uint32_t)page_dir;
   10878:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   1087b:	c9                   	leave  
   1087c:	c3                   	ret    

0001087d <free_pagemap>:

void free_pagemap( addr_alloc_t * alloc , uint32_t vaddr , uint32_t page_count , pde_t * page_dir ){
   1087d:	55                   	push   %ebp
   1087e:	89 e5                	mov    %esp,%ebp
   10880:	83 ec 28             	sub    $0x28,%esp
    //没收二级页表的页表项
    for(int i = 0 ; i < page_count ; i ++ ){
   10883:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1088a:	eb 56                	jmp    108e2 <free_pagemap+0x65>
        pte_t * pte = find_pte( page_dir , vaddr , 0 );
   1088c:	83 ec 04             	sub    $0x4,%esp
   1088f:	6a 00                	push   $0x0
   10891:	ff 75 0c             	pushl  0xc(%ebp)
   10894:	ff 75 14             	pushl  0x14(%ebp)
   10897:	e8 6d fc ff ff       	call   10509 <find_pte>
   1089c:	83 c4 10             	add    $0x10,%esp
   1089f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if( pte == 0 ) continue;
   108a2:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   108a6:	74 35                	je     108dd <free_pagemap+0x60>
        uint32_t paddr = ( pte->phy_page_addr ) << 12;
   108a8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   108ab:	8b 00                	mov    (%eax),%eax
   108ad:	c1 e8 0c             	shr    $0xc,%eax
   108b0:	c1 e0 0c             	shl    $0xc,%eax
   108b3:	89 45 e0             	mov    %eax,-0x20(%ebp)
        addr_free_page( &paddr_alloc , paddr , 1 );
   108b6:	83 ec 04             	sub    $0x4,%esp
   108b9:	6a 01                	push   $0x1
   108bb:	ff 75 e0             	pushl  -0x20(%ebp)
   108be:	68 00 50 01 00       	push   $0x15000
   108c3:	e8 89 fb ff ff       	call   10451 <addr_free_page>
   108c8:	83 c4 10             	add    $0x10,%esp
        vaddr = vaddr + MEM_PAGE_SIZE;
   108cb:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
        pte->v = 0;
   108d2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   108d5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   108db:	eb 01                	jmp    108de <free_pagemap+0x61>
        if( pte == 0 ) continue;
   108dd:	90                   	nop
    for(int i = 0 ; i < page_count ; i ++ ){
   108de:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   108e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   108e5:	39 45 10             	cmp    %eax,0x10(%ebp)
   108e8:	77 a2                	ja     1088c <free_pagemap+0xf>
    } 
    //没收二级页表
    for(int i = 0 ; i < ( page_count / 1024 ); i ++ ){
   108ea:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   108f1:	eb 64                	jmp    10957 <free_pagemap+0xda>
        pde_t * pde = page_dir + pde_index(vaddr);
   108f3:	83 ec 0c             	sub    $0xc,%esp
   108f6:	ff 75 0c             	pushl  0xc(%ebp)
   108f9:	e8 17 fa ff ff       	call   10315 <pde_index>
   108fe:	83 c4 10             	add    $0x10,%esp
   10901:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10908:	8b 45 14             	mov    0x14(%ebp),%eax
   1090b:	01 d0                	add    %edx,%eax
   1090d:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if( pde->present == 0 ) continue;
   10910:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10913:	0f b6 00             	movzbl (%eax),%eax
   10916:	83 e0 01             	and    $0x1,%eax
   10919:	84 c0                	test   %al,%al
   1091b:	74 35                	je     10952 <free_pagemap+0xd5>
        uint32_t paddr = ( pde->phy_pt_addr ) << 12;
   1091d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10920:	8b 00                	mov    (%eax),%eax
   10922:	c1 e8 0c             	shr    $0xc,%eax
   10925:	c1 e0 0c             	shl    $0xc,%eax
   10928:	89 45 e8             	mov    %eax,-0x18(%ebp)
        addr_free_page( &paddr_alloc , paddr , 1 );
   1092b:	83 ec 04             	sub    $0x4,%esp
   1092e:	6a 01                	push   $0x1
   10930:	ff 75 e8             	pushl  -0x18(%ebp)
   10933:	68 00 50 01 00       	push   $0x15000
   10938:	e8 14 fb ff ff       	call   10451 <addr_free_page>
   1093d:	83 c4 10             	add    $0x10,%esp
        vaddr = vaddr + MEM_PAGE_SIZE * 1024 ;
   10940:	81 45 0c 00 00 40 00 	addl   $0x400000,0xc(%ebp)
        pde->v = 0;
   10947:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1094a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   10950:	eb 01                	jmp    10953 <free_pagemap+0xd6>
        if( pde->present == 0 ) continue;
   10952:	90                   	nop
    for(int i = 0 ; i < ( page_count / 1024 ); i ++ ){
   10953:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10957:	8b 45 10             	mov    0x10(%ebp),%eax
   1095a:	c1 e8 0a             	shr    $0xa,%eax
   1095d:	89 c2                	mov    %eax,%edx
   1095f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10962:	39 c2                	cmp    %eax,%edx
   10964:	77 8d                	ja     108f3 <free_pagemap+0x76>
    }     
}
   10966:	90                   	nop
   10967:	c9                   	leave  
   10968:	c3                   	ret    

00010969 <task_free_page_map>:

void task_free_page_map( uint32_t vaddr , uint32_t page_count , pde_t * page_dir ){
   10969:	55                   	push   %ebp
   1096a:	89 e5                	mov    %esp,%ebp
   1096c:	83 ec 08             	sub    $0x8,%esp
    free_pagemap( &paddr_alloc , vaddr , page_count , page_dir );
   1096f:	ff 75 10             	pushl  0x10(%ebp)
   10972:	ff 75 0c             	pushl  0xc(%ebp)
   10975:	ff 75 08             	pushl  0x8(%ebp)
   10978:	68 00 50 01 00       	push   $0x15000
   1097d:	e8 fb fe ff ff       	call   1087d <free_pagemap>
   10982:	83 c4 10             	add    $0x10,%esp
    return ;
   10985:	90                   	nop
}
   10986:	c9                   	leave  
   10987:	c3                   	ret    

00010988 <memory_alloc_for_page_dir>:

int memory_alloc_for_page_dir( uint32_t page_dir , uint32_t vaddr , uint32_t size,  int prem ){
   10988:	55                   	push   %ebp
   10989:	89 e5                	mov    %esp,%ebp
   1098b:	83 ec 28             	sub    $0x28,%esp
    uint32_t curr_vaddr = vaddr;
   1098e:	8b 45 0c             	mov    0xc(%ebp),%eax
   10991:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int page_count = up2( size , MEM_PAGE_SIZE ) / MEM_PAGE_SIZE; 
   10994:	68 00 10 00 00       	push   $0x1000
   10999:	ff 75 10             	pushl  0x10(%ebp)
   1099c:	e8 d5 f9 ff ff       	call   10376 <up2>
   109a1:	83 c4 08             	add    $0x8,%esp
   109a4:	c1 e8 0c             	shr    $0xc,%eax
   109a7:	89 45 ec             	mov    %eax,-0x14(%ebp)

    for( int i = 0 ; i < page_count ; i ++ ){
   109aa:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   109b1:	e9 93 00 00 00       	jmp    10a49 <memory_alloc_for_page_dir+0xc1>
        uint32_t paddr = addr_alloc_page( &paddr_alloc , 1 );
   109b6:	83 ec 08             	sub    $0x8,%esp
   109b9:	6a 01                	push   $0x1
   109bb:	68 00 50 01 00       	push   $0x15000
   109c0:	e8 25 fa ff ff       	call   103ea <addr_alloc_page>
   109c5:	83 c4 10             	add    $0x10,%esp
   109c8:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if( paddr == 0 ){
   109cb:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   109cf:	75 17                	jne    109e8 <memory_alloc_for_page_dir+0x60>
            log_printf("mem alloc failed. At memory_alloc_for_page_dir()");
   109d1:	83 ec 0c             	sub    $0xc,%esp
   109d4:	68 3c 2f 01 00       	push   $0x12f3c
   109d9:	e8 c8 23 00 00       	call   12da6 <log_printf>
   109de:	83 c4 10             	add    $0x10,%esp
            return 0;
   109e1:	b8 00 00 00 00       	mov    $0x0,%eax
   109e6:	eb 72                	jmp    10a5a <memory_alloc_for_page_dir+0xd2>
        }

        int err = memory_create_map((pde_t *)page_dir , curr_vaddr , paddr , 1 , prem );
   109e8:	8b 55 14             	mov    0x14(%ebp),%edx
   109eb:	8b 45 08             	mov    0x8(%ebp),%eax
   109ee:	83 ec 0c             	sub    $0xc,%esp
   109f1:	52                   	push   %edx
   109f2:	6a 01                	push   $0x1
   109f4:	ff 75 e8             	pushl  -0x18(%ebp)
   109f7:	ff 75 f4             	pushl  -0xc(%ebp)
   109fa:	50                   	push   %eax
   109fb:	e8 b9 fb ff ff       	call   105b9 <memory_create_map>
   10a00:	83 c4 20             	add    $0x20,%esp
   10a03:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if( err < 0 ){
   10a06:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10a0a:	79 32                	jns    10a3e <memory_alloc_for_page_dir+0xb6>
            log_printf("create memory failed . err = %d " , err );
   10a0c:	83 ec 08             	sub    $0x8,%esp
   10a0f:	ff 75 e4             	pushl  -0x1c(%ebp)
   10a12:	68 70 2f 01 00       	push   $0x12f70
   10a17:	e8 8a 23 00 00       	call   12da6 <log_printf>
   10a1c:	83 c4 10             	add    $0x10,%esp
            free_pagemap( &paddr_alloc , vaddr , i  , (pde_t *)page_dir );
   10a1f:	8b 55 08             	mov    0x8(%ebp),%edx
   10a22:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10a25:	52                   	push   %edx
   10a26:	50                   	push   %eax
   10a27:	ff 75 0c             	pushl  0xc(%ebp)
   10a2a:	68 00 50 01 00       	push   $0x15000
   10a2f:	e8 49 fe ff ff       	call   1087d <free_pagemap>
   10a34:	83 c4 10             	add    $0x10,%esp
            return 0;
   10a37:	b8 00 00 00 00       	mov    $0x0,%eax
   10a3c:	eb 1c                	jmp    10a5a <memory_alloc_for_page_dir+0xd2>
        }

        curr_vaddr += MEM_PAGE_SIZE;
   10a3e:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
    for( int i = 0 ; i < page_count ; i ++ ){
   10a45:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10a49:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10a4c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
   10a4f:	0f 8c 61 ff ff ff    	jl     109b6 <memory_alloc_for_page_dir+0x2e>
    }
    return 0;
   10a55:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10a5a:	c9                   	leave  
   10a5b:	c3                   	ret    

00010a5c <memory_alloc_page_for>:

int memory_alloc_page_for( uint32_t addr , uint32_t size , int prem ){
   10a5c:	55                   	push   %ebp
   10a5d:	89 e5                	mov    %esp,%ebp
   10a5f:	83 ec 08             	sub    $0x8,%esp
    return memory_alloc_for_page_dir( task_current() -> tss.cr3 , addr , size , prem );
   10a62:	e8 66 06 00 00       	call   110cd <task_current>
   10a67:	8b 40 64             	mov    0x64(%eax),%eax
   10a6a:	ff 75 10             	pushl  0x10(%ebp)
   10a6d:	ff 75 0c             	pushl  0xc(%ebp)
   10a70:	ff 75 08             	pushl  0x8(%ebp)
   10a73:	50                   	push   %eax
   10a74:	e8 0f ff ff ff       	call   10988 <memory_alloc_for_page_dir>
   10a79:	83 c4 10             	add    $0x10,%esp
}
   10a7c:	c9                   	leave  
   10a7d:	c3                   	ret    

00010a7e <memory_alloc_page>:

uint32_t memory_alloc_page(void){
   10a7e:	55                   	push   %ebp
   10a7f:	89 e5                	mov    %esp,%ebp
   10a81:	83 ec 18             	sub    $0x18,%esp
    uint32_t addr = addr_alloc_page( &paddr_alloc , 1 );
   10a84:	83 ec 08             	sub    $0x8,%esp
   10a87:	6a 01                	push   $0x1
   10a89:	68 00 50 01 00       	push   $0x15000
   10a8e:	e8 57 f9 ff ff       	call   103ea <addr_alloc_page>
   10a93:	83 c4 10             	add    $0x10,%esp
   10a96:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return addr;
   10a99:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   10a9c:	c9                   	leave  
   10a9d:	c3                   	ret    

00010a9e <curr_page_dir>:

static pde_t * curr_page_dir ( void ){
   10a9e:	55                   	push   %ebp
   10a9f:	89 e5                	mov    %esp,%ebp
   10aa1:	83 ec 08             	sub    $0x8,%esp
    return (pde_t *)( task_current()->tss.cr3 );
   10aa4:	e8 24 06 00 00       	call   110cd <task_current>
   10aa9:	8b 40 64             	mov    0x64(%eax),%eax
}
   10aac:	c9                   	leave  
   10aad:	c3                   	ret    

00010aae <memory_free_page>:

void memory_free_page( uint32_t addr ){
   10aae:	55                   	push   %ebp
   10aaf:	89 e5                	mov    %esp,%ebp
   10ab1:	83 ec 18             	sub    $0x18,%esp
    if( addr < MEMORY_TASK_BASE ){
   10ab4:	8b 45 08             	mov    0x8(%ebp),%eax
   10ab7:	85 c0                	test   %eax,%eax
   10ab9:	78 17                	js     10ad2 <memory_free_page+0x24>
        addr_free_page(&paddr_alloc , addr , 1 );
   10abb:	83 ec 04             	sub    $0x4,%esp
   10abe:	6a 01                	push   $0x1
   10ac0:	ff 75 08             	pushl  0x8(%ebp)
   10ac3:	68 00 50 01 00       	push   $0x15000
   10ac8:	e8 84 f9 ff ff       	call   10451 <addr_free_page>
   10acd:	83 c4 10             	add    $0x10,%esp
    else{
        pte_t * pte = find_pte( curr_page_dir() , addr , 0 );
        addr_free_page( &paddr_alloc , pte_paddr(pte), 1 );
        pte->v = 0; 
    }
   10ad0:	eb 43                	jmp    10b15 <memory_free_page+0x67>
        pte_t * pte = find_pte( curr_page_dir() , addr , 0 );
   10ad2:	e8 c7 ff ff ff       	call   10a9e <curr_page_dir>
   10ad7:	83 ec 04             	sub    $0x4,%esp
   10ada:	6a 00                	push   $0x0
   10adc:	ff 75 08             	pushl  0x8(%ebp)
   10adf:	50                   	push   %eax
   10ae0:	e8 24 fa ff ff       	call   10509 <find_pte>
   10ae5:	83 c4 10             	add    $0x10,%esp
   10ae8:	89 45 f4             	mov    %eax,-0xc(%ebp)
        addr_free_page( &paddr_alloc , pte_paddr(pte), 1 );
   10aeb:	83 ec 0c             	sub    $0xc,%esp
   10aee:	ff 75 f4             	pushl  -0xc(%ebp)
   10af1:	e8 5c f8 ff ff       	call   10352 <pte_paddr>
   10af6:	83 c4 10             	add    $0x10,%esp
   10af9:	83 ec 04             	sub    $0x4,%esp
   10afc:	6a 01                	push   $0x1
   10afe:	50                   	push   %eax
   10aff:	68 00 50 01 00       	push   $0x15000
   10b04:	e8 48 f9 ff ff       	call   10451 <addr_free_page>
   10b09:	83 c4 10             	add    $0x10,%esp
        pte->v = 0; 
   10b0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10b0f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   10b15:	90                   	nop
   10b16:	c9                   	leave  
   10b17:	c3                   	ret    

00010b18 <do_handler_syscall>:

static const syscall_handler_t  sys_table[] = {
    [SYS_sleep] = (syscall_handler_t)sys_sleep
};

void do_handler_syscall( syscall_frame_t * frame ){
   10b18:	55                   	push   %ebp
   10b19:	89 e5                	mov    %esp,%ebp
   10b1b:	53                   	push   %ebx
   10b1c:	83 ec 14             	sub    $0x14,%esp
    if( frame->func_id < sizeof(sys_table) / sizeof(sys_table[0]) ){
   10b1f:	8b 45 08             	mov    0x8(%ebp),%eax
   10b22:	8b 40 3c             	mov    0x3c(%eax),%eax
   10b25:	85 c0                	test   %eax,%eax
   10b27:	75 3c                	jne    10b65 <do_handler_syscall+0x4d>
        syscall_handler_t handler = sys_table[frame->func_id];
   10b29:	c7 45 f4 aa 12 01 00 	movl   $0x112aa,-0xc(%ebp)
        if( handler ){
   10b30:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10b34:	74 2f                	je     10b65 <do_handler_syscall+0x4d>
            int ret = handler( frame -> arg0 , frame -> arg1 , frame -> arg2 , frame -> arg3 );
   10b36:	8b 45 08             	mov    0x8(%ebp),%eax
   10b39:	8b 40 4c             	mov    0x4c(%eax),%eax
   10b3c:	89 c3                	mov    %eax,%ebx
   10b3e:	8b 45 08             	mov    0x8(%ebp),%eax
   10b41:	8b 40 48             	mov    0x48(%eax),%eax
   10b44:	89 c1                	mov    %eax,%ecx
   10b46:	8b 45 08             	mov    0x8(%ebp),%eax
   10b49:	8b 40 44             	mov    0x44(%eax),%eax
   10b4c:	89 c2                	mov    %eax,%edx
   10b4e:	8b 45 08             	mov    0x8(%ebp),%eax
   10b51:	8b 40 40             	mov    0x40(%eax),%eax
   10b54:	53                   	push   %ebx
   10b55:	51                   	push   %ecx
   10b56:	52                   	push   %edx
   10b57:	50                   	push   %eax
   10b58:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10b5b:	ff d0                	call   *%eax
   10b5d:	83 c4 10             	add    $0x10,%esp
   10b60:	89 45 f0             	mov    %eax,-0x10(%ebp)
            return ;
   10b63:	eb 26                	jmp    10b8b <do_handler_syscall+0x73>
        }
    }

    task_t * task = task_current();
   10b65:	e8 63 05 00 00       	call   110cd <task_current>
   10b6a:	89 45 ec             	mov    %eax,-0x14(%ebp)
    log_printf("task: %s , Unknow syscall: %d" , task->name , frame->func_id );
   10b6d:	8b 45 08             	mov    0x8(%ebp),%eax
   10b70:	8b 40 3c             	mov    0x3c(%eax),%eax
   10b73:	8b 55 ec             	mov    -0x14(%ebp),%edx
   10b76:	83 c2 10             	add    $0x10,%edx
   10b79:	83 ec 04             	sub    $0x4,%esp
   10b7c:	50                   	push   %eax
   10b7d:	52                   	push   %edx
   10b7e:	68 b8 2f 01 00       	push   $0x12fb8
   10b83:	e8 1e 22 00 00       	call   12da6 <log_printf>
   10b88:	83 c4 10             	add    $0x10,%esp
   10b8b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10b8e:	c9                   	leave  
   10b8f:	c3                   	ret    

00010b90 <list_node_init>:
typedef struct _list_node_t {
    struct _list_node_t * pre;
    struct _list_node_t * next;
}list_node_t;

static inline void list_node_init( list_node_t * node ){
   10b90:	55                   	push   %ebp
   10b91:	89 e5                	mov    %esp,%ebp
    node->pre = node->next = ( list_node_t * )0;
   10b93:	8b 45 08             	mov    0x8(%ebp),%eax
   10b96:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   10b9d:	8b 45 08             	mov    0x8(%ebp),%eax
   10ba0:	8b 50 04             	mov    0x4(%eax),%edx
   10ba3:	8b 45 08             	mov    0x8(%ebp),%eax
   10ba6:	89 10                	mov    %edx,(%eax)
}
   10ba8:	90                   	nop
   10ba9:	5d                   	pop    %ebp
   10baa:	c3                   	ret    

00010bab <list_node_next>:

static inline list_node_t * list_node_pre( list_node_t * node ){
    return node->pre;
}

static inline list_node_t * list_node_next( list_node_t * node ){
   10bab:	55                   	push   %ebp
   10bac:	89 e5                	mov    %esp,%ebp
    return node->next;
   10bae:	8b 45 08             	mov    0x8(%ebp),%eax
   10bb1:	8b 40 04             	mov    0x4(%eax),%eax
}
   10bb4:	5d                   	pop    %ebp
   10bb5:	c3                   	ret    

00010bb6 <list_count>:

static inline int list_is_empty( list_t * list ){
    return list->count == 0;
}

static inline int list_count( list_t * list ){
   10bb6:	55                   	push   %ebp
   10bb7:	89 e5                	mov    %esp,%ebp
    return list -> count;
   10bb9:	8b 45 08             	mov    0x8(%ebp),%eax
   10bbc:	8b 40 08             	mov    0x8(%eax),%eax
}
   10bbf:	5d                   	pop    %ebp
   10bc0:	c3                   	ret    

00010bc1 <list_first>:

static inline list_node_t * list_first( list_t * list ){
   10bc1:	55                   	push   %ebp
   10bc2:	89 e5                	mov    %esp,%ebp
    return list -> first;
   10bc4:	8b 45 08             	mov    0x8(%ebp),%eax
   10bc7:	8b 00                	mov    (%eax),%eax
}
   10bc9:	5d                   	pop    %ebp
   10bca:	c3                   	ret    

00010bcb <hlt>:
static inline void hlt( void ){
   10bcb:	55                   	push   %ebp
   10bcc:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   10bce:	f4                   	hlt    
}
   10bcf:	90                   	nop
   10bd0:	5d                   	pop    %ebp
   10bd1:	c3                   	ret    

00010bd2 <write_tr>:
static inline void write_tr( uint16_t tss_sel ){
   10bd2:	55                   	push   %ebp
   10bd3:	89 e5                	mov    %esp,%ebp
   10bd5:	83 ec 04             	sub    $0x4,%esp
   10bd8:	8b 45 08             	mov    0x8(%ebp),%eax
   10bdb:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    __asm__ __volatile__("ltr %%ax"::"a"(tss_sel));
   10bdf:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   10be3:	0f 00 d8             	ltr    %ax
}
   10be6:	90                   	nop
   10be7:	c9                   	leave  
   10be8:	c3                   	ret    

00010be9 <write_cr3>:
static inline void write_cr3( uint32_t v ){
   10be9:	55                   	push   %ebp
   10bea:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v] , %%cr3"::[v]"r"(v));
   10bec:	8b 45 08             	mov    0x8(%ebp),%eax
   10bef:	0f 22 d8             	mov    %eax,%cr3
}
   10bf2:	90                   	nop
   10bf3:	5d                   	pop    %ebp
   10bf4:	c3                   	ret    

00010bf5 <mmu_set_page_dir>:
static inline void mmu_set_page_dir(uint32_t paddr ){
   10bf5:	55                   	push   %ebp
   10bf6:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   10bf8:	ff 75 08             	pushl  0x8(%ebp)
   10bfb:	e8 e9 ff ff ff       	call   10be9 <write_cr3>
   10c00:	83 c4 04             	add    $0x4,%esp
}
   10c03:	90                   	nop
   10c04:	c9                   	leave  
   10c05:	c3                   	ret    

00010c06 <tss_init>:
#include"cpu/mmu.h"
static uint32_t idle_task_stack[IDLE_TASK_SIZE];

static task_manager_t task_manager;

static int tss_init( task_t* task , int flag , uint32_t entry , uint32_t esp ){
   10c06:	55                   	push   %ebp
   10c07:	89 e5                	mov    %esp,%ebp
   10c09:	83 ec 28             	sub    $0x28,%esp
    int tss_sel = gdt_alloc_desc();
   10c0c:	e8 a8 08 00 00       	call   114b9 <gdt_alloc_desc>
   10c11:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if( tss_sel < 0 ){
   10c14:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   10c18:	79 1a                	jns    10c34 <tss_init+0x2e>
        log_printf("alloc tss failed");
   10c1a:	83 ec 0c             	sub    $0xc,%esp
   10c1d:	68 d8 2f 01 00       	push   $0x12fd8
   10c22:	e8 7f 21 00 00       	call   12da6 <log_printf>
   10c27:	83 c4 10             	add    $0x10,%esp
        return -1;
   10c2a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10c2f:	e9 58 01 00 00       	jmp    10d8c <tss_init+0x186>
    }

    segment_desc_set( tss_sel , (uint32_t)&(task->tss) ,  sizeof(tss_t) , 
   10c34:	8b 45 08             	mov    0x8(%ebp),%eax
   10c37:	83 c0 48             	add    $0x48,%eax
   10c3a:	68 89 00 00 00       	push   $0x89
   10c3f:	6a 68                	push   $0x68
   10c41:	50                   	push   %eax
   10c42:	ff 75 ec             	pushl  -0x14(%ebp)
   10c45:	e8 f9 06 00 00       	call   11343 <segment_desc_set>
   10c4a:	83 c4 10             	add    $0x10,%esp
    SEG_P_PRESENT | SEG_DPL0 | SEG_TYPE_TSS  );
 
    kernel_memset( &task->tss , 0 , sizeof(tss_t) );
   10c4d:	8b 45 08             	mov    0x8(%ebp),%eax
   10c50:	83 c0 48             	add    $0x48,%eax
   10c53:	83 ec 04             	sub    $0x4,%esp
   10c56:	6a 68                	push   $0x68
   10c58:	6a 00                	push   $0x0
   10c5a:	50                   	push   %eax
   10c5b:	e8 32 1b 00 00       	call   12792 <kernel_memset>
   10c60:	83 c4 10             	add    $0x10,%esp

    int code_sel , data_sel; 

    if( flag & TASK_FALGS_SYSTEM ){
   10c63:	8b 45 0c             	mov    0xc(%ebp),%eax
   10c66:	83 e0 01             	and    $0x1,%eax
   10c69:	85 c0                	test   %eax,%eax
   10c6b:	74 10                	je     10c7d <tss_init+0x77>
        code_sel = KERNEL_SELECTOR_CS;
   10c6d:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%ebp)
        data_sel = KERNEL_SELECTOR_DS;
   10c74:	c7 45 f0 10 00 00 00 	movl   $0x10,-0x10(%ebp)
   10c7b:	eb 16                	jmp    10c93 <tss_init+0x8d>
    }
    else{
        code_sel = task_manager.app_code_sel | SEG_CPL3 ;
   10c7d:	a1 b0 81 01 00       	mov    0x181b0,%eax
   10c82:	83 c8 03             	or     $0x3,%eax
   10c85:	89 45 f4             	mov    %eax,-0xc(%ebp)
        data_sel = task_manager.app_data_sel | SEG_CPL3 ;
   10c88:	a1 b4 81 01 00       	mov    0x181b4,%eax
   10c8d:	83 c8 03             	or     $0x3,%eax
   10c90:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }

    uint32_t kernel_stack = memory_alloc_page();
   10c93:	e8 e6 fd ff ff       	call   10a7e <memory_alloc_page>
   10c98:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if( kernel_stack == 0 ){
   10c9b:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   10c9f:	0f 84 bc 00 00 00    	je     10d61 <tss_init+0x15b>
        goto tss_init_failed;
    }
    task->tss.eip = entry;
   10ca5:	8b 45 08             	mov    0x8(%ebp),%eax
   10ca8:	8b 55 10             	mov    0x10(%ebp),%edx
   10cab:	89 50 68             	mov    %edx,0x68(%eax)
    task->tss.esp = esp;
   10cae:	8b 45 08             	mov    0x8(%ebp),%eax
   10cb1:	8b 55 14             	mov    0x14(%ebp),%edx
   10cb4:	89 90 80 00 00 00    	mov    %edx,0x80(%eax)
    task->tss.esp0 = kernel_stack + MEM_PAGE_SIZE;
   10cba:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10cbd:	8d 90 00 10 00 00    	lea    0x1000(%eax),%edx
   10cc3:	8b 45 08             	mov    0x8(%ebp),%eax
   10cc6:	89 50 4c             	mov    %edx,0x4c(%eax)
    task->tss.ss = data_sel;
   10cc9:	8b 55 f0             	mov    -0x10(%ebp),%edx
   10ccc:	8b 45 08             	mov    0x8(%ebp),%eax
   10ccf:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    task->tss.ss0 = KERNEL_SELECTOR_DS;
   10cd5:	8b 45 08             	mov    0x8(%ebp),%eax
   10cd8:	c7 40 50 10 00 00 00 	movl   $0x10,0x50(%eax)
    task->tss.es = task->tss.ds = task->tss.fs = task->tss.gs = data_sel;
   10cdf:	8b 55 f0             	mov    -0x10(%ebp),%edx
   10ce2:	8b 45 08             	mov    0x8(%ebp),%eax
   10ce5:	89 90 a4 00 00 00    	mov    %edx,0xa4(%eax)
   10ceb:	8b 45 08             	mov    0x8(%ebp),%eax
   10cee:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
   10cf4:	8b 45 08             	mov    0x8(%ebp),%eax
   10cf7:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
   10cfd:	8b 45 08             	mov    0x8(%ebp),%eax
   10d00:	8b 90 a0 00 00 00    	mov    0xa0(%eax),%edx
   10d06:	8b 45 08             	mov    0x8(%ebp),%eax
   10d09:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
   10d0f:	8b 45 08             	mov    0x8(%ebp),%eax
   10d12:	8b 90 9c 00 00 00    	mov    0x9c(%eax),%edx
   10d18:	8b 45 08             	mov    0x8(%ebp),%eax
   10d1b:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)
    task->tss.cs = code_sel;
   10d21:	8b 55 f4             	mov    -0xc(%ebp),%edx
   10d24:	8b 45 08             	mov    0x8(%ebp),%eax
   10d27:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    task->tss.eflags = EFLAGS_IF | EFLAGS_DEFAULT;
   10d2d:	8b 45 08             	mov    0x8(%ebp),%eax
   10d30:	c7 40 6c 02 02 00 00 	movl   $0x202,0x6c(%eax)

    uint32_t page_dir = memory_create_uvm();    
   10d37:	e8 bc fa ff ff       	call   107f8 <memory_create_uvm>
   10d3c:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    if( page_dir == 0 ){
   10d3f:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10d43:	74 1f                	je     10d64 <tss_init+0x15e>
        goto tss_init_failed;
        return -1;
    }
    task->tss.cr3 = page_dir;
   10d45:	8b 45 08             	mov    0x8(%ebp),%eax
   10d48:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   10d4b:	89 50 64             	mov    %edx,0x64(%eax)
    task->tss_sel = tss_sel;
   10d4e:	8b 45 08             	mov    0x8(%ebp),%eax
   10d51:	8b 55 ec             	mov    -0x14(%ebp),%edx
   10d54:	89 90 b0 00 00 00    	mov    %edx,0xb0(%eax)
    return 0;
   10d5a:	b8 00 00 00 00       	mov    $0x0,%eax
   10d5f:	eb 2b                	jmp    10d8c <tss_init+0x186>
        goto tss_init_failed;
   10d61:	90                   	nop
   10d62:	eb 01                	jmp    10d65 <tss_init+0x15f>
        goto tss_init_failed;
   10d64:	90                   	nop
tss_init_failed:
    gdt_free_sel(tss_sel);
   10d65:	83 ec 0c             	sub    $0xc,%esp
   10d68:	ff 75 ec             	pushl  -0x14(%ebp)
   10d6b:	e8 da 07 00 00       	call   1154a <gdt_free_sel>
   10d70:	83 c4 10             	add    $0x10,%esp
    if( kernel_stack ){
   10d73:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   10d77:	74 0e                	je     10d87 <tss_init+0x181>
        memory_free_page( kernel_stack );
   10d79:	83 ec 0c             	sub    $0xc,%esp
   10d7c:	ff 75 e8             	pushl  -0x18(%ebp)
   10d7f:	e8 2a fd ff ff       	call   10aae <memory_free_page>
   10d84:	83 c4 10             	add    $0x10,%esp
    }
    return -1;
   10d87:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10d8c:	c9                   	leave  
   10d8d:	c3                   	ret    

00010d8e <task_init>:

int task_init( task_t * task , const char * name , int flag ,  uint32_t entry , uint32_t esp ){
   10d8e:	55                   	push   %ebp
   10d8f:	89 e5                	mov    %esp,%ebp
   10d91:	83 ec 18             	sub    $0x18,%esp
    ASSERT( task != (task_t *)0 );
   10d94:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10d98:	75 19                	jne    10db3 <task_init+0x25>
   10d9a:	68 e9 2f 01 00       	push   $0x12fe9
   10d9f:	68 6c 30 01 00       	push   $0x1306c
   10da4:	6a 44                	push   $0x44
   10da6:	68 00 30 01 00       	push   $0x13000
   10dab:	e8 ef 1c 00 00       	call   12a9f <pannic>
   10db0:	83 c4 10             	add    $0x10,%esp
    tss_init( task , flag , entry , esp );
   10db3:	ff 75 18             	pushl  0x18(%ebp)
   10db6:	ff 75 14             	pushl  0x14(%ebp)
   10db9:	ff 75 10             	pushl  0x10(%ebp)
   10dbc:	ff 75 08             	pushl  0x8(%ebp)
   10dbf:	e8 42 fe ff ff       	call   10c06 <tss_init>
   10dc4:	83 c4 10             	add    $0x10,%esp
    kernel_strncpy( task -> name , name , TASK_NAME_SIZE );
   10dc7:	8b 45 08             	mov    0x8(%ebp),%eax
   10dca:	83 c0 10             	add    $0x10,%eax
   10dcd:	83 ec 04             	sub    $0x4,%esp
   10dd0:	6a 20                	push   $0x20
   10dd2:	ff 75 0c             	pushl  0xc(%ebp)
   10dd5:	50                   	push   %eax
   10dd6:	e8 5d 18 00 00       	call   12638 <kernel_strncpy>
   10ddb:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   10dde:	8b 45 08             	mov    0x8(%ebp),%eax
   10de1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    task -> time_ticks = TASK_TIME_SLICE_DEFAULT;
   10de7:	8b 45 08             	mov    0x8(%ebp),%eax
   10dea:	c7 40 08 0a 00 00 00 	movl   $0xa,0x8(%eax)
    task -> slice_ticks = task -> time_ticks;
   10df1:	8b 45 08             	mov    0x8(%ebp),%eax
   10df4:	8b 50 08             	mov    0x8(%eax),%edx
   10df7:	8b 45 08             	mov    0x8(%ebp),%eax
   10dfa:	89 50 0c             	mov    %edx,0xc(%eax)
    task -> sleep_ticks = 0;
   10dfd:	8b 45 08             	mov    0x8(%ebp),%eax
   10e00:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    //初始化节点
    list_node_init( &task -> all_node );
   10e07:	8b 45 08             	mov    0x8(%ebp),%eax
   10e0a:	83 c0 40             	add    $0x40,%eax
   10e0d:	83 ec 0c             	sub    $0xc,%esp
   10e10:	50                   	push   %eax
   10e11:	e8 7a fd ff ff       	call   10b90 <list_node_init>
   10e16:	83 c4 10             	add    $0x10,%esp
    list_node_init( &task -> run_node );
   10e19:	8b 45 08             	mov    0x8(%ebp),%eax
   10e1c:	83 c0 30             	add    $0x30,%eax
   10e1f:	83 ec 0c             	sub    $0xc,%esp
   10e22:	50                   	push   %eax
   10e23:	e8 68 fd ff ff       	call   10b90 <list_node_init>
   10e28:	83 c4 10             	add    $0x10,%esp
    list_node_init( &task -> wait_node );
   10e2b:	8b 45 08             	mov    0x8(%ebp),%eax
   10e2e:	83 c0 38             	add    $0x38,%eax
   10e31:	83 ec 0c             	sub    $0xc,%esp
   10e34:	50                   	push   %eax
   10e35:	e8 56 fd ff ff       	call   10b90 <list_node_init>
   10e3a:	83 c4 10             	add    $0x10,%esp
    //插入就绪队列以及任务队列 
    irq_state_t state = irq_enter_protection();
   10e3d:	e8 98 10 00 00       	call   11eda <irq_enter_protection>
   10e42:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_set_ready( task );
   10e45:	83 ec 0c             	sub    $0xc,%esp
   10e48:	ff 75 08             	pushl  0x8(%ebp)
   10e4b:	e8 e6 01 00 00       	call   11036 <task_set_ready>
   10e50:	83 c4 10             	add    $0x10,%esp
    list_insert_last( &task_manager.task_list , &task->all_node  );
   10e53:	8b 45 08             	mov    0x8(%ebp),%eax
   10e56:	83 c0 40             	add    $0x40,%eax
   10e59:	83 ec 08             	sub    $0x8,%esp
   10e5c:	50                   	push   %eax
   10e5d:	68 30 80 01 00       	push   $0x18030
   10e62:	e8 05 1d 00 00       	call   12b6c <list_insert_last>
   10e67:	83 c4 10             	add    $0x10,%esp
    irq_leave_protection( state );
   10e6a:	83 ec 0c             	sub    $0xc,%esp
   10e6d:	ff 75 f4             	pushl  -0xc(%ebp)
   10e70:	e8 7d 10 00 00       	call   11ef2 <irq_leave_protection>
   10e75:	83 c4 10             	add    $0x10,%esp
} 
   10e78:	90                   	nop
   10e79:	c9                   	leave  
   10e7a:	c3                   	ret    

00010e7b <task_switch_from_to>:

void simple_switch( uint32_t **from  , uint32_t * to);

void task_switch_from_to( task_t *from , task_t * to ){
   10e7b:	55                   	push   %ebp
   10e7c:	89 e5                	mov    %esp,%ebp
   10e7e:	83 ec 08             	sub    $0x8,%esp
    swith_to_tss( to->tss_sel );
   10e81:	8b 45 0c             	mov    0xc(%ebp),%eax
   10e84:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
   10e8a:	83 ec 0c             	sub    $0xc,%esp
   10e8d:	50                   	push   %eax
   10e8e:	e8 a4 06 00 00       	call   11537 <swith_to_tss>
   10e93:	83 c4 10             	add    $0x10,%esp
    //simple_switch( &(from->stack) , (to->stack) );
}
   10e96:	90                   	nop
   10e97:	c9                   	leave  
   10e98:	c3                   	ret    

00010e99 <task_first_init>:


void task_first_init( void ){
   10e99:	55                   	push   %ebp
   10e9a:	89 e5                	mov    %esp,%ebp
   10e9c:	83 ec 18             	sub    $0x18,%esp
    void first_task_entry(void);
    extern uint8_t s_first_task[] , e_first_task[];

    uint32_t copy_size = (uint32_t)(e_first_task - s_first_task );
   10e9f:	ba 95 ae 01 00       	mov    $0x1ae95,%edx
   10ea4:	b8 00 ae 01 00       	mov    $0x1ae00,%eax
   10ea9:	29 c2                	sub    %eax,%edx
   10eab:	89 d0                	mov    %edx,%eax
   10ead:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t alloc_size = 10 * MEM_PAGE_SIZE;
   10eb0:	c7 45 f0 00 a0 00 00 	movl   $0xa000,-0x10(%ebp)
    ASSERT( copy_size < alloc_size );
   10eb7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10eba:	3b 45 f0             	cmp    -0x10(%ebp),%eax
   10ebd:	72 19                	jb     10ed8 <task_first_init+0x3f>
   10ebf:	68 3d 30 01 00       	push   $0x1303d
   10ec4:	68 78 30 01 00       	push   $0x13078
   10ec9:	6a 64                	push   $0x64
   10ecb:	68 00 30 01 00       	push   $0x13000
   10ed0:	e8 ca 1b 00 00       	call   12a9f <pannic>
   10ed5:	83 c4 10             	add    $0x10,%esp


    uint32_t first_start = (uint32_t)first_task_entry;
   10ed8:	c7 45 ec 00 00 00 80 	movl   $0x80000000,-0x14(%ebp)
    task_init( &task_manager.first_task , "first_task" ,  0 , first_start , first_start + alloc_size );
   10edf:	8b 55 ec             	mov    -0x14(%ebp),%edx
   10ee2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10ee5:	01 d0                	add    %edx,%eax
   10ee7:	83 ec 0c             	sub    $0xc,%esp
   10eea:	50                   	push   %eax
   10eeb:	ff 75 ec             	pushl  -0x14(%ebp)
   10eee:	6a 00                	push   $0x0
   10ef0:	68 54 30 01 00       	push   $0x13054
   10ef5:	68 48 80 01 00       	push   $0x18048
   10efa:	e8 8f fe ff ff       	call   10d8e <task_init>
   10eff:	83 c4 20             	add    $0x20,%esp
    write_tr( task_manager.first_task.tss_sel );
   10f02:	a1 f8 80 01 00       	mov    0x180f8,%eax
   10f07:	0f b7 c0             	movzwl %ax,%eax
   10f0a:	83 ec 0c             	sub    $0xc,%esp
   10f0d:	50                   	push   %eax
   10f0e:	e8 bf fc ff ff       	call   10bd2 <write_tr>
   10f13:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = &task_manager.first_task;
   10f16:	c7 05 20 80 01 00 48 	movl   $0x18048,0x18020
   10f1d:	80 01 00 

    mmu_set_page_dir(task_manager.first_task.tss.cr3);
   10f20:	a1 ac 80 01 00       	mov    0x180ac,%eax
   10f25:	83 ec 0c             	sub    $0xc,%esp
   10f28:	50                   	push   %eax
   10f29:	e8 c7 fc ff ff       	call   10bf5 <mmu_set_page_dir>
   10f2e:	83 c4 10             	add    $0x10,%esp
    
    memory_alloc_page_for(first_start , alloc_size , PTE_P | PTE_W | PTE_U );
   10f31:	83 ec 04             	sub    $0x4,%esp
   10f34:	6a 07                	push   $0x7
   10f36:	ff 75 f0             	pushl  -0x10(%ebp)
   10f39:	ff 75 ec             	pushl  -0x14(%ebp)
   10f3c:	e8 1b fb ff ff       	call   10a5c <memory_alloc_page_for>
   10f41:	83 c4 10             	add    $0x10,%esp
    kernel_memcpy( (void *)first_start , s_first_task , copy_size  );
   10f44:	8b 55 f4             	mov    -0xc(%ebp),%edx
   10f47:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10f4a:	83 ec 04             	sub    $0x4,%esp
   10f4d:	52                   	push   %edx
   10f4e:	68 00 ae 01 00       	push   $0x1ae00
   10f53:	50                   	push   %eax
   10f54:	e8 ea 17 00 00       	call   12743 <kernel_memcpy>
   10f59:	83 c4 10             	add    $0x10,%esp
}
   10f5c:	90                   	nop
   10f5d:	c9                   	leave  
   10f5e:	c3                   	ret    

00010f5f <task_first_task>:

task_t * task_first_task( void ){ 
   10f5f:	55                   	push   %ebp
   10f60:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   10f62:	b8 48 80 01 00       	mov    $0x18048,%eax
}
   10f67:	5d                   	pop    %ebp
   10f68:	c3                   	ret    

00010f69 <idle_task_entry>:

static void idle_task_entry( void ){
   10f69:	55                   	push   %ebp
   10f6a:	89 e5                	mov    %esp,%ebp
   10f6c:	83 ec 10             	sub    $0x10,%esp
    int x = 1 / 0 ;
   10f6f:	b8 01 00 00 00       	mov    $0x1,%eax
   10f74:	b9 00 00 00 00       	mov    $0x0,%ecx
   10f79:	99                   	cltd   
   10f7a:	f7 f9                	idiv   %ecx
   10f7c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    for( ; ; ){
        hlt();
   10f7f:	e8 47 fc ff ff       	call   10bcb <hlt>
   10f84:	eb f9                	jmp    10f7f <idle_task_entry+0x16>

00010f86 <task_manager_init>:
    }
}

void task_manager_init( void ){
   10f86:	55                   	push   %ebp
   10f87:	89 e5                	mov    %esp,%ebp
   10f89:	83 ec 18             	sub    $0x18,%esp
    int sel = gdt_alloc_desc();
   10f8c:	e8 28 05 00 00       	call   114b9 <gdt_alloc_desc>
   10f91:	89 45 f4             	mov    %eax,-0xc(%ebp)
    segment_desc_set( sel , 0x00000000 , 0xFFFFFFFF ,
   10f94:	68 f2 40 00 00       	push   $0x40f2
   10f99:	6a ff                	push   $0xffffffff
   10f9b:	6a 00                	push   $0x0
   10f9d:	ff 75 f4             	pushl  -0xc(%ebp)
   10fa0:	e8 9e 03 00 00       	call   11343 <segment_desc_set>
   10fa5:	83 c4 10             	add    $0x10,%esp
    SEG_P_PRESENT | SEG_DPL3 | SEG_S_NORMAL | SEG_TYPE_DATA | SEG_TYPE_RW | SEG_D );
    task_manager.app_data_sel = sel;
   10fa8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10fab:	a3 b4 81 01 00       	mov    %eax,0x181b4
    sel = gdt_alloc_desc();
   10fb0:	e8 04 05 00 00       	call   114b9 <gdt_alloc_desc>
   10fb5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    segment_desc_set( sel , 0x00000000 , 0xFFFFFFFF ,
   10fb8:	68 fa 40 00 00       	push   $0x40fa
   10fbd:	6a ff                	push   $0xffffffff
   10fbf:	6a 00                	push   $0x0
   10fc1:	ff 75 f4             	pushl  -0xc(%ebp)
   10fc4:	e8 7a 03 00 00       	call   11343 <segment_desc_set>
   10fc9:	83 c4 10             	add    $0x10,%esp
    SEG_P_PRESENT | SEG_DPL3 | SEG_S_NORMAL | SEG_TYPE_CODE | SEG_TYPE_RW | SEG_D ); 
    task_manager.app_code_sel = sel;
   10fcc:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10fcf:	a3 b0 81 01 00       	mov    %eax,0x181b0

    list_init( &task_manager.ready_list );
   10fd4:	83 ec 0c             	sub    $0xc,%esp
   10fd7:	68 24 80 01 00       	push   $0x18024
   10fdc:	e8 07 1b 00 00       	call   12ae8 <list_init>
   10fe1:	83 c4 10             	add    $0x10,%esp
    list_init( &task_manager.task_list );
   10fe4:	83 ec 0c             	sub    $0xc,%esp
   10fe7:	68 30 80 01 00       	push   $0x18030
   10fec:	e8 f7 1a 00 00       	call   12ae8 <list_init>
   10ff1:	83 c4 10             	add    $0x10,%esp
    list_init( &task_manager.sleep_list );
   10ff4:	83 ec 0c             	sub    $0xc,%esp
   10ff7:	68 3c 80 01 00       	push   $0x1803c
   10ffc:	e8 e7 1a 00 00       	call   12ae8 <list_init>
   11001:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = ( task_t * )0;
   11004:	c7 05 20 80 01 00 00 	movl   $0x0,0x18020
   1100b:	00 00 00 

    task_init( &task_manager.idle_task , "idle_tasks" , TASK_FALGS_SYSTEM , (uint32_t)idle_task_entry , (uint32_t)( idle_task_stack + IDLE_TASK_SIZE) );
   1100e:	b8 20 80 01 00       	mov    $0x18020,%eax
   11013:	89 c2                	mov    %eax,%edx
   11015:	b8 69 0f 01 00       	mov    $0x10f69,%eax
   1101a:	83 ec 0c             	sub    $0xc,%esp
   1101d:	52                   	push   %edx
   1101e:	50                   	push   %eax
   1101f:	6a 01                	push   $0x1
   11021:	68 5f 30 01 00       	push   $0x1305f
   11026:	68 fc 80 01 00       	push   $0x180fc
   1102b:	e8 5e fd ff ff       	call   10d8e <task_init>
   11030:	83 c4 20             	add    $0x20,%esp
}
   11033:	90                   	nop
   11034:	c9                   	leave  
   11035:	c3                   	ret    

00011036 <task_set_ready>:
 

void task_set_ready( task_t * task ){
   11036:	55                   	push   %ebp
   11037:	89 e5                	mov    %esp,%ebp
   11039:	83 ec 08             	sub    $0x8,%esp
    if( task == &task_manager.idle_task ){
   1103c:	81 7d 08 fc 80 01 00 	cmpl   $0x180fc,0x8(%ebp)
   11043:	74 22                	je     11067 <task_set_ready+0x31>
        return ;
    }
    list_insert_last( &task_manager.ready_list , &task->run_node );
   11045:	8b 45 08             	mov    0x8(%ebp),%eax
   11048:	83 c0 30             	add    $0x30,%eax
   1104b:	83 ec 08             	sub    $0x8,%esp
   1104e:	50                   	push   %eax
   1104f:	68 24 80 01 00       	push   $0x18024
   11054:	e8 13 1b 00 00       	call   12b6c <list_insert_last>
   11059:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_READY;
   1105c:	8b 45 08             	mov    0x8(%ebp),%eax
   1105f:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
   11065:	eb 01                	jmp    11068 <task_set_ready+0x32>
        return ;
   11067:	90                   	nop
}
   11068:	c9                   	leave  
   11069:	c3                   	ret    

0001106a <task_set_block>:

void task_set_block( task_t * task ){
   1106a:	55                   	push   %ebp
   1106b:	89 e5                	mov    %esp,%ebp
   1106d:	83 ec 08             	sub    $0x8,%esp
    list_remove_node( &task_manager.ready_list , &task->run_node );
   11070:	8b 45 08             	mov    0x8(%ebp),%eax
   11073:	83 c0 30             	add    $0x30,%eax
   11076:	83 ec 08             	sub    $0x8,%esp
   11079:	50                   	push   %eax
   1107a:	68 24 80 01 00       	push   $0x18024
   1107f:	e8 c4 1b 00 00       	call   12c48 <list_remove_node>
   11084:	83 c4 10             	add    $0x10,%esp
}
   11087:	90                   	nop
   11088:	c9                   	leave  
   11089:	c3                   	ret    

0001108a <task_next_run>:

task_t * task_next_run( void ){
   1108a:	55                   	push   %ebp
   1108b:	89 e5                	mov    %esp,%ebp
   1108d:	83 ec 10             	sub    $0x10,%esp
    if( list_count( &task_manager.ready_list) == 0 ){
   11090:	68 24 80 01 00       	push   $0x18024
   11095:	e8 1c fb ff ff       	call   10bb6 <list_count>
   1109a:	83 c4 04             	add    $0x4,%esp
   1109d:	85 c0                	test   %eax,%eax
   1109f:	75 07                	jne    110a8 <task_next_run+0x1e>
        return &task_manager.idle_task;
   110a1:	b8 fc 80 01 00       	mov    $0x180fc,%eax
   110a6:	eb 23                	jmp    110cb <task_next_run+0x41>
    }
    list_node_t * task_node = list_first(&task_manager.ready_list);
   110a8:	68 24 80 01 00       	push   $0x18024
   110ad:	e8 0f fb ff ff       	call   10bc1 <list_first>
   110b2:	83 c4 04             	add    $0x4,%esp
   110b5:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return list_node_parent( task_node , task_t , run_node ); 
   110b8:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   110bc:	74 08                	je     110c6 <task_next_run+0x3c>
   110be:	8b 45 fc             	mov    -0x4(%ebp),%eax
   110c1:	83 e8 30             	sub    $0x30,%eax
   110c4:	eb 05                	jmp    110cb <task_next_run+0x41>
   110c6:	b8 00 00 00 00       	mov    $0x0,%eax
}
   110cb:	c9                   	leave  
   110cc:	c3                   	ret    

000110cd <task_current>:

task_t * task_current( void ){
   110cd:	55                   	push   %ebp
   110ce:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   110d0:	a1 20 80 01 00       	mov    0x18020,%eax
}
   110d5:	5d                   	pop    %ebp
   110d6:	c3                   	ret    

000110d7 <sys_sched_yield>:

int sys_sched_yield( void ){
   110d7:	55                   	push   %ebp
   110d8:	89 e5                	mov    %esp,%ebp
   110da:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();    
   110dd:	e8 f8 0d 00 00       	call   11eda <irq_enter_protection>
   110e2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if( list_count(&task_manager.ready_list) > 1 ){
   110e5:	83 ec 0c             	sub    $0xc,%esp
   110e8:	68 24 80 01 00       	push   $0x18024
   110ed:	e8 c4 fa ff ff       	call   10bb6 <list_count>
   110f2:	83 c4 10             	add    $0x10,%esp
   110f5:	83 f8 01             	cmp    $0x1,%eax
   110f8:	7e 29                	jle    11123 <sys_sched_yield+0x4c>
        task_t * curr_task = task_current();
   110fa:	e8 ce ff ff ff       	call   110cd <task_current>
   110ff:	89 45 f0             	mov    %eax,-0x10(%ebp)

        task_set_block( curr_task );
   11102:	83 ec 0c             	sub    $0xc,%esp
   11105:	ff 75 f0             	pushl  -0x10(%ebp)
   11108:	e8 5d ff ff ff       	call   1106a <task_set_block>
   1110d:	83 c4 10             	add    $0x10,%esp
        task_set_ready( curr_task );
   11110:	83 ec 0c             	sub    $0xc,%esp
   11113:	ff 75 f0             	pushl  -0x10(%ebp)
   11116:	e8 1b ff ff ff       	call   11036 <task_set_ready>
   1111b:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   1111e:	e8 15 00 00 00       	call   11138 <task_dispatch>
    }
    irq_leave_protection( state );
   11123:	83 ec 0c             	sub    $0xc,%esp
   11126:	ff 75 f4             	pushl  -0xc(%ebp)
   11129:	e8 c4 0d 00 00       	call   11ef2 <irq_leave_protection>
   1112e:	83 c4 10             	add    $0x10,%esp
    return 0;
   11131:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11136:	c9                   	leave  
   11137:	c3                   	ret    

00011138 <task_dispatch>:

void task_dispatch(void){
   11138:	55                   	push   %ebp
   11139:	89 e5                	mov    %esp,%ebp
   1113b:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();    
   1113e:	e8 97 0d 00 00       	call   11eda <irq_enter_protection>
   11143:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_t * to = task_next_run();
   11146:	e8 3f ff ff ff       	call   1108a <task_next_run>
   1114b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if( to != task_manager.curr_task ){
   1114e:	a1 20 80 01 00       	mov    0x18020,%eax
   11153:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   11156:	74 2a                	je     11182 <task_dispatch+0x4a>
        task_t * from = task_current();
   11158:	e8 70 ff ff ff       	call   110cd <task_current>
   1115d:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_manager.curr_task = to;
   11160:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11163:	a3 20 80 01 00       	mov    %eax,0x18020
        to -> state = TASK_RUNNING;
   11168:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1116b:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        task_switch_from_to( from , to );
   11171:	83 ec 08             	sub    $0x8,%esp
   11174:	ff 75 f0             	pushl  -0x10(%ebp)
   11177:	ff 75 ec             	pushl  -0x14(%ebp)
   1117a:	e8 fc fc ff ff       	call   10e7b <task_switch_from_to>
   1117f:	83 c4 10             	add    $0x10,%esp
    }
    irq_leave_protection( state );
   11182:	83 ec 0c             	sub    $0xc,%esp
   11185:	ff 75 f4             	pushl  -0xc(%ebp)
   11188:	e8 65 0d 00 00       	call   11ef2 <irq_leave_protection>
   1118d:	83 c4 10             	add    $0x10,%esp
}
   11190:	90                   	nop
   11191:	c9                   	leave  
   11192:	c3                   	ret    

00011193 <task_time_tick>:


void task_time_tick( void ){
   11193:	55                   	push   %ebp
   11194:	89 e5                	mov    %esp,%ebp
   11196:	83 ec 18             	sub    $0x18,%esp
    task_t * curr_task  = task_current();
   11199:	e8 2f ff ff ff       	call   110cd <task_current>
   1119e:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if( -- curr_task->slice_ticks == 0 ){ 
   111a1:	8b 45 f0             	mov    -0x10(%ebp),%eax
   111a4:	8b 40 0c             	mov    0xc(%eax),%eax
   111a7:	8d 50 ff             	lea    -0x1(%eax),%edx
   111aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
   111ad:	89 50 0c             	mov    %edx,0xc(%eax)
   111b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   111b3:	8b 40 0c             	mov    0xc(%eax),%eax
   111b6:	85 c0                	test   %eax,%eax
   111b8:	75 11                	jne    111cb <task_time_tick+0x38>
        curr_task -> slice_ticks = curr_task -> time_ticks;
   111ba:	8b 45 f0             	mov    -0x10(%ebp),%eax
   111bd:	8b 50 08             	mov    0x8(%eax),%edx
   111c0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   111c3:	89 50 0c             	mov    %edx,0xc(%eax)
        sys_sched_yield();
   111c6:	e8 0c ff ff ff       	call   110d7 <sys_sched_yield>
    }

    list_node_t * curr = list_first( &task_manager.sleep_list );
   111cb:	83 ec 0c             	sub    $0xc,%esp
   111ce:	68 3c 80 01 00       	push   $0x1803c
   111d3:	e8 e9 f9 ff ff       	call   10bc1 <list_first>
   111d8:	83 c4 10             	add    $0x10,%esp
   111db:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while( curr ){
   111de:	eb 62                	jmp    11242 <task_time_tick+0xaf>
        list_node_t * next = list_node_next( curr );
   111e0:	83 ec 0c             	sub    $0xc,%esp
   111e3:	ff 75 f4             	pushl  -0xc(%ebp)
   111e6:	e8 c0 f9 ff ff       	call   10bab <list_node_next>
   111eb:	83 c4 10             	add    $0x10,%esp
   111ee:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_t * task = list_node_parent( curr , task_t , run_node );
   111f1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   111f5:	74 08                	je     111ff <task_time_tick+0x6c>
   111f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   111fa:	83 e8 30             	sub    $0x30,%eax
   111fd:	eb 05                	jmp    11204 <task_time_tick+0x71>
   111ff:	b8 00 00 00 00       	mov    $0x0,%eax
   11204:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if( --task->sleep_ticks == 0 ){
   11207:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1120a:	8b 40 04             	mov    0x4(%eax),%eax
   1120d:	8d 50 ff             	lea    -0x1(%eax),%edx
   11210:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11213:	89 50 04             	mov    %edx,0x4(%eax)
   11216:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11219:	8b 40 04             	mov    0x4(%eax),%eax
   1121c:	85 c0                	test   %eax,%eax
   1121e:	75 1c                	jne    1123c <task_time_tick+0xa9>
            task_set_wakeup( task );
   11220:	83 ec 0c             	sub    $0xc,%esp
   11223:	ff 75 e8             	pushl  -0x18(%ebp)
   11226:	e8 5f 00 00 00       	call   1128a <task_set_wakeup>
   1122b:	83 c4 10             	add    $0x10,%esp
            task_set_ready( task );
   1122e:	83 ec 0c             	sub    $0xc,%esp
   11231:	ff 75 e8             	pushl  -0x18(%ebp)
   11234:	e8 fd fd ff ff       	call   11036 <task_set_ready>
   11239:	83 c4 10             	add    $0x10,%esp
        }
        curr = next;
   1123c:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1123f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while( curr ){
   11242:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11246:	75 98                	jne    111e0 <task_time_tick+0x4d>
    }
    task_dispatch();
   11248:	e8 eb fe ff ff       	call   11138 <task_dispatch>
}
   1124d:	90                   	nop
   1124e:	c9                   	leave  
   1124f:	c3                   	ret    

00011250 <task_set_sleep>:

void task_set_sleep( task_t * task , uint32_t ticks ){
   11250:	55                   	push   %ebp
   11251:	89 e5                	mov    %esp,%ebp
   11253:	83 ec 08             	sub    $0x8,%esp
    if( ticks == 0 ){
   11256:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1125a:	74 2b                	je     11287 <task_set_sleep+0x37>
        return ;
    } 
    task -> sleep_ticks = ticks;
   1125c:	8b 55 0c             	mov    0xc(%ebp),%edx
   1125f:	8b 45 08             	mov    0x8(%ebp),%eax
   11262:	89 50 04             	mov    %edx,0x4(%eax)
    task -> state = TASK_SLEEP;
   11265:	8b 45 08             	mov    0x8(%ebp),%eax
   11268:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    list_insert_last( &task_manager.sleep_list , &task->run_node );
   1126e:	8b 45 08             	mov    0x8(%ebp),%eax
   11271:	83 c0 30             	add    $0x30,%eax
   11274:	83 ec 08             	sub    $0x8,%esp
   11277:	50                   	push   %eax
   11278:	68 3c 80 01 00       	push   $0x1803c
   1127d:	e8 ea 18 00 00       	call   12b6c <list_insert_last>
   11282:	83 c4 10             	add    $0x10,%esp
   11285:	eb 01                	jmp    11288 <task_set_sleep+0x38>
        return ;
   11287:	90                   	nop
}
   11288:	c9                   	leave  
   11289:	c3                   	ret    

0001128a <task_set_wakeup>:


void task_set_wakeup( task_t * task ){
   1128a:	55                   	push   %ebp
   1128b:	89 e5                	mov    %esp,%ebp
   1128d:	83 ec 08             	sub    $0x8,%esp
    list_remove_node( &task_manager.sleep_list , &task->run_node );
   11290:	8b 45 08             	mov    0x8(%ebp),%eax
   11293:	83 c0 30             	add    $0x30,%eax
   11296:	83 ec 08             	sub    $0x8,%esp
   11299:	50                   	push   %eax
   1129a:	68 3c 80 01 00       	push   $0x1803c
   1129f:	e8 a4 19 00 00       	call   12c48 <list_remove_node>
   112a4:	83 c4 10             	add    $0x10,%esp
}
   112a7:	90                   	nop
   112a8:	c9                   	leave  
   112a9:	c3                   	ret    

000112aa <sys_sleep>:

void sys_sleep( uint32_t ms ){
   112aa:	55                   	push   %ebp
   112ab:	89 e5                	mov    %esp,%ebp
   112ad:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   112b0:	e8 25 0c 00 00       	call   11eda <irq_enter_protection>
   112b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    task_set_block(task_manager.curr_task);
   112b8:	a1 20 80 01 00       	mov    0x18020,%eax
   112bd:	83 ec 0c             	sub    $0xc,%esp
   112c0:	50                   	push   %eax
   112c1:	e8 a4 fd ff ff       	call   1106a <task_set_block>
   112c6:	83 c4 10             	add    $0x10,%esp
    task_set_sleep(task_manager.curr_task , ( ms + OS_TICKS_MS - 1 ) / OS_TICKS_MS );
   112c9:	8b 45 08             	mov    0x8(%ebp),%eax
   112cc:	83 c0 09             	add    $0x9,%eax
   112cf:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   112d4:	f7 e2                	mul    %edx
   112d6:	c1 ea 03             	shr    $0x3,%edx
   112d9:	a1 20 80 01 00       	mov    0x18020,%eax
   112de:	83 ec 08             	sub    $0x8,%esp
   112e1:	52                   	push   %edx
   112e2:	50                   	push   %eax
   112e3:	e8 68 ff ff ff       	call   11250 <task_set_sleep>
   112e8:	83 c4 10             	add    $0x10,%esp
    task_dispatch();
   112eb:	e8 48 fe ff ff       	call   11138 <task_dispatch>
    irq_leave_protection( state );
   112f0:	83 ec 0c             	sub    $0xc,%esp
   112f3:	ff 75 f4             	pushl  -0xc(%ebp)
   112f6:	e8 f7 0b 00 00       	call   11ef2 <irq_leave_protection>
   112fb:	83 c4 10             	add    $0x10,%esp
   112fe:	90                   	nop
   112ff:	c9                   	leave  
   11300:	c3                   	ret    

00011301 <lgdt>:
static inline void lgdt( uint32_t start , uint32_t size ){
   11301:	55                   	push   %ebp
   11302:	89 e5                	mov    %esp,%ebp
   11304:	83 ec 10             	sub    $0x10,%esp
    gdt.start31_16 = start >> 16;
   11307:	8b 45 08             	mov    0x8(%ebp),%eax
   1130a:	c1 e8 10             	shr    $0x10,%eax
   1130d:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    gdt.start15_0 = start & 0xFFFF;
   11311:	8b 45 08             	mov    0x8(%ebp),%eax
   11314:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.limit = size - 1;
   11318:	8b 45 0c             	mov    0xc(%ebp),%eax
   1131b:	83 e8 01             	sub    $0x1,%eax
   1131e:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__( "lgdt %[g]"::[g]"m"(gdt));
   11322:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   11326:	90                   	nop
   11327:	c9                   	leave  
   11328:	c3                   	ret    

00011329 <far_jump>:
static inline void far_jump( uint32_t selector,  uint32_t offset ){
   11329:	55                   	push   %ebp
   1132a:	89 e5                	mov    %esp,%ebp
   1132c:	83 ec 10             	sub    $0x10,%esp
    uint32_t addr[] = { offset , selector };
   1132f:	8b 45 0c             	mov    0xc(%ebp),%eax
   11332:	89 45 f8             	mov    %eax,-0x8(%ebp)
   11335:	8b 45 08             	mov    0x8(%ebp),%eax
   11338:	89 45 fc             	mov    %eax,-0x4(%ebp)
    __asm__ __volatile__("ljmpl *(%[a])"::[a]"r"(addr));
   1133b:	8d 45 f8             	lea    -0x8(%ebp),%eax
   1133e:	ff 28                	ljmp   *(%eax)
}
   11340:	90                   	nop
   11341:	c9                   	leave  
   11342:	c3                   	ret    

00011343 <segment_desc_set>:
#include"core/syscall.h"

static _segment_desc_t gdt_table[GDT_TABLE_SIZE];
static mutex_t mutex;

void segment_desc_set( int selector , uint32_t base , uint32_t limit , uint16_t attr ){
   11343:	55                   	push   %ebp
   11344:	89 e5                	mov    %esp,%ebp
   11346:	83 ec 14             	sub    $0x14,%esp
   11349:	8b 45 14             	mov    0x14(%ebp),%eax
   1134c:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    _segment_desc_t *desc = gdt_table + ( selector >> 3 );
   11350:	8b 45 08             	mov    0x8(%ebp),%eax
   11353:	c1 f8 03             	sar    $0x3,%eax
   11356:	c1 e0 03             	shl    $0x3,%eax
   11359:	05 c0 81 01 00       	add    $0x181c0,%eax
   1135e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if( limit > 0xFFFFF ){
   11361:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   11368:	76 0f                	jbe    11379 <segment_desc_set+0x36>
        attr |= 0x8000; 
   1136a:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
        limit /= 0x1000;
   11370:	8b 45 10             	mov    0x10(%ebp),%eax
   11373:	c1 e8 0c             	shr    $0xc,%eax
   11376:	89 45 10             	mov    %eax,0x10(%ebp)
    }
    desc->limit15_0 = limit & 0xFFFF;
   11379:	8b 45 10             	mov    0x10(%ebp),%eax
   1137c:	89 c2                	mov    %eax,%edx
   1137e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11381:	66 89 10             	mov    %dx,(%eax)
    desc->base15_0 = base & 0xFFFF;
   11384:	8b 45 0c             	mov    0xc(%ebp),%eax
   11387:	89 c2                	mov    %eax,%edx
   11389:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1138c:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = ( base >> 16 ) & 0xFF;
   11390:	8b 45 0c             	mov    0xc(%ebp),%eax
   11393:	c1 e8 10             	shr    $0x10,%eax
   11396:	89 c2                	mov    %eax,%edx
   11398:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1139b:	88 50 04             	mov    %dl,0x4(%eax)
    desc->attr = attr | ( ( (limit >> 16) & 0xF ) << 8 );
   1139e:	8b 45 10             	mov    0x10(%ebp),%eax
   113a1:	c1 e8 10             	shr    $0x10,%eax
   113a4:	c1 e0 08             	shl    $0x8,%eax
   113a7:	66 25 00 0f          	and    $0xf00,%ax
   113ab:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   113af:	89 c2                	mov    %eax,%edx
   113b1:	8b 45 fc             	mov    -0x4(%ebp),%eax
   113b4:	66 89 50 05          	mov    %dx,0x5(%eax)
    desc->base31_24 = ( base >> 24 ) & 0xFF;
   113b8:	8b 45 0c             	mov    0xc(%ebp),%eax
   113bb:	c1 e8 18             	shr    $0x18,%eax
   113be:	89 c2                	mov    %eax,%edx
   113c0:	8b 45 fc             	mov    -0x4(%ebp),%eax
   113c3:	88 50 07             	mov    %dl,0x7(%eax)
}
   113c6:	90                   	nop
   113c7:	c9                   	leave  
   113c8:	c3                   	ret    

000113c9 <init_gdt>:

void init_gdt( void ){
   113c9:	55                   	push   %ebp
   113ca:	89 e5                	mov    %esp,%ebp
   113cc:	83 ec 18             	sub    $0x18,%esp
    for( int i = 0 ; i < GDT_TABLE_SIZE ; i ++ ){
   113cf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   113d6:	eb 19                	jmp    113f1 <init_gdt+0x28>
        segment_desc_set( i << 3 , 0 , 0 , 0 );
   113d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   113db:	c1 e0 03             	shl    $0x3,%eax
   113de:	6a 00                	push   $0x0
   113e0:	6a 00                	push   $0x0
   113e2:	6a 00                	push   $0x0
   113e4:	50                   	push   %eax
   113e5:	e8 59 ff ff ff       	call   11343 <segment_desc_set>
   113ea:	83 c4 10             	add    $0x10,%esp
    for( int i = 0 ; i < GDT_TABLE_SIZE ; i ++ ){
   113ed:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   113f1:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   113f8:	7e de                	jle    113d8 <init_gdt+0xf>
    }

    segment_desc_set( KERNEL_SELECTOR_CS , 0 , 0xFFFFFFFF ,  
   113fa:	68 98 40 00 00       	push   $0x4098
   113ff:	6a ff                	push   $0xffffffff
   11401:	6a 00                	push   $0x0
   11403:	6a 08                	push   $0x8
   11405:	e8 39 ff ff ff       	call   11343 <segment_desc_set>
   1140a:	83 c4 10             	add    $0x10,%esp
    SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE | SEG_D );

    segment_desc_set( KERNEL_SELECTOR_DS , 0 , 0xFFFFFFFF ,  
   1140d:	68 92 40 00 00       	push   $0x4092
   11412:	6a ff                	push   $0xffffffff
   11414:	6a 00                	push   $0x0
   11416:	6a 10                	push   $0x10
   11418:	e8 26 ff ff ff       	call   11343 <segment_desc_set>
   1141d:	83 c4 10             	add    $0x10,%esp
    SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA | SEG_TYPE_RW  | SEG_D );

    gate_desc_set((gate_desc_t * )(gdt_table + ( SELECTOR_SYSCAL >> 3 )) , 
   11420:	ba da 02 01 00       	mov    $0x102da,%edx
   11425:	b8 d8 81 01 00       	mov    $0x181d8,%eax
   1142a:	68 05 ec 00 00       	push   $0xec05
   1142f:	52                   	push   %edx
   11430:	6a 08                	push   $0x8
   11432:	50                   	push   %eax
   11433:	e8 3a 00 00 00       	call   11472 <gate_desc_set>
   11438:	83 c4 10             	add    $0x10,%esp
        KERNEL_SELECTOR_CS , (uint32_t)exception_handler_syscall ,
        GATE_P_PRESENT | GATE_DPL3 | GATE_TYPE_SYSCALL | SYSCALL_PARAM_COUNT );

    lgdt( (uint32_t)gdt_table , sizeof(gdt_table) );
   1143b:	b8 c0 81 01 00       	mov    $0x181c0,%eax
   11440:	83 ec 08             	sub    $0x8,%esp
   11443:	68 00 08 00 00       	push   $0x800
   11448:	50                   	push   %eax
   11449:	e8 b3 fe ff ff       	call   11301 <lgdt>
   1144e:	83 c4 10             	add    $0x10,%esp
}
   11451:	90                   	nop
   11452:	c9                   	leave  
   11453:	c3                   	ret    

00011454 <cpu_init>:

void cpu_init( void ){
   11454:	55                   	push   %ebp
   11455:	89 e5                	mov    %esp,%ebp
   11457:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&mutex);
   1145a:	83 ec 0c             	sub    $0xc,%esp
   1145d:	68 c0 89 01 00       	push   $0x189c0
   11462:	e8 73 0c 00 00       	call   120da <mutex_init>
   11467:	83 c4 10             	add    $0x10,%esp
    init_gdt(); 
   1146a:	e8 5a ff ff ff       	call   113c9 <init_gdt>
}
   1146f:	90                   	nop
   11470:	c9                   	leave  
   11471:	c3                   	ret    

00011472 <gate_desc_set>:

void gate_desc_set( gate_desc_t * desc , uint16_t selector , uint32_t offset , uint16_t attr ){
   11472:	55                   	push   %ebp
   11473:	89 e5                	mov    %esp,%ebp
   11475:	83 ec 08             	sub    $0x8,%esp
   11478:	8b 55 0c             	mov    0xc(%ebp),%edx
   1147b:	8b 45 14             	mov    0x14(%ebp),%eax
   1147e:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   11482:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    desc ->offset15_0 = offset & 0xffff;
   11486:	8b 45 10             	mov    0x10(%ebp),%eax
   11489:	89 c2                	mov    %eax,%edx
   1148b:	8b 45 08             	mov    0x8(%ebp),%eax
   1148e:	66 89 10             	mov    %dx,(%eax)
    desc ->selector = selector;
   11491:	8b 45 08             	mov    0x8(%ebp),%eax
   11494:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11498:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc ->attr = attr;
   1149c:	8b 45 08             	mov    0x8(%ebp),%eax
   1149f:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   114a3:	66 89 50 04          	mov    %dx,0x4(%eax)
    desc ->offset31_16 = ( offset >> 16 ) & 0xffff;
   114a7:	8b 45 10             	mov    0x10(%ebp),%eax
   114aa:	c1 e8 10             	shr    $0x10,%eax
   114ad:	89 c2                	mov    %eax,%edx
   114af:	8b 45 08             	mov    0x8(%ebp),%eax
   114b2:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   114b6:	90                   	nop
   114b7:	c9                   	leave  
   114b8:	c3                   	ret    

000114b9 <gdt_alloc_desc>:

int gdt_alloc_desc(){
   114b9:	55                   	push   %ebp
   114ba:	89 e5                	mov    %esp,%ebp
   114bc:	83 ec 18             	sub    $0x18,%esp
    mutex_lock(&mutex);
   114bf:	83 ec 0c             	sub    $0xc,%esp
   114c2:	68 c0 89 01 00       	push   $0x189c0
   114c7:	e8 3c 0c 00 00       	call   12108 <mutex_lock>
   114cc:	83 c4 10             	add    $0x10,%esp
    for( int i = 1 ; i < GDT_TABLE_SIZE ; i ++ ){
   114cf:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   114d6:	eb 3f                	jmp    11517 <gdt_alloc_desc+0x5e>
        _segment_desc_t * desc = gdt_table + i;
   114d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   114db:	c1 e0 03             	shl    $0x3,%eax
   114de:	05 c0 81 01 00       	add    $0x181c0,%eax
   114e3:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if( desc->attr == 0 ){
   114e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   114e9:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   114ed:	66 85 c0             	test   %ax,%ax
   114f0:	75 21                	jne    11513 <gdt_alloc_desc+0x5a>
            desc->attr = SEG_P_PRESENT;
   114f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   114f5:	66 c7 40 05 80 00    	movw   $0x80,0x5(%eax)
            mutex_unlock(&mutex);
   114fb:	83 ec 0c             	sub    $0xc,%esp
   114fe:	68 c0 89 01 00       	push   $0x189c0
   11503:	e8 91 0c 00 00       	call   12199 <mutex_unlock>
   11508:	83 c4 10             	add    $0x10,%esp
            return i * sizeof( _segment_desc_t ); 
   1150b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1150e:	c1 e0 03             	shl    $0x3,%eax
   11511:	eb 22                	jmp    11535 <gdt_alloc_desc+0x7c>
    for( int i = 1 ; i < GDT_TABLE_SIZE ; i ++ ){
   11513:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11517:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   1151e:	7e b8                	jle    114d8 <gdt_alloc_desc+0x1f>
        }
    }
    mutex_unlock(&mutex);
   11520:	83 ec 0c             	sub    $0xc,%esp
   11523:	68 c0 89 01 00       	push   $0x189c0
   11528:	e8 6c 0c 00 00       	call   12199 <mutex_unlock>
   1152d:	83 c4 10             	add    $0x10,%esp
    return -1;
   11530:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   11535:	c9                   	leave  
   11536:	c3                   	ret    

00011537 <swith_to_tss>:

void swith_to_tss( uint32_t tss_sel ){
   11537:	55                   	push   %ebp
   11538:	89 e5                	mov    %esp,%ebp
    far_jump( tss_sel , 0 );
   1153a:	6a 00                	push   $0x0
   1153c:	ff 75 08             	pushl  0x8(%ebp)
   1153f:	e8 e5 fd ff ff       	call   11329 <far_jump>
   11544:	83 c4 08             	add    $0x8,%esp
}
   11547:	90                   	nop
   11548:	c9                   	leave  
   11549:	c3                   	ret    

0001154a <gdt_free_sel>:

void gdt_free_sel(int sel){
   1154a:	55                   	push   %ebp
   1154b:	89 e5                	mov    %esp,%ebp
   1154d:	83 ec 08             	sub    $0x8,%esp
    mutex_lock(&mutex); 
   11550:	83 ec 0c             	sub    $0xc,%esp
   11553:	68 c0 89 01 00       	push   $0x189c0
   11558:	e8 ab 0b 00 00       	call   12108 <mutex_lock>
   1155d:	83 c4 10             	add    $0x10,%esp
    gdt_table[ sel / sizeof(_segment_desc_t) ].attr = 0;
   11560:	8b 45 08             	mov    0x8(%ebp),%eax
   11563:	c1 e8 03             	shr    $0x3,%eax
   11566:	66 c7 04 c5 c5 81 01 	movw   $0x0,0x181c5(,%eax,8)
   1156d:	00 00 00 
    mutex_unlock(&mutex);
   11570:	83 ec 0c             	sub    $0xc,%esp
   11573:	68 c0 89 01 00       	push   $0x189c0
   11578:	e8 1c 0c 00 00       	call   12199 <mutex_unlock>
   1157d:	83 c4 10             	add    $0x10,%esp
   11580:	90                   	nop
   11581:	c9                   	leave  
   11582:	c3                   	ret    

00011583 <cli>:
static inline void cli( void ){
   11583:	55                   	push   %ebp
   11584:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("cli");
   11586:	fa                   	cli    
}
   11587:	90                   	nop
   11588:	5d                   	pop    %ebp
   11589:	c3                   	ret    

0001158a <sti>:
static inline void sti( void ){
   1158a:	55                   	push   %ebp
   1158b:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("sti");
   1158d:	fb                   	sti    
}
   1158e:	90                   	nop
   1158f:	5d                   	pop    %ebp
   11590:	c3                   	ret    

00011591 <inb>:
static inline uint8_t inb( uint16_t port ){
   11591:	55                   	push   %ebp
   11592:	89 e5                	mov    %esp,%ebp
   11594:	83 ec 14             	sub    $0x14,%esp
   11597:	8b 45 08             	mov    0x8(%ebp),%eax
   1159a:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p] , %[v]" : [v]"=a"(rv) : [p]"d"(port));
   1159e:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   115a2:	89 c2                	mov    %eax,%edx
   115a4:	ec                   	in     (%dx),%al
   115a5:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   115a8:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   115ac:	c9                   	leave  
   115ad:	c3                   	ret    

000115ae <outb>:
static inline void outb( uint16_t port , uint8_t data ){
   115ae:	55                   	push   %ebp
   115af:	89 e5                	mov    %esp,%ebp
   115b1:	83 ec 08             	sub    $0x8,%esp
   115b4:	8b 55 08             	mov    0x8(%ebp),%edx
   115b7:	8b 45 0c             	mov    0xc(%ebp),%eax
   115ba:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   115be:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v] , %[p]"::[p]"d"(port) , [v]"a"(data));
   115c1:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   115c5:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   115c9:	ee                   	out    %al,(%dx)
}
   115ca:	90                   	nop
   115cb:	c9                   	leave  
   115cc:	c3                   	ret    

000115cd <lidt>:
static inline void lidt( uint32_t start , uint32_t size ){
   115cd:	55                   	push   %ebp
   115ce:	89 e5                	mov    %esp,%ebp
   115d0:	83 ec 10             	sub    $0x10,%esp
    idt.start31_16 = start >> 16;
   115d3:	8b 45 08             	mov    0x8(%ebp),%eax
   115d6:	c1 e8 10             	shr    $0x10,%eax
   115d9:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    idt.start15_0 = start & 0xFFFF;
   115dd:	8b 45 08             	mov    0x8(%ebp),%eax
   115e0:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    idt.limit = size - 1;
   115e4:	8b 45 0c             	mov    0xc(%ebp),%eax
   115e7:	83 e8 01             	sub    $0x1,%eax
   115ea:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__( "lidt %[g]"::[g]"m"(idt));
   115ee:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   115f2:	90                   	nop
   115f3:	c9                   	leave  
   115f4:	c3                   	ret    

000115f5 <hlt>:
static inline void hlt( void ){
   115f5:	55                   	push   %ebp
   115f6:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   115f8:	f4                   	hlt    
}
   115f9:	90                   	nop
   115fa:	5d                   	pop    %ebp
   115fb:	c3                   	ret    

000115fc <read_eflags>:
static inline uint32_t read_eflags( void ){
   115fc:	55                   	push   %ebp
   115fd:	89 e5                	mov    %esp,%ebp
   115ff:	83 ec 10             	sub    $0x10,%esp
    __asm__ __volatile__( "pushf\n\tpop %%eax":"=a"(eflags));
   11602:	9c                   	pushf  
   11603:	58                   	pop    %eax
   11604:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eflags;
   11607:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1160a:	c9                   	leave  
   1160b:	c3                   	ret    

0001160c <write_eflags>:
static inline void write_eflags( uint32_t eflags ){
   1160c:	55                   	push   %ebp
   1160d:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__( "push %%eax\n\tpopf"::"a"(eflags)); 
   1160f:	8b 45 08             	mov    0x8(%ebp),%eax
   11612:	50                   	push   %eax
   11613:	9d                   	popf   
}
   11614:	90                   	nop
   11615:	5d                   	pop    %ebp
   11616:	c3                   	ret    

00011617 <read_cr2>:

static inline uint32_t read_cr2( void ){
   11617:	55                   	push   %ebp
   11618:	89 e5                	mov    %esp,%ebp
   1161a:	83 ec 10             	sub    $0x10,%esp
    uint32_t cr2;
    __asm__ __volatile__("mov %%cr2 , %[v]":[v]"=r"(cr2));
   1161d:	0f 20 d0             	mov    %cr2,%eax
   11620:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return cr2;
   11623:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11626:	c9                   	leave  
   11627:	c3                   	ret    

00011628 <dump_core_regs>:
#include"comm/cpu_instr.h"
#include"cpu/irq.h"
#include"cpu/cpu.h"
#include"os_cfg.h"
#include"tools/log.h"
static void dump_core_regs( exception_frame_t * frame ){
   11628:	55                   	push   %ebp
   11629:	89 e5                	mov    %esp,%ebp
   1162b:	57                   	push   %edi
   1162c:	56                   	push   %esi
   1162d:	53                   	push   %ebx
   1162e:	83 ec 2c             	sub    $0x2c,%esp
    uint32_t ss , esp;
    if( frame->cs & 0x3 ){
   11631:	8b 45 08             	mov    0x8(%ebp),%eax
   11634:	8b 40 3c             	mov    0x3c(%eax),%eax
   11637:	83 e0 03             	and    $0x3,%eax
   1163a:	85 c0                	test   %eax,%eax
   1163c:	74 14                	je     11652 <dump_core_regs+0x2a>
        ss = frame -> ss3;
   1163e:	8b 45 08             	mov    0x8(%ebp),%eax
   11641:	8b 40 48             	mov    0x48(%eax),%eax
   11644:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        esp = frame -> esp3;
   11647:	8b 45 08             	mov    0x8(%ebp),%eax
   1164a:	8b 40 44             	mov    0x44(%eax),%eax
   1164d:	89 45 e0             	mov    %eax,-0x20(%ebp)
   11650:	eb 12                	jmp    11664 <dump_core_regs+0x3c>
    }
    else{
        ss = frame -> ds;
   11652:	8b 45 08             	mov    0x8(%ebp),%eax
   11655:	8b 40 0c             	mov    0xc(%eax),%eax
   11658:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        esp = frame -> esp;
   1165b:	8b 45 08             	mov    0x8(%ebp),%eax
   1165e:	8b 40 1c             	mov    0x1c(%eax),%eax
   11661:	89 45 e0             	mov    %eax,-0x20(%ebp)
    }

    log_printf("IRQ: %d , error code : %d" , frame->num , frame->error_code);
   11664:	8b 45 08             	mov    0x8(%ebp),%eax
   11667:	8b 50 34             	mov    0x34(%eax),%edx
   1166a:	8b 45 08             	mov    0x8(%ebp),%eax
   1166d:	8b 40 30             	mov    0x30(%eax),%eax
   11670:	83 ec 04             	sub    $0x4,%esp
   11673:	52                   	push   %edx
   11674:	50                   	push   %eax
   11675:	68 88 30 01 00       	push   $0x13088
   1167a:	e8 27 17 00 00       	call   12da6 <log_printf>
   1167f:	83 c4 10             	add    $0x10,%esp
    log_printf("CS: %d\n\rDS: %d\n\rES: %d\n\rSS: %d\n\rFS: %d\n\rGS: %d" , 
   11682:	8b 45 08             	mov    0x8(%ebp),%eax
   11685:	8b 30                	mov    (%eax),%esi
   11687:	8b 45 08             	mov    0x8(%ebp),%eax
   1168a:	8b 58 04             	mov    0x4(%eax),%ebx
   1168d:	8b 45 08             	mov    0x8(%ebp),%eax
   11690:	8b 48 08             	mov    0x8(%eax),%ecx
   11693:	8b 45 08             	mov    0x8(%ebp),%eax
   11696:	8b 50 0c             	mov    0xc(%eax),%edx
   11699:	8b 45 08             	mov    0x8(%ebp),%eax
   1169c:	8b 40 3c             	mov    0x3c(%eax),%eax
   1169f:	83 ec 04             	sub    $0x4,%esp
   116a2:	56                   	push   %esi
   116a3:	53                   	push   %ebx
   116a4:	ff 75 e4             	pushl  -0x1c(%ebp)
   116a7:	51                   	push   %ecx
   116a8:	52                   	push   %edx
   116a9:	50                   	push   %eax
   116aa:	68 a4 30 01 00       	push   $0x130a4
   116af:	e8 f2 16 00 00       	call   12da6 <log_printf>
   116b4:	83 c4 20             	add    $0x20,%esp
    frame->cs , frame->ds , frame->es , ss , frame->fs , frame->gs );
    log_printf("EAX: %x\n\r"
   116b7:	8b 45 08             	mov    0x8(%ebp),%eax
   116ba:	8b 40 18             	mov    0x18(%eax),%eax
   116bd:	89 45 d4             	mov    %eax,-0x2c(%ebp)
   116c0:	8b 45 08             	mov    0x8(%ebp),%eax
   116c3:	8b 78 14             	mov    0x14(%eax),%edi
   116c6:	8b 45 08             	mov    0x8(%ebp),%eax
   116c9:	8b 70 10             	mov    0x10(%eax),%esi
   116cc:	8b 45 08             	mov    0x8(%ebp),%eax
   116cf:	8b 58 24             	mov    0x24(%eax),%ebx
   116d2:	8b 45 08             	mov    0x8(%ebp),%eax
   116d5:	8b 48 28             	mov    0x28(%eax),%ecx
   116d8:	8b 45 08             	mov    0x8(%ebp),%eax
   116db:	8b 50 20             	mov    0x20(%eax),%edx
   116de:	8b 45 08             	mov    0x8(%ebp),%eax
   116e1:	8b 40 2c             	mov    0x2c(%eax),%eax
   116e4:	83 ec 0c             	sub    $0xc,%esp
   116e7:	ff 75 e0             	pushl  -0x20(%ebp)
   116ea:	ff 75 d4             	pushl  -0x2c(%ebp)
   116ed:	57                   	push   %edi
   116ee:	56                   	push   %esi
   116ef:	53                   	push   %ebx
   116f0:	51                   	push   %ecx
   116f1:	52                   	push   %edx
   116f2:	50                   	push   %eax
   116f3:	68 d4 30 01 00       	push   $0x130d4
   116f8:	e8 a9 16 00 00       	call   12da6 <log_printf>
   116fd:	83 c4 30             	add    $0x30,%esp
    "EDI: %x\n\r"
    "ESI: %x\n\r"
    "EBP: %x\n\r"
    "ESP: %x" , frame->eax , frame->ebx , frame->ecx , frame->edx , frame->edi , frame->esi,
    frame->ebp , esp );
    log_printf("EIP: %x\n\rELFAGS: %x", frame ->eip , frame -> eflags );
   11700:	8b 45 08             	mov    0x8(%ebp),%eax
   11703:	8b 50 40             	mov    0x40(%eax),%edx
   11706:	8b 45 08             	mov    0x8(%ebp),%eax
   11709:	8b 40 38             	mov    0x38(%eax),%eax
   1170c:	83 ec 04             	sub    $0x4,%esp
   1170f:	52                   	push   %edx
   11710:	50                   	push   %eax
   11711:	68 1b 31 01 00       	push   $0x1311b
   11716:	e8 8b 16 00 00       	call   12da6 <log_printf>
   1171b:	83 c4 10             	add    $0x10,%esp
}
   1171e:	90                   	nop
   1171f:	8d 65 f4             	lea    -0xc(%ebp),%esp
   11722:	5b                   	pop    %ebx
   11723:	5e                   	pop    %esi
   11724:	5f                   	pop    %edi
   11725:	5d                   	pop    %ebp
   11726:	c3                   	ret    

00011727 <do_default_handler>:

static void do_default_handler( exception_frame_t * frame ,  char * message ){
   11727:	55                   	push   %ebp
   11728:	89 e5                	mov    %esp,%ebp
   1172a:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------");
   1172d:	83 ec 0c             	sub    $0xc,%esp
   11730:	68 2f 31 01 00       	push   $0x1312f
   11735:	e8 6c 16 00 00       	call   12da6 <log_printf>
   1173a:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend : %s" , message );
   1173d:	83 ec 08             	sub    $0x8,%esp
   11740:	ff 75 0c             	pushl  0xc(%ebp)
   11743:	68 44 31 01 00       	push   $0x13144
   11748:	e8 59 16 00 00       	call   12da6 <log_printf>
   1174d:	83 c4 10             	add    $0x10,%esp
    dump_core_regs( frame );
   11750:	83 ec 0c             	sub    $0xc,%esp
   11753:	ff 75 08             	pushl  0x8(%ebp)
   11756:	e8 cd fe ff ff       	call   11628 <dump_core_regs>
   1175b:	83 c4 10             	add    $0x10,%esp
}
   1175e:	90                   	nop
   1175f:	c9                   	leave  
   11760:	c3                   	ret    

00011761 <do_handler_unknown>:
//unknown error
void do_handler_unknown( exception_frame_t * frame ){
   11761:	55                   	push   %ebp
   11762:	89 e5                	mov    %esp,%ebp
   11764:	83 ec 08             	sub    $0x8,%esp
    do_default_handler( frame  , "unknown exception");
   11767:	83 ec 08             	sub    $0x8,%esp
   1176a:	68 5f 31 01 00       	push   $0x1315f
   1176f:	ff 75 08             	pushl  0x8(%ebp)
   11772:	e8 b0 ff ff ff       	call   11727 <do_default_handler>
   11777:	83 c4 10             	add    $0x10,%esp
}
   1177a:	90                   	nop
   1177b:	c9                   	leave  
   1177c:	c3                   	ret    

0001177d <do_handler_divider>:
//#divide error #DE
void do_handler_divider( exception_frame_t * frame ){
   1177d:	55                   	push   %ebp
   1177e:	89 e5                	mov    %esp,%ebp
   11780:	83 ec 08             	sub    $0x8,%esp
    do_default_handler( frame  , "Divder exception");
   11783:	83 ec 08             	sub    $0x8,%esp
   11786:	68 71 31 01 00       	push   $0x13171
   1178b:	ff 75 08             	pushl  0x8(%ebp)
   1178e:	e8 94 ff ff ff       	call   11727 <do_default_handler>
   11793:	83 c4 10             	add    $0x10,%esp
}
   11796:	90                   	nop
   11797:	c9                   	leave  
   11798:	c3                   	ret    

00011799 <do_handler_Debug>:
void do_handler_Debug( exception_frame_t * frame ){
   11799:	55                   	push   %ebp
   1179a:	89 e5                	mov    %esp,%ebp
   1179c:	83 ec 08             	sub    $0x8,%esp
    do_default_handler( frame  , "Debug exception");
   1179f:	83 ec 08             	sub    $0x8,%esp
   117a2:	68 82 31 01 00       	push   $0x13182
   117a7:	ff 75 08             	pushl  0x8(%ebp)
   117aa:	e8 78 ff ff ff       	call   11727 <do_default_handler>
   117af:	83 c4 10             	add    $0x10,%esp
}
   117b2:	90                   	nop
   117b3:	c9                   	leave  
   117b4:	c3                   	ret    

000117b5 <do_handler_NMI>:
void do_handler_NMI( exception_frame_t * frame ){
   117b5:	55                   	push   %ebp
   117b6:	89 e5                	mov    %esp,%ebp
   117b8:	83 ec 08             	sub    $0x8,%esp
    do_default_handler( frame  , "NMI exception");
   117bb:	83 ec 08             	sub    $0x8,%esp
   117be:	68 92 31 01 00       	push   $0x13192
   117c3:	ff 75 08             	pushl  0x8(%ebp)
   117c6:	e8 5c ff ff ff       	call   11727 <do_default_handler>
   117cb:	83 c4 10             	add    $0x10,%esp
}
   117ce:	90                   	nop
   117cf:	c9                   	leave  
   117d0:	c3                   	ret    

000117d1 <do_handler_breakpoint>:
void do_handler_breakpoint( exception_frame_t * frame ){
   117d1:	55                   	push   %ebp
   117d2:	89 e5                	mov    %esp,%ebp
   117d4:	83 ec 08             	sub    $0x8,%esp
    do_default_handler( frame  , "breakpoint exception");
   117d7:	83 ec 08             	sub    $0x8,%esp
   117da:	68 a0 31 01 00       	push   $0x131a0
   117df:	ff 75 08             	pushl  0x8(%ebp)
   117e2:	e8 40 ff ff ff       	call   11727 <do_default_handler>
   117e7:	83 c4 10             	add    $0x10,%esp
}
   117ea:	90                   	nop
   117eb:	c9                   	leave  
   117ec:	c3                   	ret    

000117ed <do_handler_overflow>:
void do_handler_overflow( exception_frame_t * frame ){
   117ed:	55                   	push   %ebp
   117ee:	89 e5                	mov    %esp,%ebp
   117f0:	83 ec 08             	sub    $0x8,%esp
    do_default_handler( frame  , "overflow exception");
   117f3:	83 ec 08             	sub    $0x8,%esp
   117f6:	68 b5 31 01 00       	push   $0x131b5
   117fb:	ff 75 08             	pushl  0x8(%ebp)
   117fe:	e8 24 ff ff ff       	call   11727 <do_default_handler>
   11803:	83 c4 10             	add    $0x10,%esp
}
   11806:	90                   	nop
   11807:	c9                   	leave  
   11808:	c3                   	ret    

00011809 <do_handler_bound_range_exceeded>:
void do_handler_bound_range_exceeded( exception_frame_t * frame ){
   11809:	55                   	push   %ebp
   1180a:	89 e5                	mov    %esp,%ebp
   1180c:	83 ec 08             	sub    $0x8,%esp
    do_default_handler( frame  , "bound range exceeded exception");
   1180f:	83 ec 08             	sub    $0x8,%esp
   11812:	68 c8 31 01 00       	push   $0x131c8
   11817:	ff 75 08             	pushl  0x8(%ebp)
   1181a:	e8 08 ff ff ff       	call   11727 <do_default_handler>
   1181f:	83 c4 10             	add    $0x10,%esp
}
   11822:	90                   	nop
   11823:	c9                   	leave  
   11824:	c3                   	ret    

00011825 <do_handler_invalid_opcode>:
void do_handler_invalid_opcode( exception_frame_t * frame ){
   11825:	55                   	push   %ebp
   11826:	89 e5                	mov    %esp,%ebp
   11828:	83 ec 08             	sub    $0x8,%esp
    do_default_handler( frame  , "invalid opcode exception");
   1182b:	83 ec 08             	sub    $0x8,%esp
   1182e:	68 e7 31 01 00       	push   $0x131e7
   11833:	ff 75 08             	pushl  0x8(%ebp)
   11836:	e8 ec fe ff ff       	call   11727 <do_default_handler>
   1183b:	83 c4 10             	add    $0x10,%esp
}
   1183e:	90                   	nop
   1183f:	c9                   	leave  
   11840:	c3                   	ret    

00011841 <do_handler_device_not_available>:
void do_handler_device_not_available( exception_frame_t * frame ){
   11841:	55                   	push   %ebp
   11842:	89 e5                	mov    %esp,%ebp
   11844:	83 ec 08             	sub    $0x8,%esp
    do_default_handler( frame  , "device not available exception");
   11847:	83 ec 08             	sub    $0x8,%esp
   1184a:	68 00 32 01 00       	push   $0x13200
   1184f:	ff 75 08             	pushl  0x8(%ebp)
   11852:	e8 d0 fe ff ff       	call   11727 <do_default_handler>
   11857:	83 c4 10             	add    $0x10,%esp
}
   1185a:	90                   	nop
   1185b:	c9                   	leave  
   1185c:	c3                   	ret    

0001185d <do_handler_double_fault>:
void do_handler_double_fault( exception_frame_t * frame ){
   1185d:	55                   	push   %ebp
   1185e:	89 e5                	mov    %esp,%ebp
   11860:	83 ec 08             	sub    $0x8,%esp
    do_default_handler( frame  , "double fault exception");
   11863:	83 ec 08             	sub    $0x8,%esp
   11866:	68 1f 32 01 00       	push   $0x1321f
   1186b:	ff 75 08             	pushl  0x8(%ebp)
   1186e:	e8 b4 fe ff ff       	call   11727 <do_default_handler>
   11873:	83 c4 10             	add    $0x10,%esp
}
   11876:	90                   	nop
   11877:	c9                   	leave  
   11878:	c3                   	ret    

00011879 <do_handler_invalid_tss>:
void do_handler_invalid_tss( exception_frame_t * frame ){
   11879:	55                   	push   %ebp
   1187a:	89 e5                	mov    %esp,%ebp
   1187c:	83 ec 08             	sub    $0x8,%esp
    do_default_handler( frame  , "invalid tss exception");
   1187f:	83 ec 08             	sub    $0x8,%esp
   11882:	68 36 32 01 00       	push   $0x13236
   11887:	ff 75 08             	pushl  0x8(%ebp)
   1188a:	e8 98 fe ff ff       	call   11727 <do_default_handler>
   1188f:	83 c4 10             	add    $0x10,%esp
}
   11892:	90                   	nop
   11893:	c9                   	leave  
   11894:	c3                   	ret    

00011895 <do_handler_segment_not_present>:
void do_handler_segment_not_present( exception_frame_t * frame ){
   11895:	55                   	push   %ebp
   11896:	89 e5                	mov    %esp,%ebp
   11898:	83 ec 08             	sub    $0x8,%esp
    do_default_handler( frame  , "segment not present");
   1189b:	83 ec 08             	sub    $0x8,%esp
   1189e:	68 4c 32 01 00       	push   $0x1324c
   118a3:	ff 75 08             	pushl  0x8(%ebp)
   118a6:	e8 7c fe ff ff       	call   11727 <do_default_handler>
   118ab:	83 c4 10             	add    $0x10,%esp
}
   118ae:	90                   	nop
   118af:	c9                   	leave  
   118b0:	c3                   	ret    

000118b1 <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault( exception_frame_t * frame ){
   118b1:	55                   	push   %ebp
   118b2:	89 e5                	mov    %esp,%ebp
   118b4:	83 ec 08             	sub    $0x8,%esp
    do_default_handler( frame  , "stack segment fault exception");
   118b7:	83 ec 08             	sub    $0x8,%esp
   118ba:	68 60 32 01 00       	push   $0x13260
   118bf:	ff 75 08             	pushl  0x8(%ebp)
   118c2:	e8 60 fe ff ff       	call   11727 <do_default_handler>
   118c7:	83 c4 10             	add    $0x10,%esp
}
   118ca:	90                   	nop
   118cb:	c9                   	leave  
   118cc:	c3                   	ret    

000118cd <do_handler_general_protection>:
void do_handler_general_protection( exception_frame_t * frame ){
   118cd:	55                   	push   %ebp
   118ce:	89 e5                	mov    %esp,%ebp
   118d0:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------");
   118d3:	83 ec 0c             	sub    $0xc,%esp
   118d6:	68 7e 32 01 00       	push   $0x1327e
   118db:	e8 c6 14 00 00       	call   12da6 <log_printf>
   118e0:	83 c4 10             	add    $0x10,%esp
    log_printf("GP fault.");
   118e3:	83 ec 0c             	sub    $0xc,%esp
   118e6:	68 87 32 01 00       	push   $0x13287
   118eb:	e8 b6 14 00 00       	call   12da6 <log_printf>
   118f0:	83 c4 10             	add    $0x10,%esp

    if( frame -> error_code & ERR_EXT ){
   118f3:	8b 45 08             	mov    0x8(%ebp),%eax
   118f6:	8b 40 34             	mov    0x34(%eax),%eax
   118f9:	83 e0 01             	and    $0x1,%eax
   118fc:	85 c0                	test   %eax,%eax
   118fe:	74 12                	je     11912 <do_handler_general_protection+0x45>
        log_printf("exception occurred during delivery of an event external to the program");
   11900:	83 ec 0c             	sub    $0xc,%esp
   11903:	68 94 32 01 00       	push   $0x13294
   11908:	e8 99 14 00 00       	call   12da6 <log_printf>
   1190d:	83 c4 10             	add    $0x10,%esp
   11910:	eb 10                	jmp    11922 <do_handler_general_protection+0x55>
    }
    else{
        log_printf("exception occurred during delivery of a software interrupt ");
   11912:	83 ec 0c             	sub    $0xc,%esp
   11915:	68 dc 32 01 00       	push   $0x132dc
   1191a:	e8 87 14 00 00       	call   12da6 <log_printf>
   1191f:	83 c4 10             	add    $0x10,%esp
    }

    if( frame->error_code & ERR_IDT ){
   11922:	8b 45 08             	mov    0x8(%ebp),%eax
   11925:	8b 40 34             	mov    0x34(%eax),%eax
   11928:	83 e0 02             	and    $0x2,%eax
   1192b:	85 c0                	test   %eax,%eax
   1192d:	74 12                	je     11941 <do_handler_general_protection+0x74>
        log_printf(" the index portion of the error code refers to a gate descriptor in the IDT");
   1192f:	83 ec 0c             	sub    $0xc,%esp
   11932:	68 18 33 01 00       	push   $0x13318
   11937:	e8 6a 14 00 00       	call   12da6 <log_printf>
   1193c:	83 c4 10             	add    $0x10,%esp
   1193f:	eb 10                	jmp    11951 <do_handler_general_protection+0x84>
    }
    else{
        log_printf(" the index refers to a descriptor in the GDT.");
   11941:	83 ec 0c             	sub    $0xc,%esp
   11944:	68 64 33 01 00       	push   $0x13364
   11949:	e8 58 14 00 00       	call   12da6 <log_printf>
   1194e:	83 c4 10             	add    $0x10,%esp
    }

    log_printf("selector index: %d" , frame->error_code & 0xfff8 );
   11951:	8b 45 08             	mov    0x8(%ebp),%eax
   11954:	8b 40 34             	mov    0x34(%eax),%eax
   11957:	25 f8 ff 00 00       	and    $0xfff8,%eax
   1195c:	83 ec 08             	sub    $0x8,%esp
   1195f:	50                   	push   %eax
   11960:	68 92 33 01 00       	push   $0x13392
   11965:	e8 3c 14 00 00       	call   12da6 <log_printf>
   1196a:	83 c4 10             	add    $0x10,%esp
    dump_core_regs(frame);
   1196d:	83 ec 0c             	sub    $0xc,%esp
   11970:	ff 75 08             	pushl  0x8(%ebp)
   11973:	e8 b0 fc ff ff       	call   11628 <dump_core_regs>
   11978:	83 c4 10             	add    $0x10,%esp
    while(1){
        hlt();
   1197b:	e8 75 fc ff ff       	call   115f5 <hlt>
   11980:	eb f9                	jmp    1197b <do_handler_general_protection+0xae>

00011982 <do_handler_page_fault>:
    }
}
void do_handler_page_fault( exception_frame_t * frame ){
   11982:	55                   	push   %ebp
   11983:	89 e5                	mov    %esp,%ebp
   11985:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------");
   11988:	83 ec 0c             	sub    $0xc,%esp
   1198b:	68 7e 32 01 00       	push   $0x1327e
   11990:	e8 11 14 00 00       	call   12da6 <log_printf>
   11995:	83 c4 10             	add    $0x10,%esp
    log_printf("Page fault.");
   11998:	83 ec 0c             	sub    $0xc,%esp
   1199b:	68 a5 33 01 00       	push   $0x133a5
   119a0:	e8 01 14 00 00       	call   12da6 <log_printf>
   119a5:	83 c4 10             	add    $0x10,%esp

    if( frame -> error_code & ERR_PAGE_P ){
   119a8:	8b 45 08             	mov    0x8(%ebp),%eax
   119ab:	8b 40 34             	mov    0x34(%eax),%eax
   119ae:	83 e0 01             	and    $0x1,%eax
   119b1:	85 c0                	test   %eax,%eax
   119b3:	74 12                	je     119c7 <do_handler_page_fault+0x45>
        log_printf("The fault was caused by a page-level protection violation");
   119b5:	83 ec 0c             	sub    $0xc,%esp
   119b8:	68 b4 33 01 00       	push   $0x133b4
   119bd:	e8 e4 13 00 00       	call   12da6 <log_printf>
   119c2:	83 c4 10             	add    $0x10,%esp
   119c5:	eb 16                	jmp    119dd <do_handler_page_fault+0x5b>
    }
    else{
        log_printf("The fault was caused by a non-present page:%x" , read_cr2() );
   119c7:	e8 4b fc ff ff       	call   11617 <read_cr2>
   119cc:	83 ec 08             	sub    $0x8,%esp
   119cf:	50                   	push   %eax
   119d0:	68 f0 33 01 00       	push   $0x133f0
   119d5:	e8 cc 13 00 00       	call   12da6 <log_printf>
   119da:	83 c4 10             	add    $0x10,%esp
    }

    if( frame -> error_code & ERR_PAGE_WR ){
   119dd:	8b 45 08             	mov    0x8(%ebp),%eax
   119e0:	8b 40 34             	mov    0x34(%eax),%eax
   119e3:	83 e0 02             	and    $0x2,%eax
   119e6:	85 c0                	test   %eax,%eax
   119e8:	74 18                	je     11a02 <do_handler_page_fault+0x80>
        log_printf("The access causing the fault was a write:%x" , read_cr2());
   119ea:	e8 28 fc ff ff       	call   11617 <read_cr2>
   119ef:	83 ec 08             	sub    $0x8,%esp
   119f2:	50                   	push   %eax
   119f3:	68 20 34 01 00       	push   $0x13420
   119f8:	e8 a9 13 00 00       	call   12da6 <log_printf>
   119fd:	83 c4 10             	add    $0x10,%esp
   11a00:	eb 16                	jmp    11a18 <do_handler_page_fault+0x96>
    }
    else{
        log_printf("The access causing the fault was a read:%x" , read_cr2() );
   11a02:	e8 10 fc ff ff       	call   11617 <read_cr2>
   11a07:	83 ec 08             	sub    $0x8,%esp
   11a0a:	50                   	push   %eax
   11a0b:	68 4c 34 01 00       	push   $0x1344c
   11a10:	e8 91 13 00 00       	call   12da6 <log_printf>
   11a15:	83 c4 10             	add    $0x10,%esp
    }

    if( frame -> error_code & ERR_PAGE_US ){
   11a18:	8b 45 08             	mov    0x8(%ebp),%eax
   11a1b:	8b 40 34             	mov    0x34(%eax),%eax
   11a1e:	83 e0 02             	and    $0x2,%eax
   11a21:	85 c0                	test   %eax,%eax
   11a23:	74 18                	je     11a3d <do_handler_page_fault+0xbb>
        log_printf("A user-mode access caused the fault.:%x" , read_cr2());
   11a25:	e8 ed fb ff ff       	call   11617 <read_cr2>
   11a2a:	83 ec 08             	sub    $0x8,%esp
   11a2d:	50                   	push   %eax
   11a2e:	68 78 34 01 00       	push   $0x13478
   11a33:	e8 6e 13 00 00       	call   12da6 <log_printf>
   11a38:	83 c4 10             	add    $0x10,%esp
   11a3b:	eb 16                	jmp    11a53 <do_handler_page_fault+0xd1>
    }
    else{
        log_printf("A supervisor-mode access caused the fault.:%x" , read_cr2());
   11a3d:	e8 d5 fb ff ff       	call   11617 <read_cr2>
   11a42:	83 ec 08             	sub    $0x8,%esp
   11a45:	50                   	push   %eax
   11a46:	68 a0 34 01 00       	push   $0x134a0
   11a4b:	e8 56 13 00 00       	call   12da6 <log_printf>
   11a50:	83 c4 10             	add    $0x10,%esp
    }

    dump_core_regs(frame);
   11a53:	83 ec 0c             	sub    $0xc,%esp
   11a56:	ff 75 08             	pushl  0x8(%ebp)
   11a59:	e8 ca fb ff ff       	call   11628 <dump_core_regs>
   11a5e:	83 c4 10             	add    $0x10,%esp
    while(1){
        hlt();
   11a61:	e8 8f fb ff ff       	call   115f5 <hlt>
   11a66:	eb f9                	jmp    11a61 <do_handler_page_fault+0xdf>

00011a68 <do_handler_fpu_error>:
    }
}
void do_handler_fpu_error( exception_frame_t * frame ){
   11a68:	55                   	push   %ebp
   11a69:	89 e5                	mov    %esp,%ebp
   11a6b:	83 ec 08             	sub    $0x8,%esp
    do_default_handler( frame  , "fpu error exception");
   11a6e:	83 ec 08             	sub    $0x8,%esp
   11a71:	68 ce 34 01 00       	push   $0x134ce
   11a76:	ff 75 08             	pushl  0x8(%ebp)
   11a79:	e8 a9 fc ff ff       	call   11727 <do_default_handler>
   11a7e:	83 c4 10             	add    $0x10,%esp
}
   11a81:	90                   	nop
   11a82:	c9                   	leave  
   11a83:	c3                   	ret    

00011a84 <do_handler_alignment_check>:
void do_handler_alignment_check( exception_frame_t * frame ){
   11a84:	55                   	push   %ebp
   11a85:	89 e5                	mov    %esp,%ebp
   11a87:	83 ec 08             	sub    $0x8,%esp
    do_default_handler( frame  , "alignment check exception");
   11a8a:	83 ec 08             	sub    $0x8,%esp
   11a8d:	68 e2 34 01 00       	push   $0x134e2
   11a92:	ff 75 08             	pushl  0x8(%ebp)
   11a95:	e8 8d fc ff ff       	call   11727 <do_default_handler>
   11a9a:	83 c4 10             	add    $0x10,%esp
}
   11a9d:	90                   	nop
   11a9e:	c9                   	leave  
   11a9f:	c3                   	ret    

00011aa0 <do_handler_machine_check>:
void do_handler_machine_check( exception_frame_t * frame ){
   11aa0:	55                   	push   %ebp
   11aa1:	89 e5                	mov    %esp,%ebp
   11aa3:	83 ec 08             	sub    $0x8,%esp
    do_default_handler( frame  , "machine check exception");
   11aa6:	83 ec 08             	sub    $0x8,%esp
   11aa9:	68 fc 34 01 00       	push   $0x134fc
   11aae:	ff 75 08             	pushl  0x8(%ebp)
   11ab1:	e8 71 fc ff ff       	call   11727 <do_default_handler>
   11ab6:	83 c4 10             	add    $0x10,%esp
}
   11ab9:	90                   	nop
   11aba:	c9                   	leave  
   11abb:	c3                   	ret    

00011abc <do_handler_simd_exception>:
void do_handler_simd_exception( exception_frame_t * frame ){
   11abc:	55                   	push   %ebp
   11abd:	89 e5                	mov    %esp,%ebp
   11abf:	83 ec 08             	sub    $0x8,%esp
    do_default_handler( frame  , "simd exception exception");
   11ac2:	83 ec 08             	sub    $0x8,%esp
   11ac5:	68 14 35 01 00       	push   $0x13514
   11aca:	ff 75 08             	pushl  0x8(%ebp)
   11acd:	e8 55 fc ff ff       	call   11727 <do_default_handler>
   11ad2:	83 c4 10             	add    $0x10,%esp
}
   11ad5:	90                   	nop
   11ad6:	c9                   	leave  
   11ad7:	c3                   	ret    

00011ad8 <do_handler_virtualization_exception>:
void do_handler_virtualization_exception( exception_frame_t * frame ){
   11ad8:	55                   	push   %ebp
   11ad9:	89 e5                	mov    %esp,%ebp
   11adb:	83 ec 08             	sub    $0x8,%esp
    do_default_handler( frame  , "virtualization exception");
   11ade:	83 ec 08             	sub    $0x8,%esp
   11ae1:	68 2d 35 01 00       	push   $0x1352d
   11ae6:	ff 75 08             	pushl  0x8(%ebp)
   11ae9:	e8 39 fc ff ff       	call   11727 <do_default_handler>
   11aee:	83 c4 10             	add    $0x10,%esp
}
   11af1:	90                   	nop
   11af2:	c9                   	leave  
   11af3:	c3                   	ret    

00011af4 <do_handler_control_protection_exception>:
void do_handler_control_protection_exception( exception_frame_t * frame ){
   11af4:	55                   	push   %ebp
   11af5:	89 e5                	mov    %esp,%ebp
   11af7:	83 ec 08             	sub    $0x8,%esp
    do_default_handler( frame  , "control protection exception");
   11afa:	83 ec 08             	sub    $0x8,%esp
   11afd:	68 46 35 01 00       	push   $0x13546
   11b02:	ff 75 08             	pushl  0x8(%ebp)
   11b05:	e8 1d fc ff ff       	call   11727 <do_default_handler>
   11b0a:	83 c4 10             	add    $0x10,%esp
}
   11b0d:	90                   	nop
   11b0e:	c9                   	leave  
   11b0f:	c3                   	ret    

00011b10 <init_pic>:

static void init_pic ( void ){
   11b10:	55                   	push   %ebp
   11b11:	89 e5                	mov    %esp,%ebp
    outb( PIC0_ICW1 , PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4 );
   11b13:	6a 11                	push   $0x11
   11b15:	6a 20                	push   $0x20
   11b17:	e8 92 fa ff ff       	call   115ae <outb>
   11b1c:	83 c4 08             	add    $0x8,%esp
    outb( PIC0_ICW2 , IRQ_PIC_START );   
   11b1f:	6a 20                	push   $0x20
   11b21:	6a 21                	push   $0x21
   11b23:	e8 86 fa ff ff       	call   115ae <outb>
   11b28:	83 c4 08             	add    $0x8,%esp
    outb( PIC0_ICW3 , 1 << 2 );
   11b2b:	6a 04                	push   $0x4
   11b2d:	6a 21                	push   $0x21
   11b2f:	e8 7a fa ff ff       	call   115ae <outb>
   11b34:	83 c4 08             	add    $0x8,%esp
    outb( PIC0_ICW4 , PIC_ICW4_8086 );
   11b37:	6a 01                	push   $0x1
   11b39:	6a 21                	push   $0x21
   11b3b:	e8 6e fa ff ff       	call   115ae <outb>
   11b40:	83 c4 08             	add    $0x8,%esp

    outb( PIC1_ICW1 , PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4 );
   11b43:	6a 11                	push   $0x11
   11b45:	68 a0 00 00 00       	push   $0xa0
   11b4a:	e8 5f fa ff ff       	call   115ae <outb>
   11b4f:	83 c4 08             	add    $0x8,%esp
    outb( PIC1_ICW2 , IRQ_PIC_START + 8 ); 
   11b52:	6a 28                	push   $0x28
   11b54:	68 a1 00 00 00       	push   $0xa1
   11b59:	e8 50 fa ff ff       	call   115ae <outb>
   11b5e:	83 c4 08             	add    $0x8,%esp
    outb( PIC1_ICW3 , 2 );
   11b61:	6a 02                	push   $0x2
   11b63:	68 a1 00 00 00       	push   $0xa1
   11b68:	e8 41 fa ff ff       	call   115ae <outb>
   11b6d:	83 c4 08             	add    $0x8,%esp
    outb( PIC1_ICW4 , PIC_ICW4_8086 ); 
   11b70:	6a 01                	push   $0x1
   11b72:	68 a1 00 00 00       	push   $0xa1
   11b77:	e8 32 fa ff ff       	call   115ae <outb>
   11b7c:	83 c4 08             	add    $0x8,%esp

    outb( PIC0_IMR ,  0xff & ~( 1 << 2 ));
   11b7f:	68 fb 00 00 00       	push   $0xfb
   11b84:	6a 21                	push   $0x21
   11b86:	e8 23 fa ff ff       	call   115ae <outb>
   11b8b:	83 c4 08             	add    $0x8,%esp
    outb( PIC1_IMR , 0xff );
   11b8e:	68 ff 00 00 00       	push   $0xff
   11b93:	68 a1 00 00 00       	push   $0xa1
   11b98:	e8 11 fa ff ff       	call   115ae <outb>
   11b9d:	83 c4 08             	add    $0x8,%esp
}
   11ba0:	90                   	nop
   11ba1:	c9                   	leave  
   11ba2:	c3                   	ret    

00011ba3 <irq_init>:


static gate_desc_t idt_table[IDT_TABLE_NR];

void irq_init( void ){
   11ba3:	55                   	push   %ebp
   11ba4:	89 e5                	mov    %esp,%ebp
   11ba6:	83 ec 18             	sub    $0x18,%esp
    for( int i = 0 ; i < IDT_TABLE_NR ; i ++ ){
   11ba9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11bb0:	eb 25                	jmp    11bd7 <irq_init+0x34>
        gate_desc_set( idt_table + i , KERNEL_SELECTOR_CS , (uint32_t)exception_handler_unknown
   11bb2:	ba 2b 00 01 00       	mov    $0x1002b,%edx
   11bb7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11bba:	c1 e0 03             	shl    $0x3,%eax
   11bbd:	05 e0 89 01 00       	add    $0x189e0,%eax
   11bc2:	68 00 8e 00 00       	push   $0x8e00
   11bc7:	52                   	push   %edx
   11bc8:	6a 08                	push   $0x8
   11bca:	50                   	push   %eax
   11bcb:	e8 a2 f8 ff ff       	call   11472 <gate_desc_set>
   11bd0:	83 c4 10             	add    $0x10,%esp
    for( int i = 0 ; i < IDT_TABLE_NR ; i ++ ){
   11bd3:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11bd7:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   11bdb:	7e d5                	jle    11bb2 <irq_init+0xf>
         , GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_INT ); 
    }
    irq_install( IRQ0_DE ,  (irq_handler_t)exception_handler_divider );
   11bdd:	83 ec 08             	sub    $0x8,%esp
   11be0:	68 4a 00 01 00       	push   $0x1004a
   11be5:	6a 00                	push   $0x0
   11be7:	e8 77 01 00 00       	call   11d63 <irq_install>
   11bec:	83 c4 10             	add    $0x10,%esp
    irq_install( IRQ1_DB ,  (irq_handler_t)exception_handler_Debug );
   11bef:	83 ec 08             	sub    $0x8,%esp
   11bf2:	68 69 00 01 00       	push   $0x10069
   11bf7:	6a 01                	push   $0x1
   11bf9:	e8 65 01 00 00       	call   11d63 <irq_install>
   11bfe:	83 c4 10             	add    $0x10,%esp
    irq_install( IRQ2_NMI ,  (irq_handler_t)exception_handler_NMI );
   11c01:	83 ec 08             	sub    $0x8,%esp
   11c04:	68 88 00 01 00       	push   $0x10088
   11c09:	6a 02                	push   $0x2
   11c0b:	e8 53 01 00 00       	call   11d63 <irq_install>
   11c10:	83 c4 10             	add    $0x10,%esp
    irq_install( IRQ3_BP ,  (irq_handler_t)exception_handler_breakpoint );
   11c13:	83 ec 08             	sub    $0x8,%esp
   11c16:	68 a7 00 01 00       	push   $0x100a7
   11c1b:	6a 03                	push   $0x3
   11c1d:	e8 41 01 00 00       	call   11d63 <irq_install>
   11c22:	83 c4 10             	add    $0x10,%esp
    irq_install( IRQ4_OF ,  (irq_handler_t)exception_handler_overflow );
   11c25:	83 ec 08             	sub    $0x8,%esp
   11c28:	68 c6 00 01 00       	push   $0x100c6
   11c2d:	6a 04                	push   $0x4
   11c2f:	e8 2f 01 00 00       	call   11d63 <irq_install>
   11c34:	83 c4 10             	add    $0x10,%esp
    irq_install( IRQ5_BR ,  (irq_handler_t)exception_handler_bound_range_exceeded );
   11c37:	83 ec 08             	sub    $0x8,%esp
   11c3a:	68 e5 00 01 00       	push   $0x100e5
   11c3f:	6a 05                	push   $0x5
   11c41:	e8 1d 01 00 00       	call   11d63 <irq_install>
   11c46:	83 c4 10             	add    $0x10,%esp
    irq_install( IRQ6_UD ,  (irq_handler_t)exception_handler_invalid_opcode );
   11c49:	83 ec 08             	sub    $0x8,%esp
   11c4c:	68 04 01 01 00       	push   $0x10104
   11c51:	6a 06                	push   $0x6
   11c53:	e8 0b 01 00 00       	call   11d63 <irq_install>
   11c58:	83 c4 10             	add    $0x10,%esp
    irq_install( IRQ7_NM ,  (irq_handler_t)exception_handler_device_not_available );
   11c5b:	83 ec 08             	sub    $0x8,%esp
   11c5e:	68 23 01 01 00       	push   $0x10123
   11c63:	6a 07                	push   $0x7
   11c65:	e8 f9 00 00 00       	call   11d63 <irq_install>
   11c6a:	83 c4 10             	add    $0x10,%esp
    irq_install( IRQ8_DF ,  (irq_handler_t)exception_handler_double_fault );
   11c6d:	83 ec 08             	sub    $0x8,%esp
   11c70:	68 42 01 01 00       	push   $0x10142
   11c75:	6a 08                	push   $0x8
   11c77:	e8 e7 00 00 00       	call   11d63 <irq_install>
   11c7c:	83 c4 10             	add    $0x10,%esp
    irq_install( IRQ10_TS ,  (irq_handler_t)exception_handler_invalid_tss );
   11c7f:	83 ec 08             	sub    $0x8,%esp
   11c82:	68 5f 01 01 00       	push   $0x1015f
   11c87:	6a 0a                	push   $0xa
   11c89:	e8 d5 00 00 00       	call   11d63 <irq_install>
   11c8e:	83 c4 10             	add    $0x10,%esp
    irq_install( IRQ11_NP ,  (irq_handler_t)exception_handler_segment_not_present );
   11c91:	83 ec 08             	sub    $0x8,%esp
   11c94:	68 7c 01 01 00       	push   $0x1017c
   11c99:	6a 0b                	push   $0xb
   11c9b:	e8 c3 00 00 00       	call   11d63 <irq_install>
   11ca0:	83 c4 10             	add    $0x10,%esp
    irq_install( IRQ12_SS ,  (irq_handler_t)exception_handler_stack_segment_fault );
   11ca3:	83 ec 08             	sub    $0x8,%esp
   11ca6:	68 99 01 01 00       	push   $0x10199
   11cab:	6a 0c                	push   $0xc
   11cad:	e8 b1 00 00 00       	call   11d63 <irq_install>
   11cb2:	83 c4 10             	add    $0x10,%esp
    irq_install( IRQ13_GP ,  (irq_handler_t)exception_handler_general_protection );
   11cb5:	83 ec 08             	sub    $0x8,%esp
   11cb8:	68 b6 01 01 00       	push   $0x101b6
   11cbd:	6a 0d                	push   $0xd
   11cbf:	e8 9f 00 00 00       	call   11d63 <irq_install>
   11cc4:	83 c4 10             	add    $0x10,%esp
    irq_install( IRQ14_FP ,  (irq_handler_t)exception_handler_page_fault );
   11cc7:	83 ec 08             	sub    $0x8,%esp
   11cca:	68 d3 01 01 00       	push   $0x101d3
   11ccf:	6a 0e                	push   $0xe
   11cd1:	e8 8d 00 00 00       	call   11d63 <irq_install>
   11cd6:	83 c4 10             	add    $0x10,%esp
    irq_install( IRQ16_MF ,  (irq_handler_t)exception_handler_fpu_error );
   11cd9:	83 ec 08             	sub    $0x8,%esp
   11cdc:	68 f0 01 01 00       	push   $0x101f0
   11ce1:	6a 10                	push   $0x10
   11ce3:	e8 7b 00 00 00       	call   11d63 <irq_install>
   11ce8:	83 c4 10             	add    $0x10,%esp
    irq_install( IRQ17_AC ,  (irq_handler_t)exception_handler_alignment_check );
   11ceb:	83 ec 08             	sub    $0x8,%esp
   11cee:	68 0f 02 01 00       	push   $0x1020f
   11cf3:	6a 11                	push   $0x11
   11cf5:	e8 69 00 00 00       	call   11d63 <irq_install>
   11cfa:	83 c4 10             	add    $0x10,%esp
    irq_install( IRQ18_MC ,  (irq_handler_t)exception_handler_machine_check );
   11cfd:	83 ec 08             	sub    $0x8,%esp
   11d00:	68 2c 02 01 00       	push   $0x1022c
   11d05:	6a 12                	push   $0x12
   11d07:	e8 57 00 00 00       	call   11d63 <irq_install>
   11d0c:	83 c4 10             	add    $0x10,%esp
    irq_install( IRQ19_XM ,  (irq_handler_t)exception_handler_simd_exception );
   11d0f:	83 ec 08             	sub    $0x8,%esp
   11d12:	68 4b 02 01 00       	push   $0x1024b
   11d17:	6a 13                	push   $0x13
   11d19:	e8 45 00 00 00       	call   11d63 <irq_install>
   11d1e:	83 c4 10             	add    $0x10,%esp
    irq_install( IRQ20_VE ,  (irq_handler_t)exception_handler_virtualization_exception );
   11d21:	83 ec 08             	sub    $0x8,%esp
   11d24:	68 6a 02 01 00       	push   $0x1026a
   11d29:	6a 14                	push   $0x14
   11d2b:	e8 33 00 00 00       	call   11d63 <irq_install>
   11d30:	83 c4 10             	add    $0x10,%esp
    irq_install( IRQ21_CP ,  (irq_handler_t)exception_handler_control_protection_exception );
   11d33:	83 ec 08             	sub    $0x8,%esp
   11d36:	68 89 02 01 00       	push   $0x10289
   11d3b:	6a 15                	push   $0x15
   11d3d:	e8 21 00 00 00       	call   11d63 <irq_install>
   11d42:	83 c4 10             	add    $0x10,%esp

    lidt( (uint32_t)idt_table , sizeof(idt_table) );
   11d45:	b8 e0 89 01 00       	mov    $0x189e0,%eax
   11d4a:	83 ec 08             	sub    $0x8,%esp
   11d4d:	68 00 04 00 00       	push   $0x400
   11d52:	50                   	push   %eax
   11d53:	e8 75 f8 ff ff       	call   115cd <lidt>
   11d58:	83 c4 10             	add    $0x10,%esp
    init_pic();
   11d5b:	e8 b0 fd ff ff       	call   11b10 <init_pic>
}
   11d60:	90                   	nop
   11d61:	c9                   	leave  
   11d62:	c3                   	ret    

00011d63 <irq_install>:

int irq_install( int irq_num , irq_handler_t handler ){
   11d63:	55                   	push   %ebp
   11d64:	89 e5                	mov    %esp,%ebp
   11d66:	83 ec 08             	sub    $0x8,%esp
    if ( irq_num >= IDT_TABLE_NR ){
   11d69:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   11d6d:	7e 07                	jle    11d76 <irq_install+0x13>
        return -1;
   11d6f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11d74:	eb 25                	jmp    11d9b <irq_install+0x38>
    }

    gate_desc_set( idt_table + irq_num , KERNEL_SELECTOR_CS , (uint32_t)handler 
   11d76:	8b 45 0c             	mov    0xc(%ebp),%eax
   11d79:	8b 55 08             	mov    0x8(%ebp),%edx
   11d7c:	c1 e2 03             	shl    $0x3,%edx
   11d7f:	81 c2 e0 89 01 00    	add    $0x189e0,%edx
   11d85:	68 00 8e 00 00       	push   $0x8e00
   11d8a:	50                   	push   %eax
   11d8b:	6a 08                	push   $0x8
   11d8d:	52                   	push   %edx
   11d8e:	e8 df f6 ff ff       	call   11472 <gate_desc_set>
   11d93:	83 c4 10             	add    $0x10,%esp
     , GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_INT );

     return 0;
   11d96:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11d9b:	c9                   	leave  
   11d9c:	c3                   	ret    

00011d9d <irq_enable>:

void irq_enable( int irq_num ){
   11d9d:	55                   	push   %ebp
   11d9e:	89 e5                	mov    %esp,%ebp
   11da0:	53                   	push   %ebx
   11da1:	83 ec 10             	sub    $0x10,%esp
    if( irq_num < IRQ_PIC_START ){
   11da4:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   11da8:	7e 6d                	jle    11e17 <irq_enable+0x7a>
        return ;
    }

    irq_num -= IRQ_PIC_START;
   11daa:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if( irq_num < 8 ){
   11dae:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11db2:	7f 32                	jg     11de6 <irq_enable+0x49>
        uint8_t mask = inb( PIC0_IMR ) & ~( 1 << irq_num );
   11db4:	6a 21                	push   $0x21
   11db6:	e8 d6 f7 ff ff       	call   11591 <inb>
   11dbb:	83 c4 04             	add    $0x4,%esp
   11dbe:	89 c2                	mov    %eax,%edx
   11dc0:	8b 45 08             	mov    0x8(%ebp),%eax
   11dc3:	bb 01 00 00 00       	mov    $0x1,%ebx
   11dc8:	89 c1                	mov    %eax,%ecx
   11dca:	d3 e3                	shl    %cl,%ebx
   11dcc:	89 d8                	mov    %ebx,%eax
   11dce:	f7 d0                	not    %eax
   11dd0:	21 d0                	and    %edx,%eax
   11dd2:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb( PIC0_IMR , mask );
   11dd5:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   11dd9:	50                   	push   %eax
   11dda:	6a 21                	push   $0x21
   11ddc:	e8 cd f7 ff ff       	call   115ae <outb>
   11de1:	83 c4 08             	add    $0x8,%esp
   11de4:	eb 32                	jmp    11e18 <irq_enable+0x7b>
    }
    else{
        uint8_t mask = inb( PIC1_IMR ) & ~( 1 << ( irq_num % 8 ) );
   11de6:	68 a1 00 00 00       	push   $0xa1
   11deb:	e8 a1 f7 ff ff       	call   11591 <inb>
   11df0:	83 c4 04             	add    $0x4,%esp
   11df3:	89 c3                	mov    %eax,%ebx
   11df5:	8b 45 08             	mov    0x8(%ebp),%eax
   11df8:	99                   	cltd   
   11df9:	c1 ea 1d             	shr    $0x1d,%edx
   11dfc:	01 d0                	add    %edx,%eax
   11dfe:	83 e0 07             	and    $0x7,%eax
   11e01:	29 d0                	sub    %edx,%eax
   11e03:	ba 01 00 00 00       	mov    $0x1,%edx
   11e08:	89 c1                	mov    %eax,%ecx
   11e0a:	d3 e2                	shl    %cl,%edx
   11e0c:	89 d0                	mov    %edx,%eax
   11e0e:	f7 d0                	not    %eax
   11e10:	21 d8                	and    %ebx,%eax
   11e12:	88 45 fb             	mov    %al,-0x5(%ebp)
   11e15:	eb 01                	jmp    11e18 <irq_enable+0x7b>
        return ;
   11e17:	90                   	nop
    }
}
   11e18:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11e1b:	c9                   	leave  
   11e1c:	c3                   	ret    

00011e1d <irq_disable>:

void irq_disable( int irq_num ){
   11e1d:	55                   	push   %ebp
   11e1e:	89 e5                	mov    %esp,%ebp
   11e20:	53                   	push   %ebx
   11e21:	83 ec 10             	sub    $0x10,%esp
    if( irq_num < IRQ_PIC_START ){
   11e24:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   11e28:	7e 69                	jle    11e93 <irq_disable+0x76>
        return ;
    }

    irq_num -= IRQ_PIC_START;
   11e2a:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if( irq_num < 8 ){
   11e2e:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11e32:	7f 30                	jg     11e64 <irq_disable+0x47>
        uint8_t mask = inb( PIC0_IMR ) | ( 1 << irq_num );
   11e34:	6a 21                	push   $0x21
   11e36:	e8 56 f7 ff ff       	call   11591 <inb>
   11e3b:	83 c4 04             	add    $0x4,%esp
   11e3e:	89 c3                	mov    %eax,%ebx
   11e40:	8b 45 08             	mov    0x8(%ebp),%eax
   11e43:	ba 01 00 00 00       	mov    $0x1,%edx
   11e48:	89 c1                	mov    %eax,%ecx
   11e4a:	d3 e2                	shl    %cl,%edx
   11e4c:	89 d0                	mov    %edx,%eax
   11e4e:	09 d8                	or     %ebx,%eax
   11e50:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb( PIC0_IMR , mask );
   11e53:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   11e57:	50                   	push   %eax
   11e58:	6a 21                	push   $0x21
   11e5a:	e8 4f f7 ff ff       	call   115ae <outb>
   11e5f:	83 c4 08             	add    $0x8,%esp
   11e62:	eb 30                	jmp    11e94 <irq_disable+0x77>
    }
    else{
        uint8_t mask = inb( PIC1_IMR ) | ( 1 << ( irq_num % 8 ) );
   11e64:	68 a1 00 00 00       	push   $0xa1
   11e69:	e8 23 f7 ff ff       	call   11591 <inb>
   11e6e:	83 c4 04             	add    $0x4,%esp
   11e71:	89 c3                	mov    %eax,%ebx
   11e73:	8b 45 08             	mov    0x8(%ebp),%eax
   11e76:	99                   	cltd   
   11e77:	c1 ea 1d             	shr    $0x1d,%edx
   11e7a:	01 d0                	add    %edx,%eax
   11e7c:	83 e0 07             	and    $0x7,%eax
   11e7f:	29 d0                	sub    %edx,%eax
   11e81:	ba 01 00 00 00       	mov    $0x1,%edx
   11e86:	89 c1                	mov    %eax,%ecx
   11e88:	d3 e2                	shl    %cl,%edx
   11e8a:	89 d0                	mov    %edx,%eax
   11e8c:	09 d8                	or     %ebx,%eax
   11e8e:	88 45 fb             	mov    %al,-0x5(%ebp)
   11e91:	eb 01                	jmp    11e94 <irq_disable+0x77>
        return ;
   11e93:	90                   	nop
    }
}
   11e94:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11e97:	c9                   	leave  
   11e98:	c3                   	ret    

00011e99 <irq_disable_global>:

void irq_disable_global( void ){
   11e99:	55                   	push   %ebp
   11e9a:	89 e5                	mov    %esp,%ebp
    cli();
   11e9c:	e8 e2 f6 ff ff       	call   11583 <cli>
}
   11ea1:	90                   	nop
   11ea2:	5d                   	pop    %ebp
   11ea3:	c3                   	ret    

00011ea4 <irq_enable_global>:

void irq_enable_global( void ){
   11ea4:	55                   	push   %ebp
   11ea5:	89 e5                	mov    %esp,%ebp
    sti();
   11ea7:	e8 de f6 ff ff       	call   1158a <sti>
}
   11eac:	90                   	nop
   11ead:	5d                   	pop    %ebp
   11eae:	c3                   	ret    

00011eaf <pic_send_eoi>:

void pic_send_eoi( int irq_num ){
   11eaf:	55                   	push   %ebp
   11eb0:	89 e5                	mov    %esp,%ebp
    irq_num -= IRQ_PIC_START;
   11eb2:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if( irq_num >= 8 ){
   11eb6:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11eba:	7e 0f                	jle    11ecb <pic_send_eoi+0x1c>
        outb( PIC1_OCW2 , PIC_OCW2_EOI );
   11ebc:	6a 20                	push   $0x20
   11ebe:	68 a0 00 00 00       	push   $0xa0
   11ec3:	e8 e6 f6 ff ff       	call   115ae <outb>
   11ec8:	83 c4 08             	add    $0x8,%esp
    }
    outb( PIC0_OCW2 , PIC_OCW2_EOI );
   11ecb:	6a 20                	push   $0x20
   11ecd:	6a 20                	push   $0x20
   11ecf:	e8 da f6 ff ff       	call   115ae <outb>
   11ed4:	83 c4 08             	add    $0x8,%esp
}
   11ed7:	90                   	nop
   11ed8:	c9                   	leave  
   11ed9:	c3                   	ret    

00011eda <irq_enter_protection>:


irq_state_t irq_enter_protection( void ){
   11eda:	55                   	push   %ebp
   11edb:	89 e5                	mov    %esp,%ebp
   11edd:	83 ec 10             	sub    $0x10,%esp
    irq_state_t state = read_eflags();
   11ee0:	e8 17 f7 ff ff       	call   115fc <read_eflags>
   11ee5:	89 45 fc             	mov    %eax,-0x4(%ebp)
    irq_disable_global();
   11ee8:	e8 ac ff ff ff       	call   11e99 <irq_disable_global>
    return state;
   11eed:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11ef0:	c9                   	leave  
   11ef1:	c3                   	ret    

00011ef2 <irq_leave_protection>:
void irq_leave_protection( irq_state_t state ){
   11ef2:	55                   	push   %ebp
   11ef3:	89 e5                	mov    %esp,%ebp
    write_eflags( state );
   11ef5:	ff 75 08             	pushl  0x8(%ebp)
   11ef8:	e8 0f f7 ff ff       	call   1160c <write_eflags>
   11efd:	83 c4 04             	add    $0x4,%esp
   11f00:	90                   	nop
   11f01:	c9                   	leave  
   11f02:	c3                   	ret    

00011f03 <outb>:
static inline void outb( uint16_t port , uint8_t data ){
   11f03:	55                   	push   %ebp
   11f04:	89 e5                	mov    %esp,%ebp
   11f06:	83 ec 08             	sub    $0x8,%esp
   11f09:	8b 55 08             	mov    0x8(%ebp),%edx
   11f0c:	8b 45 0c             	mov    0xc(%ebp),%eax
   11f0f:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   11f13:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v] , %[p]"::[p]"d"(port) , [v]"a"(data));
   11f16:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11f1a:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11f1e:	ee                   	out    %al,(%dx)
}
   11f1f:	90                   	nop
   11f20:	c9                   	leave  
   11f21:	c3                   	ret    

00011f22 <do_handler_time>:
#include"os_cfg.h"
#include"comm/cpu_instr.h"
#include"tools/log.h"
#include"core/task.h"
static uint32_t sys_tick;
void do_handler_time( exception_frame_t * frame ){
   11f22:	55                   	push   %ebp
   11f23:	89 e5                	mov    %esp,%ebp
   11f25:	83 ec 08             	sub    $0x8,%esp
    sys_tick ++;
   11f28:	a1 e0 8d 01 00       	mov    0x18de0,%eax
   11f2d:	83 c0 01             	add    $0x1,%eax
   11f30:	a3 e0 8d 01 00       	mov    %eax,0x18de0
    pic_send_eoi( IRQ0_TIMER );
   11f35:	83 ec 0c             	sub    $0xc,%esp
   11f38:	6a 20                	push   $0x20
   11f3a:	e8 70 ff ff ff       	call   11eaf <pic_send_eoi>
   11f3f:	83 c4 10             	add    $0x10,%esp
    task_time_tick();
   11f42:	e8 4c f2 ff ff       	call   11193 <task_time_tick>
}
   11f47:	90                   	nop
   11f48:	c9                   	leave  
   11f49:	c3                   	ret    

00011f4a <init_pit>:

static void init_pit( void ){
   11f4a:	55                   	push   %ebp
   11f4b:	89 e5                	mov    %esp,%ebp
   11f4d:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = PIT_OSC_FREQ * OS_TICKS_MS / 1000;
   11f50:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)
    outb( PIT_COMMAND_MODE_PORT , PIT_CHANNEL | PIT_LOAD_LOHI | PIT_MODE3 );
   11f57:	6a 36                	push   $0x36
   11f59:	6a 43                	push   $0x43
   11f5b:	e8 a3 ff ff ff       	call   11f03 <outb>
   11f60:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT , reload_count & 0xff );
   11f63:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11f66:	0f b6 c0             	movzbl %al,%eax
   11f69:	50                   	push   %eax
   11f6a:	6a 40                	push   $0x40
   11f6c:	e8 92 ff ff ff       	call   11f03 <outb>
   11f71:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT , ( reload_count >> 8 ) & 0xff );
   11f74:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11f77:	c1 e8 08             	shr    $0x8,%eax
   11f7a:	0f b6 c0             	movzbl %al,%eax
   11f7d:	50                   	push   %eax
   11f7e:	6a 40                	push   $0x40
   11f80:	e8 7e ff ff ff       	call   11f03 <outb>
   11f85:	83 c4 08             	add    $0x8,%esp
    irq_install( IRQ0_TIMER , (irq_handler_t)exception_handler_time );
   11f88:	83 ec 08             	sub    $0x8,%esp
   11f8b:	68 a6 02 01 00       	push   $0x102a6
   11f90:	6a 20                	push   $0x20
   11f92:	e8 cc fd ff ff       	call   11d63 <irq_install>
   11f97:	83 c4 10             	add    $0x10,%esp
    irq_enable( IRQ0_TIMER );
   11f9a:	83 ec 0c             	sub    $0xc,%esp
   11f9d:	6a 20                	push   $0x20
   11f9f:	e8 f9 fd ff ff       	call   11d9d <irq_enable>
   11fa4:	83 c4 10             	add    $0x10,%esp
}
   11fa7:	90                   	nop
   11fa8:	c9                   	leave  
   11fa9:	c3                   	ret    

00011faa <time_init>:

void time_init( void ){
   11faa:	55                   	push   %ebp
   11fab:	89 e5                	mov    %esp,%ebp
   11fad:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   11fb0:	c7 05 e0 8d 01 00 00 	movl   $0x0,0x18de0
   11fb7:	00 00 00 
    init_pit();
   11fba:	e8 8b ff ff ff       	call   11f4a <init_pit>
   11fbf:	90                   	nop
   11fc0:	c9                   	leave  
   11fc1:	c3                   	ret    

00011fc2 <kernel_init>:
#include"tools/list.h"
#include"ipc/sem.h"
#include"core/memory.h"


void kernel_init( boot_info_t * boot_info ){
   11fc2:	55                   	push   %ebp
   11fc3:	89 e5                	mov    %esp,%ebp
   11fc5:	83 ec 08             	sub    $0x8,%esp
    ASSERT(boot_info -> ram_region_count != 0 );
   11fc8:	8b 45 08             	mov    0x8(%ebp),%eax
   11fcb:	8b 40 50             	mov    0x50(%eax),%eax
   11fce:	85 c0                	test   %eax,%eax
   11fd0:	75 19                	jne    11feb <kernel_init+0x29>
   11fd2:	68 64 35 01 00       	push   $0x13564
   11fd7:	68 18 36 01 00       	push   $0x13618
   11fdc:	6a 11                	push   $0x11
   11fde:	68 88 35 01 00       	push   $0x13588
   11fe3:	e8 b7 0a 00 00       	call   12a9f <pannic>
   11fe8:	83 c4 10             	add    $0x10,%esp
    cpu_init();
   11feb:	e8 64 f4 ff ff       	call   11454 <cpu_init>
    log_init();
   11ff0:	e8 14 0d 00 00       	call   12d09 <log_init>
    memory_init( boot_info );
   11ff5:	83 ec 0c             	sub    $0xc,%esp
   11ff8:	ff 75 08             	pushl  0x8(%ebp)
   11ffb:	e8 17 e7 ff ff       	call   10717 <memory_init>
   12000:	83 c4 10             	add    $0x10,%esp
    irq_init();
   12003:	e8 9b fb ff ff       	call   11ba3 <irq_init>
    time_init();
   12008:	e8 9d ff ff ff       	call   11faa <time_init>
    task_manager_init();
   1200d:	e8 74 ef ff ff       	call   10f86 <task_manager_init>
}
   12012:	90                   	nop
   12013:	c9                   	leave  
   12014:	c3                   	ret    

00012015 <move_to_first_task>:

void move_to_first_task( void ){
   12015:	55                   	push   %ebp
   12016:	89 e5                	mov    %esp,%ebp
   12018:	56                   	push   %esi
   12019:	53                   	push   %ebx
   1201a:	83 ec 10             	sub    $0x10,%esp
    task_t * curr = task_current();
   1201d:	e8 ab f0 ff ff       	call   110cd <task_current>
   12022:	89 45 f4             	mov    %eax,-0xc(%ebp)
    ASSERT( curr != 0 );
   12025:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   12029:	75 19                	jne    12044 <move_to_first_task+0x2f>
   1202b:	68 c5 35 01 00       	push   $0x135c5
   12030:	68 24 36 01 00       	push   $0x13624
   12035:	6a 1c                	push   $0x1c
   12037:	68 88 35 01 00       	push   $0x13588
   1203c:	e8 5e 0a 00 00       	call   12a9f <pannic>
   12041:	83 c4 10             	add    $0x10,%esp
    tss_t * tss = &(curr -> tss );
   12044:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12047:	83 c0 48             	add    $0x48,%eax
   1204a:	89 45 f0             	mov    %eax,-0x10(%ebp)
        "push %[ss]\n\t"
        "push %[esp]\n\t"
        "push %[eflags]\n\t"
        "push %[cs]\n\t"
        "push %[eip]\n\t"
        "iret"::[ss]"r"(tss->ss) , [esp]"r"(tss->esp) ,
   1204d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12050:	8b 40 50             	mov    0x50(%eax),%eax
   12053:	8b 55 f0             	mov    -0x10(%ebp),%edx
   12056:	8b 52 38             	mov    0x38(%edx),%edx
        [eflags]"r"(tss->eflags),[cs]"r"(tss->cs),[eip]"r"(tss->eip)
   12059:	8b 4d f0             	mov    -0x10(%ebp),%ecx
   1205c:	8b 49 24             	mov    0x24(%ecx),%ecx
   1205f:	8b 5d f0             	mov    -0x10(%ebp),%ebx
   12062:	8b 5b 4c             	mov    0x4c(%ebx),%ebx
   12065:	8b 75 f0             	mov    -0x10(%ebp),%esi
   12068:	8b 76 20             	mov    0x20(%esi),%esi
    __asm__ __volatile__(
   1206b:	50                   	push   %eax
   1206c:	52                   	push   %edx
   1206d:	51                   	push   %ecx
   1206e:	53                   	push   %ebx
   1206f:	56                   	push   %esi
   12070:	cf                   	iret   
    );
}
   12071:	90                   	nop
   12072:	8d 65 f8             	lea    -0x8(%ebp),%esp
   12075:	5b                   	pop    %ebx
   12076:	5e                   	pop    %esi
   12077:	5d                   	pop    %ebp
   12078:	c3                   	ret    

00012079 <init_main>:

void init_main( void ){
   12079:	55                   	push   %ebp
   1207a:	89 e5                	mov    %esp,%ebp
   1207c:	83 ec 08             	sub    $0x8,%esp
    log_printf("Fu Junjie is loading the kernel....");
   1207f:	83 ec 0c             	sub    $0xc,%esp
   12082:	68 d0 35 01 00       	push   $0x135d0
   12087:	e8 1a 0d 00 00       	call   12da6 <log_printf>
   1208c:	83 c4 10             	add    $0x10,%esp
    log_printf("Version: %s" , OS_VERSION);
   1208f:	83 ec 08             	sub    $0x8,%esp
   12092:	68 f4 35 01 00       	push   $0x135f4
   12097:	68 fe 35 01 00       	push   $0x135fe
   1209c:	e8 05 0d 00 00       	call   12da6 <log_printf>
   120a1:	83 c4 10             	add    $0x10,%esp
    log_printf("%d %d %x %c" , -123 , 123456 , 12345 , 'a' );
   120a4:	83 ec 0c             	sub    $0xc,%esp
   120a7:	6a 61                	push   $0x61
   120a9:	68 39 30 00 00       	push   $0x3039
   120ae:	68 40 e2 01 00       	push   $0x1e240
   120b3:	6a 85                	push   $0xffffff85
   120b5:	68 0a 36 01 00       	push   $0x1360a
   120ba:	e8 e7 0c 00 00       	call   12da6 <log_printf>
   120bf:	83 c4 20             	add    $0x20,%esp
    task_first_init();
   120c2:	e8 d2 ed ff ff       	call   10e99 <task_first_init>
    move_to_first_task();
   120c7:	e8 49 ff ff ff       	call   12015 <move_to_first_task>
   120cc:	90                   	nop
   120cd:	c9                   	leave  
   120ce:	c3                   	ret    

000120cf <list_count>:
static inline int list_count( list_t * list ){
   120cf:	55                   	push   %ebp
   120d0:	89 e5                	mov    %esp,%ebp
    return list -> count;
   120d2:	8b 45 08             	mov    0x8(%ebp),%eax
   120d5:	8b 40 08             	mov    0x8(%eax),%eax
}
   120d8:	5d                   	pop    %ebp
   120d9:	c3                   	ret    

000120da <mutex_init>:
#include"ipc/mutex.h"
#include"cpu/irq.h"
void mutex_init( mutex_t * mutex ){
   120da:	55                   	push   %ebp
   120db:	89 e5                	mov    %esp,%ebp
   120dd:	83 ec 08             	sub    $0x8,%esp
    mutex->locked_count = 0;
   120e0:	8b 45 08             	mov    0x8(%ebp),%eax
   120e3:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    mutex->owner = (task_t *)0;
   120ea:	8b 45 08             	mov    0x8(%ebp),%eax
   120ed:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    list_init(&mutex->wait_list);
   120f3:	8b 45 08             	mov    0x8(%ebp),%eax
   120f6:	83 c0 08             	add    $0x8,%eax
   120f9:	83 ec 0c             	sub    $0xc,%esp
   120fc:	50                   	push   %eax
   120fd:	e8 e6 09 00 00       	call   12ae8 <list_init>
   12102:	83 c4 10             	add    $0x10,%esp
}
   12105:	90                   	nop
   12106:	c9                   	leave  
   12107:	c3                   	ret    

00012108 <mutex_lock>:

void mutex_lock( mutex_t * mutex ){
   12108:	55                   	push   %ebp
   12109:	89 e5                	mov    %esp,%ebp
   1210b:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   1210e:	e8 c7 fd ff ff       	call   11eda <irq_enter_protection>
   12113:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t * curr = task_current();
   12116:	e8 b2 ef ff ff       	call   110cd <task_current>
   1211b:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if( mutex->locked_count == 0 ){
   1211e:	8b 45 08             	mov    0x8(%ebp),%eax
   12121:	8b 40 04             	mov    0x4(%eax),%eax
   12124:	85 c0                	test   %eax,%eax
   12126:	75 19                	jne    12141 <mutex_lock+0x39>
        mutex->locked_count++;
   12128:	8b 45 08             	mov    0x8(%ebp),%eax
   1212b:	8b 40 04             	mov    0x4(%eax),%eax
   1212e:	8d 50 01             	lea    0x1(%eax),%edx
   12131:	8b 45 08             	mov    0x8(%ebp),%eax
   12134:	89 50 04             	mov    %edx,0x4(%eax)
        mutex->owner = curr;
   12137:	8b 45 08             	mov    0x8(%ebp),%eax
   1213a:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1213d:	89 10                	mov    %edx,(%eax)
   1213f:	eb 47                	jmp    12188 <mutex_lock+0x80>
    }
    else if( mutex->owner == curr ){
   12141:	8b 45 08             	mov    0x8(%ebp),%eax
   12144:	8b 00                	mov    (%eax),%eax
   12146:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   12149:	75 11                	jne    1215c <mutex_lock+0x54>
        mutex->locked_count++;
   1214b:	8b 45 08             	mov    0x8(%ebp),%eax
   1214e:	8b 40 04             	mov    0x4(%eax),%eax
   12151:	8d 50 01             	lea    0x1(%eax),%edx
   12154:	8b 45 08             	mov    0x8(%ebp),%eax
   12157:	89 50 04             	mov    %edx,0x4(%eax)
   1215a:	eb 2c                	jmp    12188 <mutex_lock+0x80>
    }
    else{
        task_set_block(curr);
   1215c:	83 ec 0c             	sub    $0xc,%esp
   1215f:	ff 75 f0             	pushl  -0x10(%ebp)
   12162:	e8 03 ef ff ff       	call   1106a <task_set_block>
   12167:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&mutex->wait_list , &curr->wait_node );
   1216a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1216d:	8d 50 38             	lea    0x38(%eax),%edx
   12170:	8b 45 08             	mov    0x8(%ebp),%eax
   12173:	83 c0 08             	add    $0x8,%eax
   12176:	83 ec 08             	sub    $0x8,%esp
   12179:	52                   	push   %edx
   1217a:	50                   	push   %eax
   1217b:	e8 ec 09 00 00       	call   12b6c <list_insert_last>
   12180:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   12183:	e8 b0 ef ff ff       	call   11138 <task_dispatch>
    }

    irq_leave_protection(state);
   12188:	83 ec 0c             	sub    $0xc,%esp
   1218b:	ff 75 f4             	pushl  -0xc(%ebp)
   1218e:	e8 5f fd ff ff       	call   11ef2 <irq_leave_protection>
   12193:	83 c4 10             	add    $0x10,%esp
}
   12196:	90                   	nop
   12197:	c9                   	leave  
   12198:	c3                   	ret    

00012199 <mutex_unlock>:

void mutex_unlock( mutex_t * mutex ){
   12199:	55                   	push   %ebp
   1219a:	89 e5                	mov    %esp,%ebp
   1219c:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   1219f:	e8 36 fd ff ff       	call   11eda <irq_enter_protection>
   121a4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    task_t * curr = task_current();
   121a7:	e8 21 ef ff ff       	call   110cd <task_current>
   121ac:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if( mutex-> owner == curr ){
   121af:	8b 45 08             	mov    0x8(%ebp),%eax
   121b2:	8b 00                	mov    (%eax),%eax
   121b4:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   121b7:	0f 85 88 00 00 00    	jne    12245 <mutex_unlock+0xac>
        if( --mutex->locked_count == 0 ){
   121bd:	8b 45 08             	mov    0x8(%ebp),%eax
   121c0:	8b 40 04             	mov    0x4(%eax),%eax
   121c3:	8d 50 ff             	lea    -0x1(%eax),%edx
   121c6:	8b 45 08             	mov    0x8(%ebp),%eax
   121c9:	89 50 04             	mov    %edx,0x4(%eax)
   121cc:	8b 45 08             	mov    0x8(%ebp),%eax
   121cf:	8b 40 04             	mov    0x4(%eax),%eax
   121d2:	85 c0                	test   %eax,%eax
   121d4:	75 6f                	jne    12245 <mutex_unlock+0xac>
            mutex->owner = (task_t *)0;
   121d6:	8b 45 08             	mov    0x8(%ebp),%eax
   121d9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

            if( list_count(&mutex->wait_list) ){
   121df:	8b 45 08             	mov    0x8(%ebp),%eax
   121e2:	83 c0 08             	add    $0x8,%eax
   121e5:	83 ec 0c             	sub    $0xc,%esp
   121e8:	50                   	push   %eax
   121e9:	e8 e1 fe ff ff       	call   120cf <list_count>
   121ee:	83 c4 10             	add    $0x10,%esp
   121f1:	85 c0                	test   %eax,%eax
   121f3:	74 50                	je     12245 <mutex_unlock+0xac>
                list_node_t * node = list_remove_first(&mutex->wait_list);
   121f5:	8b 45 08             	mov    0x8(%ebp),%eax
   121f8:	83 c0 08             	add    $0x8,%eax
   121fb:	83 ec 0c             	sub    $0xc,%esp
   121fe:	50                   	push   %eax
   121ff:	e8 cc 09 00 00       	call   12bd0 <list_remove_first>
   12204:	83 c4 10             	add    $0x10,%esp
   12207:	89 45 ec             	mov    %eax,-0x14(%ebp)
                task_t * task = list_node_parent( node , task_t , wait_node );
   1220a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1220e:	74 08                	je     12218 <mutex_unlock+0x7f>
   12210:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12213:	83 e8 38             	sub    $0x38,%eax
   12216:	eb 05                	jmp    1221d <mutex_unlock+0x84>
   12218:	b8 00 00 00 00       	mov    $0x0,%eax
   1221d:	89 45 e8             	mov    %eax,-0x18(%ebp)
                task_set_ready( task );
   12220:	83 ec 0c             	sub    $0xc,%esp
   12223:	ff 75 e8             	pushl  -0x18(%ebp)
   12226:	e8 0b ee ff ff       	call   11036 <task_set_ready>
   1222b:	83 c4 10             	add    $0x10,%esp
                mutex->locked_count = 1;
   1222e:	8b 45 08             	mov    0x8(%ebp),%eax
   12231:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
                mutex->owner = task;
   12238:	8b 45 08             	mov    0x8(%ebp),%eax
   1223b:	8b 55 e8             	mov    -0x18(%ebp),%edx
   1223e:	89 10                	mov    %edx,(%eax)
                task_dispatch();
   12240:	e8 f3 ee ff ff       	call   11138 <task_dispatch>
            }
        }
    }

    irq_leave_protection(state);    
   12245:	83 ec 0c             	sub    $0xc,%esp
   12248:	ff 75 f4             	pushl  -0xc(%ebp)
   1224b:	e8 a2 fc ff ff       	call   11ef2 <irq_leave_protection>
   12250:	83 c4 10             	add    $0x10,%esp
   12253:	90                   	nop
   12254:	c9                   	leave  
   12255:	c3                   	ret    

00012256 <list_count>:
static inline int list_count( list_t * list ){
   12256:	55                   	push   %ebp
   12257:	89 e5                	mov    %esp,%ebp
    return list -> count;
   12259:	8b 45 08             	mov    0x8(%ebp),%eax
   1225c:	8b 40 08             	mov    0x8(%eax),%eax
}
   1225f:	5d                   	pop    %ebp
   12260:	c3                   	ret    

00012261 <sem_init>:
#include"ipc/sem.h"
#include"core/task.h"
#include"cpu/irq.h"
void sem_init( sem_t * sem , int init_count ){
   12261:	55                   	push   %ebp
   12262:	89 e5                	mov    %esp,%ebp
   12264:	83 ec 08             	sub    $0x8,%esp
    sem->count = init_count;
   12267:	8b 45 08             	mov    0x8(%ebp),%eax
   1226a:	8b 55 0c             	mov    0xc(%ebp),%edx
   1226d:	89 10                	mov    %edx,(%eax)
    list_init( &sem->wait_list );
   1226f:	8b 45 08             	mov    0x8(%ebp),%eax
   12272:	83 c0 04             	add    $0x4,%eax
   12275:	83 ec 0c             	sub    $0xc,%esp
   12278:	50                   	push   %eax
   12279:	e8 6a 08 00 00       	call   12ae8 <list_init>
   1227e:	83 c4 10             	add    $0x10,%esp
}
   12281:	90                   	nop
   12282:	c9                   	leave  
   12283:	c3                   	ret    

00012284 <sem_wait>:

void sem_wait( sem_t * sem ){
   12284:	55                   	push   %ebp
   12285:	89 e5                	mov    %esp,%ebp
   12287:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   1228a:	e8 4b fc ff ff       	call   11eda <irq_enter_protection>
   1228f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if( sem->count > 0 ){
   12292:	8b 45 08             	mov    0x8(%ebp),%eax
   12295:	8b 00                	mov    (%eax),%eax
   12297:	85 c0                	test   %eax,%eax
   12299:	7e 0f                	jle    122aa <sem_wait+0x26>
        sem->count -- ;
   1229b:	8b 45 08             	mov    0x8(%ebp),%eax
   1229e:	8b 00                	mov    (%eax),%eax
   122a0:	8d 50 ff             	lea    -0x1(%eax),%edx
   122a3:	8b 45 08             	mov    0x8(%ebp),%eax
   122a6:	89 10                	mov    %edx,(%eax)
   122a8:	eb 34                	jmp    122de <sem_wait+0x5a>
    }
    else{
        task_t * curr = task_current();
   122aa:	e8 1e ee ff ff       	call   110cd <task_current>
   122af:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_set_block( curr );
   122b2:	83 ec 0c             	sub    $0xc,%esp
   122b5:	ff 75 f0             	pushl  -0x10(%ebp)
   122b8:	e8 ad ed ff ff       	call   1106a <task_set_block>
   122bd:	83 c4 10             	add    $0x10,%esp
        list_insert_last( &sem->wait_list , &curr->wait_node );
   122c0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   122c3:	8d 50 38             	lea    0x38(%eax),%edx
   122c6:	8b 45 08             	mov    0x8(%ebp),%eax
   122c9:	83 c0 04             	add    $0x4,%eax
   122cc:	83 ec 08             	sub    $0x8,%esp
   122cf:	52                   	push   %edx
   122d0:	50                   	push   %eax
   122d1:	e8 96 08 00 00       	call   12b6c <list_insert_last>
   122d6:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   122d9:	e8 5a ee ff ff       	call   11138 <task_dispatch>
    }

    irq_leave_protection(state);    
   122de:	83 ec 0c             	sub    $0xc,%esp
   122e1:	ff 75 f4             	pushl  -0xc(%ebp)
   122e4:	e8 09 fc ff ff       	call   11ef2 <irq_leave_protection>
   122e9:	83 c4 10             	add    $0x10,%esp
}
   122ec:	90                   	nop
   122ed:	c9                   	leave  
   122ee:	c3                   	ret    

000122ef <sem_notify>:

void sem_notify( sem_t * sem ){
   122ef:	55                   	push   %ebp
   122f0:	89 e5                	mov    %esp,%ebp
   122f2:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   122f5:	e8 e0 fb ff ff       	call   11eda <irq_enter_protection>
   122fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    if( list_count(&sem->wait_list) ){
   122fd:	8b 45 08             	mov    0x8(%ebp),%eax
   12300:	83 c0 04             	add    $0x4,%eax
   12303:	83 ec 0c             	sub    $0xc,%esp
   12306:	50                   	push   %eax
   12307:	e8 4a ff ff ff       	call   12256 <list_count>
   1230c:	83 c4 10             	add    $0x10,%esp
   1230f:	85 c0                	test   %eax,%eax
   12311:	74 40                	je     12353 <sem_notify+0x64>
        list_node_t * node = list_remove_first( &sem->wait_list );
   12313:	8b 45 08             	mov    0x8(%ebp),%eax
   12316:	83 c0 04             	add    $0x4,%eax
   12319:	83 ec 0c             	sub    $0xc,%esp
   1231c:	50                   	push   %eax
   1231d:	e8 ae 08 00 00       	call   12bd0 <list_remove_first>
   12322:	83 c4 10             	add    $0x10,%esp
   12325:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_t * task = list_node_parent( node , task_t , wait_node );
   12328:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1232c:	74 08                	je     12336 <sem_notify+0x47>
   1232e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12331:	83 e8 38             	sub    $0x38,%eax
   12334:	eb 05                	jmp    1233b <sem_notify+0x4c>
   12336:	b8 00 00 00 00       	mov    $0x0,%eax
   1233b:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready( task );
   1233e:	83 ec 0c             	sub    $0xc,%esp
   12341:	ff 75 ec             	pushl  -0x14(%ebp)
   12344:	e8 ed ec ff ff       	call   11036 <task_set_ready>
   12349:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   1234c:	e8 e7 ed ff ff       	call   11138 <task_dispatch>
   12351:	eb 0d                	jmp    12360 <sem_notify+0x71>
    }
    else{
        sem->count ++ ;
   12353:	8b 45 08             	mov    0x8(%ebp),%eax
   12356:	8b 00                	mov    (%eax),%eax
   12358:	8d 50 01             	lea    0x1(%eax),%edx
   1235b:	8b 45 08             	mov    0x8(%ebp),%eax
   1235e:	89 10                	mov    %edx,(%eax)
    }
    irq_leave_protection(state);   
   12360:	83 ec 0c             	sub    $0xc,%esp
   12363:	ff 75 f4             	pushl  -0xc(%ebp)
   12366:	e8 87 fb ff ff       	call   11ef2 <irq_leave_protection>
   1236b:	83 c4 10             	add    $0x10,%esp
}
   1236e:	90                   	nop
   1236f:	c9                   	leave  
   12370:	c3                   	ret    

00012371 <sem_count>:

int sem_count( sem_t * sem ){
   12371:	55                   	push   %ebp
   12372:	89 e5                	mov    %esp,%ebp
   12374:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   12377:	e8 5e fb ff ff       	call   11eda <irq_enter_protection>
   1237c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int count = sem->count;
   1237f:	8b 45 08             	mov    0x8(%ebp),%eax
   12382:	8b 00                	mov    (%eax),%eax
   12384:	89 45 f0             	mov    %eax,-0x10(%ebp)
    irq_leave_protection(state);
   12387:	83 ec 0c             	sub    $0xc,%esp
   1238a:	ff 75 f4             	pushl  -0xc(%ebp)
   1238d:	e8 60 fb ff ff       	call   11ef2 <irq_leave_protection>
   12392:	83 c4 10             	add    $0x10,%esp
    return count;
   12395:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12398:	c9                   	leave  
   12399:	c3                   	ret    

0001239a <bitmap_byte_count>:
#include"tools/bitmap.h"
#include"tools/klib.h"

int bitmap_byte_count( int bit_count ){
   1239a:	55                   	push   %ebp
   1239b:	89 e5                	mov    %esp,%ebp
    return ( bit_count + 8 - 1 ) / 8 ;
   1239d:	8b 45 08             	mov    0x8(%ebp),%eax
   123a0:	83 c0 07             	add    $0x7,%eax
   123a3:	8d 50 07             	lea    0x7(%eax),%edx
   123a6:	85 c0                	test   %eax,%eax
   123a8:	0f 48 c2             	cmovs  %edx,%eax
   123ab:	c1 f8 03             	sar    $0x3,%eax
}
   123ae:	5d                   	pop    %ebp
   123af:	c3                   	ret    

000123b0 <bitmap_init>:

void bitmap_init( bitmap_t * bitmap , uint8_t * bits , int count , int init_bit ){
   123b0:	55                   	push   %ebp
   123b1:	89 e5                	mov    %esp,%ebp
   123b3:	83 ec 18             	sub    $0x18,%esp
    bitmap -> bit_count = count;
   123b6:	8b 45 08             	mov    0x8(%ebp),%eax
   123b9:	8b 55 10             	mov    0x10(%ebp),%edx
   123bc:	89 10                	mov    %edx,(%eax)
    bitmap -> bits = bits;
   123be:	8b 45 08             	mov    0x8(%ebp),%eax
   123c1:	8b 55 0c             	mov    0xc(%ebp),%edx
   123c4:	89 50 04             	mov    %edx,0x4(%eax)
    int bytes = bitmap_byte_count( bitmap -> bit_count );
   123c7:	8b 45 08             	mov    0x8(%ebp),%eax
   123ca:	8b 00                	mov    (%eax),%eax
   123cc:	50                   	push   %eax
   123cd:	e8 c8 ff ff ff       	call   1239a <bitmap_byte_count>
   123d2:	83 c4 04             	add    $0x4,%esp
   123d5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_memset( bitmap->bits , init_bit ? 0xFF : 0 , bytes );
   123d8:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   123dc:	74 07                	je     123e5 <bitmap_init+0x35>
   123de:	ba ff 00 00 00       	mov    $0xff,%edx
   123e3:	eb 05                	jmp    123ea <bitmap_init+0x3a>
   123e5:	ba 00 00 00 00       	mov    $0x0,%edx
   123ea:	8b 45 08             	mov    0x8(%ebp),%eax
   123ed:	8b 40 04             	mov    0x4(%eax),%eax
   123f0:	83 ec 04             	sub    $0x4,%esp
   123f3:	ff 75 f4             	pushl  -0xc(%ebp)
   123f6:	52                   	push   %edx
   123f7:	50                   	push   %eax
   123f8:	e8 95 03 00 00       	call   12792 <kernel_memset>
   123fd:	83 c4 10             	add    $0x10,%esp
}
   12400:	90                   	nop
   12401:	c9                   	leave  
   12402:	c3                   	ret    

00012403 <bitmap_get_bit>:


int bitmap_get_bit( bitmap_t * bitmap , int index ){
   12403:	55                   	push   %ebp
   12404:	89 e5                	mov    %esp,%ebp
   12406:	53                   	push   %ebx
    return bitmap->bits[ index / 8 ] & ( 1 << (index % 8 ) );
   12407:	8b 45 08             	mov    0x8(%ebp),%eax
   1240a:	8b 50 04             	mov    0x4(%eax),%edx
   1240d:	8b 45 0c             	mov    0xc(%ebp),%eax
   12410:	8d 48 07             	lea    0x7(%eax),%ecx
   12413:	85 c0                	test   %eax,%eax
   12415:	0f 48 c1             	cmovs  %ecx,%eax
   12418:	c1 f8 03             	sar    $0x3,%eax
   1241b:	01 d0                	add    %edx,%eax
   1241d:	0f b6 00             	movzbl (%eax),%eax
   12420:	0f b6 d8             	movzbl %al,%ebx
   12423:	8b 45 0c             	mov    0xc(%ebp),%eax
   12426:	99                   	cltd   
   12427:	c1 ea 1d             	shr    $0x1d,%edx
   1242a:	01 d0                	add    %edx,%eax
   1242c:	83 e0 07             	and    $0x7,%eax
   1242f:	29 d0                	sub    %edx,%eax
   12431:	ba 01 00 00 00       	mov    $0x1,%edx
   12436:	89 c1                	mov    %eax,%ecx
   12438:	d3 e2                	shl    %cl,%edx
   1243a:	89 d0                	mov    %edx,%eax
   1243c:	21 d8                	and    %ebx,%eax
}
   1243e:	5b                   	pop    %ebx
   1243f:	5d                   	pop    %ebp
   12440:	c3                   	ret    

00012441 <bitmap_set_bit>:

void bitmap_set_bit( bitmap_t * bitmap , int index , int count , int bit ){
   12441:	55                   	push   %ebp
   12442:	89 e5                	mov    %esp,%ebp
   12444:	56                   	push   %esi
   12445:	53                   	push   %ebx
   12446:	83 ec 10             	sub    $0x10,%esp
    for(int i = 0 ; ( i < count ) && (index < bitmap->bit_count ) ; i ++ , index ++ ){
   12449:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   12450:	e9 a2 00 00 00       	jmp    124f7 <bitmap_set_bit+0xb6>
        if( bit ){
   12455:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   12459:	74 4a                	je     124a5 <bitmap_set_bit+0x64>
            bitmap->bits[ index / 8 ] |= ( 1 << (index % 8 ) );
   1245b:	8b 45 08             	mov    0x8(%ebp),%eax
   1245e:	8b 50 04             	mov    0x4(%eax),%edx
   12461:	8b 45 0c             	mov    0xc(%ebp),%eax
   12464:	8d 48 07             	lea    0x7(%eax),%ecx
   12467:	85 c0                	test   %eax,%eax
   12469:	0f 48 c1             	cmovs  %ecx,%eax
   1246c:	c1 f8 03             	sar    $0x3,%eax
   1246f:	89 c3                	mov    %eax,%ebx
   12471:	89 d8                	mov    %ebx,%eax
   12473:	01 d0                	add    %edx,%eax
   12475:	0f b6 00             	movzbl (%eax),%eax
   12478:	89 c6                	mov    %eax,%esi
   1247a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1247d:	99                   	cltd   
   1247e:	c1 ea 1d             	shr    $0x1d,%edx
   12481:	01 d0                	add    %edx,%eax
   12483:	83 e0 07             	and    $0x7,%eax
   12486:	29 d0                	sub    %edx,%eax
   12488:	ba 01 00 00 00       	mov    $0x1,%edx
   1248d:	89 c1                	mov    %eax,%ecx
   1248f:	d3 e2                	shl    %cl,%edx
   12491:	89 d0                	mov    %edx,%eax
   12493:	89 f2                	mov    %esi,%edx
   12495:	09 c2                	or     %eax,%edx
   12497:	8b 45 08             	mov    0x8(%ebp),%eax
   1249a:	8b 40 04             	mov    0x4(%eax),%eax
   1249d:	89 d9                	mov    %ebx,%ecx
   1249f:	01 c8                	add    %ecx,%eax
   124a1:	88 10                	mov    %dl,(%eax)
   124a3:	eb 4a                	jmp    124ef <bitmap_set_bit+0xae>
        }
        else{
            bitmap->bits[ index / 8 ] &= ~( 1 << (index % 8 ) );
   124a5:	8b 45 08             	mov    0x8(%ebp),%eax
   124a8:	8b 50 04             	mov    0x4(%eax),%edx
   124ab:	8b 45 0c             	mov    0xc(%ebp),%eax
   124ae:	8d 48 07             	lea    0x7(%eax),%ecx
   124b1:	85 c0                	test   %eax,%eax
   124b3:	0f 48 c1             	cmovs  %ecx,%eax
   124b6:	c1 f8 03             	sar    $0x3,%eax
   124b9:	89 c3                	mov    %eax,%ebx
   124bb:	89 d8                	mov    %ebx,%eax
   124bd:	01 d0                	add    %edx,%eax
   124bf:	0f b6 00             	movzbl (%eax),%eax
   124c2:	89 c6                	mov    %eax,%esi
   124c4:	8b 45 0c             	mov    0xc(%ebp),%eax
   124c7:	99                   	cltd   
   124c8:	c1 ea 1d             	shr    $0x1d,%edx
   124cb:	01 d0                	add    %edx,%eax
   124cd:	83 e0 07             	and    $0x7,%eax
   124d0:	29 d0                	sub    %edx,%eax
   124d2:	ba 01 00 00 00       	mov    $0x1,%edx
   124d7:	89 c1                	mov    %eax,%ecx
   124d9:	d3 e2                	shl    %cl,%edx
   124db:	89 d0                	mov    %edx,%eax
   124dd:	f7 d0                	not    %eax
   124df:	89 f2                	mov    %esi,%edx
   124e1:	21 c2                	and    %eax,%edx
   124e3:	8b 45 08             	mov    0x8(%ebp),%eax
   124e6:	8b 40 04             	mov    0x4(%eax),%eax
   124e9:	89 d9                	mov    %ebx,%ecx
   124eb:	01 c8                	add    %ecx,%eax
   124ed:	88 10                	mov    %dl,(%eax)
    for(int i = 0 ; ( i < count ) && (index < bitmap->bit_count ) ; i ++ , index ++ ){
   124ef:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   124f3:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
   124f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   124fa:	3b 45 10             	cmp    0x10(%ebp),%eax
   124fd:	7d 0e                	jge    1250d <bitmap_set_bit+0xcc>
   124ff:	8b 45 08             	mov    0x8(%ebp),%eax
   12502:	8b 00                	mov    (%eax),%eax
   12504:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12507:	0f 8c 48 ff ff ff    	jl     12455 <bitmap_set_bit+0x14>
        }
    }
}
   1250d:	90                   	nop
   1250e:	83 c4 10             	add    $0x10,%esp
   12511:	5b                   	pop    %ebx
   12512:	5e                   	pop    %esi
   12513:	5d                   	pop    %ebp
   12514:	c3                   	ret    

00012515 <bitmap_is_set>:

int bitmap_is_set( bitmap_t * bitmap , int index ){
   12515:	55                   	push   %ebp
   12516:	89 e5                	mov    %esp,%ebp
    return bitmap_get_bit( bitmap , index ) ? 1 : 0 ;
   12518:	ff 75 0c             	pushl  0xc(%ebp)
   1251b:	ff 75 08             	pushl  0x8(%ebp)
   1251e:	e8 e0 fe ff ff       	call   12403 <bitmap_get_bit>
   12523:	83 c4 08             	add    $0x8,%esp
   12526:	85 c0                	test   %eax,%eax
   12528:	0f 95 c0             	setne  %al
   1252b:	0f b6 c0             	movzbl %al,%eax
}
   1252e:	c9                   	leave  
   1252f:	c3                   	ret    

00012530 <bitmap_alloc_nbits>:
int bitmap_alloc_nbits( bitmap_t * bitmap , int bit , int count ){
   12530:	55                   	push   %ebp
   12531:	89 e5                	mov    %esp,%ebp
   12533:	83 ec 10             	sub    $0x10,%esp
    int search_idx = 0 ;
   12536:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    int ok_index = -1;
   1253d:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)
    while( search_idx < bitmap->bit_count ){
   12544:	e9 8c 00 00 00       	jmp    125d5 <bitmap_alloc_nbits+0xa5>
        if( bitmap_get_bit(bitmap , search_idx) != bit ){
   12549:	ff 75 fc             	pushl  -0x4(%ebp)
   1254c:	ff 75 08             	pushl  0x8(%ebp)
   1254f:	e8 af fe ff ff       	call   12403 <bitmap_get_bit>
   12554:	83 c4 08             	add    $0x8,%esp
   12557:	39 45 0c             	cmp    %eax,0xc(%ebp)
   1255a:	74 06                	je     12562 <bitmap_alloc_nbits+0x32>
            search_idx ++ ;
   1255c:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
            continue;
   12560:	eb 73                	jmp    125d5 <bitmap_alloc_nbits+0xa5>
        }
        ok_index = search_idx;
   12562:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12565:	89 45 f8             	mov    %eax,-0x8(%ebp)
        int i = 1;
   12568:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
        for( i = 1 ; ( i < count ) && ( search_idx < bitmap->bit_count ) ; i ++ ){
   1256f:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   12576:	eb 27                	jmp    1259f <bitmap_alloc_nbits+0x6f>
            if( bitmap_get_bit(bitmap , search_idx++ ) != bit ){
   12578:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1257b:	8d 50 01             	lea    0x1(%eax),%edx
   1257e:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12581:	50                   	push   %eax
   12582:	ff 75 08             	pushl  0x8(%ebp)
   12585:	e8 79 fe ff ff       	call   12403 <bitmap_get_bit>
   1258a:	83 c4 08             	add    $0x8,%esp
   1258d:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12590:	74 09                	je     1259b <bitmap_alloc_nbits+0x6b>
                ok_index = -1;
   12592:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)
                break;
   12599:	eb 16                	jmp    125b1 <bitmap_alloc_nbits+0x81>
        for( i = 1 ; ( i < count ) && ( search_idx < bitmap->bit_count ) ; i ++ ){
   1259b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1259f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   125a2:	3b 45 10             	cmp    0x10(%ebp),%eax
   125a5:	7d 0a                	jge    125b1 <bitmap_alloc_nbits+0x81>
   125a7:	8b 45 08             	mov    0x8(%ebp),%eax
   125aa:	8b 00                	mov    (%eax),%eax
   125ac:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   125af:	7c c7                	jl     12578 <bitmap_alloc_nbits+0x48>
            }
        }
        
        if( i >= count ){
   125b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   125b4:	3b 45 10             	cmp    0x10(%ebp),%eax
   125b7:	7c 1c                	jl     125d5 <bitmap_alloc_nbits+0xa5>
            bitmap_set_bit( bitmap , ok_index , count , ~bit );
   125b9:	8b 45 0c             	mov    0xc(%ebp),%eax
   125bc:	f7 d0                	not    %eax
   125be:	50                   	push   %eax
   125bf:	ff 75 10             	pushl  0x10(%ebp)
   125c2:	ff 75 f8             	pushl  -0x8(%ebp)
   125c5:	ff 75 08             	pushl  0x8(%ebp)
   125c8:	e8 74 fe ff ff       	call   12441 <bitmap_set_bit>
   125cd:	83 c4 10             	add    $0x10,%esp
            return ok_index;
   125d0:	8b 45 f8             	mov    -0x8(%ebp),%eax
   125d3:	eb 13                	jmp    125e8 <bitmap_alloc_nbits+0xb8>
    while( search_idx < bitmap->bit_count ){
   125d5:	8b 45 08             	mov    0x8(%ebp),%eax
   125d8:	8b 00                	mov    (%eax),%eax
   125da:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   125dd:	0f 8c 66 ff ff ff    	jl     12549 <bitmap_alloc_nbits+0x19>
        }
    }
    return -1;
   125e3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   125e8:	c9                   	leave  
   125e9:	c3                   	ret    

000125ea <hlt>:
static inline void hlt( void ){
   125ea:	55                   	push   %ebp
   125eb:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   125ed:	f4                   	hlt    
}
   125ee:	90                   	nop
   125ef:	5d                   	pop    %ebp
   125f0:	c3                   	ret    

000125f1 <kernel_strcpy>:
#include"tools/klib.h"
#include"comm/types.h"
#include"tools/log.h"
#include"comm/cpu_instr.h"
void kernel_strcpy( char * dest , const char * src ){
   125f1:	55                   	push   %ebp
   125f2:	89 e5                	mov    %esp,%ebp
    if( !dest || !src ){
   125f4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   125f8:	74 3b                	je     12635 <kernel_strcpy+0x44>
   125fa:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   125fe:	74 35                	je     12635 <kernel_strcpy+0x44>
        return ;
    }

    while( *dest && *src ){
   12600:	eb 17                	jmp    12619 <kernel_strcpy+0x28>
        *dest ++ = *src ++ ;
   12602:	8b 55 0c             	mov    0xc(%ebp),%edx
   12605:	8d 42 01             	lea    0x1(%edx),%eax
   12608:	89 45 0c             	mov    %eax,0xc(%ebp)
   1260b:	8b 45 08             	mov    0x8(%ebp),%eax
   1260e:	8d 48 01             	lea    0x1(%eax),%ecx
   12611:	89 4d 08             	mov    %ecx,0x8(%ebp)
   12614:	0f b6 12             	movzbl (%edx),%edx
   12617:	88 10                	mov    %dl,(%eax)
    while( *dest && *src ){
   12619:	8b 45 08             	mov    0x8(%ebp),%eax
   1261c:	0f b6 00             	movzbl (%eax),%eax
   1261f:	84 c0                	test   %al,%al
   12621:	74 0a                	je     1262d <kernel_strcpy+0x3c>
   12623:	8b 45 0c             	mov    0xc(%ebp),%eax
   12626:	0f b6 00             	movzbl (%eax),%eax
   12629:	84 c0                	test   %al,%al
   1262b:	75 d5                	jne    12602 <kernel_strcpy+0x11>
    }
    *dest = '\0';
   1262d:	8b 45 08             	mov    0x8(%ebp),%eax
   12630:	c6 00 00             	movb   $0x0,(%eax)
   12633:	eb 01                	jmp    12636 <kernel_strcpy+0x45>
        return ;
   12635:	90                   	nop
}
   12636:	5d                   	pop    %ebp
   12637:	c3                   	ret    

00012638 <kernel_strncpy>:
void kernel_strncpy( char * dest , const char * src , int size ){
   12638:	55                   	push   %ebp
   12639:	89 e5                	mov    %esp,%ebp
   1263b:	83 ec 10             	sub    $0x10,%esp
    if( !dest || !src || !size ){
   1263e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12642:	74 61                	je     126a5 <kernel_strncpy+0x6d>
   12644:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12648:	74 5b                	je     126a5 <kernel_strncpy+0x6d>
   1264a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1264e:	74 55                	je     126a5 <kernel_strncpy+0x6d>
        return ;
    }
    char * d = dest;
   12650:	8b 45 08             	mov    0x8(%ebp),%eax
   12653:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char * s = src;
   12656:	8b 45 0c             	mov    0xc(%ebp),%eax
   12659:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while( ( size -- > 0 ) && *s ){
   1265c:	eb 17                	jmp    12675 <kernel_strncpy+0x3d>
        *d ++ = *s ++ ;
   1265e:	8b 55 f8             	mov    -0x8(%ebp),%edx
   12661:	8d 42 01             	lea    0x1(%edx),%eax
   12664:	89 45 f8             	mov    %eax,-0x8(%ebp)
   12667:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1266a:	8d 48 01             	lea    0x1(%eax),%ecx
   1266d:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   12670:	0f b6 12             	movzbl (%edx),%edx
   12673:	88 10                	mov    %dl,(%eax)
    while( ( size -- > 0 ) && *s ){
   12675:	8b 45 10             	mov    0x10(%ebp),%eax
   12678:	8d 50 ff             	lea    -0x1(%eax),%edx
   1267b:	89 55 10             	mov    %edx,0x10(%ebp)
   1267e:	85 c0                	test   %eax,%eax
   12680:	7e 0a                	jle    1268c <kernel_strncpy+0x54>
   12682:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12685:	0f b6 00             	movzbl (%eax),%eax
   12688:	84 c0                	test   %al,%al
   1268a:	75 d2                	jne    1265e <kernel_strncpy+0x26>
    }
    if( size == 0 ){
   1268c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12690:	75 0b                	jne    1269d <kernel_strncpy+0x65>
        *( d - 1 ) = '\0';
   12692:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12695:	83 e8 01             	sub    $0x1,%eax
   12698:	c6 00 00             	movb   $0x0,(%eax)
   1269b:	eb 09                	jmp    126a6 <kernel_strncpy+0x6e>
    }
    else{
        *d = '\0';
   1269d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   126a0:	c6 00 00             	movb   $0x0,(%eax)
   126a3:	eb 01                	jmp    126a6 <kernel_strncpy+0x6e>
        return ;
   126a5:	90                   	nop
    }
}
   126a6:	c9                   	leave  
   126a7:	c3                   	ret    

000126a8 <kernel_strncpm>:

int kernel_strncpm( const char * s1 , const char * s2 , int size ){
   126a8:	55                   	push   %ebp
   126a9:	89 e5                	mov    %esp,%ebp
    if( !s1 || !s2 ){
   126ab:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   126af:	74 06                	je     126b7 <kernel_strncpm+0xf>
   126b1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   126b5:	75 13                	jne    126ca <kernel_strncpm+0x22>
        return -1;
   126b7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   126bc:	eb 48                	jmp    12706 <kernel_strncpm+0x5e>
    }

    while( *s1 && *s2 && ( *s1 == *s2 ) && size ){
        s1 ++ ;
   126be:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        s2 ++ ;
   126c2:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
        size--;
   126c6:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
    while( *s1 && *s2 && ( *s1 == *s2 ) && size ){
   126ca:	8b 45 08             	mov    0x8(%ebp),%eax
   126cd:	0f b6 00             	movzbl (%eax),%eax
   126d0:	84 c0                	test   %al,%al
   126d2:	74 20                	je     126f4 <kernel_strncpm+0x4c>
   126d4:	8b 45 0c             	mov    0xc(%ebp),%eax
   126d7:	0f b6 00             	movzbl (%eax),%eax
   126da:	84 c0                	test   %al,%al
   126dc:	74 16                	je     126f4 <kernel_strncpm+0x4c>
   126de:	8b 45 08             	mov    0x8(%ebp),%eax
   126e1:	0f b6 10             	movzbl (%eax),%edx
   126e4:	8b 45 0c             	mov    0xc(%ebp),%eax
   126e7:	0f b6 00             	movzbl (%eax),%eax
   126ea:	38 c2                	cmp    %al,%dl
   126ec:	75 06                	jne    126f4 <kernel_strncpm+0x4c>
   126ee:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   126f2:	75 ca                	jne    126be <kernel_strncpm+0x16>
    }
    if( size > 0 ) return 1;
   126f4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   126f8:	7e 07                	jle    12701 <kernel_strncpm+0x59>
   126fa:	b8 01 00 00 00       	mov    $0x1,%eax
   126ff:	eb 05                	jmp    12706 <kernel_strncpm+0x5e>
    else return 0;
   12701:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12706:	5d                   	pop    %ebp
   12707:	c3                   	ret    

00012708 <kernel_strlen>:
int kernel_strlen( const char * str ){
   12708:	55                   	push   %ebp
   12709:	89 e5                	mov    %esp,%ebp
   1270b:	83 ec 10             	sub    $0x10,%esp
    if( !str ){
   1270e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12712:	75 07                	jne    1271b <kernel_strlen+0x13>
        return 0;
   12714:	b8 00 00 00 00       	mov    $0x0,%eax
   12719:	eb 26                	jmp    12741 <kernel_strlen+0x39>
    }
    const char * c = str;
   1271b:	8b 45 08             	mov    0x8(%ebp),%eax
   1271e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int len = 0;
   12721:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while( *c++ ){
   12728:	eb 04                	jmp    1272e <kernel_strlen+0x26>
        len ++ ;
   1272a:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while( *c++ ){
   1272e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12731:	8d 50 01             	lea    0x1(%eax),%edx
   12734:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12737:	0f b6 00             	movzbl (%eax),%eax
   1273a:	84 c0                	test   %al,%al
   1273c:	75 ec                	jne    1272a <kernel_strlen+0x22>
    }
    return len;
   1273e:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
   12741:	c9                   	leave  
   12742:	c3                   	ret    

00012743 <kernel_memcpy>:

void kernel_memcpy( void * dest , void * src , int size ){
   12743:	55                   	push   %ebp
   12744:	89 e5                	mov    %esp,%ebp
   12746:	83 ec 10             	sub    $0x10,%esp
    if( !dest || !src || !size ){
   12749:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1274d:	74 40                	je     1278f <kernel_memcpy+0x4c>
   1274f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12753:	74 3a                	je     1278f <kernel_memcpy+0x4c>
   12755:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12759:	74 34                	je     1278f <kernel_memcpy+0x4c>
        return ;
    }
    uint8_t * s = ( uint8_t * )src;
   1275b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1275e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t * d = ( uint8_t * )dest;
   12761:	8b 45 08             	mov    0x8(%ebp),%eax
   12764:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while( size -- ){
   12767:	eb 17                	jmp    12780 <kernel_memcpy+0x3d>
        *d ++ = *s ++;
   12769:	8b 55 fc             	mov    -0x4(%ebp),%edx
   1276c:	8d 42 01             	lea    0x1(%edx),%eax
   1276f:	89 45 fc             	mov    %eax,-0x4(%ebp)
   12772:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12775:	8d 48 01             	lea    0x1(%eax),%ecx
   12778:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   1277b:	0f b6 12             	movzbl (%edx),%edx
   1277e:	88 10                	mov    %dl,(%eax)
    while( size -- ){
   12780:	8b 45 10             	mov    0x10(%ebp),%eax
   12783:	8d 50 ff             	lea    -0x1(%eax),%edx
   12786:	89 55 10             	mov    %edx,0x10(%ebp)
   12789:	85 c0                	test   %eax,%eax
   1278b:	75 dc                	jne    12769 <kernel_memcpy+0x26>
   1278d:	eb 01                	jmp    12790 <kernel_memcpy+0x4d>
        return ;
   1278f:	90                   	nop
    }
}
   12790:	c9                   	leave  
   12791:	c3                   	ret    

00012792 <kernel_memset>:
void kernel_memset( void * dest , uint8_t v , int size ){
   12792:	55                   	push   %ebp
   12793:	89 e5                	mov    %esp,%ebp
   12795:	83 ec 14             	sub    $0x14,%esp
   12798:	8b 45 0c             	mov    0xc(%ebp),%eax
   1279b:	88 45 ec             	mov    %al,-0x14(%ebp)
    if( !dest || !size ){
   1279e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   127a2:	74 2c                	je     127d0 <kernel_memset+0x3e>
   127a4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   127a8:	74 26                	je     127d0 <kernel_memset+0x3e>
        return ;
    }

    uint8_t *d = (uint8_t *)dest;
   127aa:	8b 45 08             	mov    0x8(%ebp),%eax
   127ad:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while( size -- ){
   127b0:	eb 0f                	jmp    127c1 <kernel_memset+0x2f>
        *d ++ = v;
   127b2:	8b 45 fc             	mov    -0x4(%ebp),%eax
   127b5:	8d 50 01             	lea    0x1(%eax),%edx
   127b8:	89 55 fc             	mov    %edx,-0x4(%ebp)
   127bb:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   127bf:	88 10                	mov    %dl,(%eax)
    while( size -- ){
   127c1:	8b 45 10             	mov    0x10(%ebp),%eax
   127c4:	8d 50 ff             	lea    -0x1(%eax),%edx
   127c7:	89 55 10             	mov    %edx,0x10(%ebp)
   127ca:	85 c0                	test   %eax,%eax
   127cc:	75 e4                	jne    127b2 <kernel_memset+0x20>
   127ce:	eb 01                	jmp    127d1 <kernel_memset+0x3f>
        return ;
   127d0:	90                   	nop
    }

}
   127d1:	c9                   	leave  
   127d2:	c3                   	ret    

000127d3 <kernel_memcmp>:
int kernel_memcmp( void * d1 , void * d2 , int size ){
   127d3:	55                   	push   %ebp
   127d4:	89 e5                	mov    %esp,%ebp
   127d6:	83 ec 10             	sub    $0x10,%esp
        if( !d1 || !d2 || !size ){
   127d9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   127dd:	74 0c                	je     127eb <kernel_memcmp+0x18>
   127df:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   127e3:	74 06                	je     127eb <kernel_memcmp+0x18>
   127e5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   127e9:	75 07                	jne    127f2 <kernel_memcmp+0x1f>
        return 1;
   127eb:	b8 01 00 00 00       	mov    $0x1,%eax
   127f0:	eb 43                	jmp    12835 <kernel_memcmp+0x62>
    }
    uint8_t * s = ( uint8_t * )d1;
   127f2:	8b 45 08             	mov    0x8(%ebp),%eax
   127f5:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t * d = ( uint8_t * )d2;
   127f8:	8b 45 0c             	mov    0xc(%ebp),%eax
   127fb:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while( size -- ){
   127fe:	eb 23                	jmp    12823 <kernel_memcmp+0x50>
        if( *s ++ != *d ++ ){
   12800:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12803:	8d 50 01             	lea    0x1(%eax),%edx
   12806:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12809:	0f b6 08             	movzbl (%eax),%ecx
   1280c:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1280f:	8d 50 01             	lea    0x1(%eax),%edx
   12812:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12815:	0f b6 00             	movzbl (%eax),%eax
   12818:	38 c1                	cmp    %al,%cl
   1281a:	74 07                	je     12823 <kernel_memcmp+0x50>
            return 1;
   1281c:	b8 01 00 00 00       	mov    $0x1,%eax
   12821:	eb 12                	jmp    12835 <kernel_memcmp+0x62>
    while( size -- ){
   12823:	8b 45 10             	mov    0x10(%ebp),%eax
   12826:	8d 50 ff             	lea    -0x1(%eax),%edx
   12829:	89 55 10             	mov    %edx,0x10(%ebp)
   1282c:	85 c0                	test   %eax,%eax
   1282e:	75 d0                	jne    12800 <kernel_memcmp+0x2d>
        }
    }
    return 0;
   12830:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12835:	c9                   	leave  
   12836:	c3                   	ret    

00012837 <kernel_sprintf>:

void kernel_sprintf( char * str_buf , const char * fmt , ... ){
   12837:	55                   	push   %ebp
   12838:	89 e5                	mov    %esp,%ebp
   1283a:	83 ec 18             	sub    $0x18,%esp
    va_list args;
    va_start( args , fmt );
   1283d:	8d 45 10             	lea    0x10(%ebp),%eax
   12840:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_vsprintf( str_buf , fmt , args );
   12843:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12846:	83 ec 04             	sub    $0x4,%esp
   12849:	50                   	push   %eax
   1284a:	ff 75 0c             	pushl  0xc(%ebp)
   1284d:	ff 75 08             	pushl  0x8(%ebp)
   12850:	e8 ff 00 00 00       	call   12954 <kernel_vsprintf>
   12855:	83 c4 10             	add    $0x10,%esp
    va_end( args );    
}
   12858:	90                   	nop
   12859:	c9                   	leave  
   1285a:	c3                   	ret    

0001285b <kernel_itoa>:

void kernel_itoa( char * buf , int num , int base ){
   1285b:	55                   	push   %ebp
   1285c:	89 e5                	mov    %esp,%ebp
   1285e:	83 ec 10             	sub    $0x10,%esp
    static const char* num2ch = {"0123456789ABCDEF"};
    char *p = buf;
   12861:	8b 45 08             	mov    0x8(%ebp),%eax
   12864:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if( base != 2 && base != 10 && base != 16 && base != 8 ){
   12867:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   1286b:	74 1d                	je     1288a <kernel_itoa+0x2f>
   1286d:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   12871:	74 17                	je     1288a <kernel_itoa+0x2f>
   12873:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   12877:	74 11                	je     1288a <kernel_itoa+0x2f>
   12879:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   1287d:	74 0b                	je     1288a <kernel_itoa+0x2f>
        *p = '\0';
   1287f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12882:	c6 00 00             	movb   $0x0,(%eax)
        return ;
   12885:	e9 c8 00 00 00       	jmp    12952 <kernel_itoa+0xf7>
    }

    if( num < 0 && base == 10 ){
   1288a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1288e:	79 15                	jns    128a5 <kernel_itoa+0x4a>
   12890:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   12894:	75 0f                	jne    128a5 <kernel_itoa+0x4a>
        *p++ = '-';
   12896:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12899:	8d 50 01             	lea    0x1(%eax),%edx
   1289c:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1289f:	c6 00 2d             	movb   $0x2d,(%eax)
        num = -num ;
   128a2:	f7 5d 0c             	negl   0xc(%ebp)
    }
    if( base == 16 ){
   128a5:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   128a9:	75 18                	jne    128c3 <kernel_itoa+0x68>
        *p++ = '0';
   128ab:	8b 45 fc             	mov    -0x4(%ebp),%eax
   128ae:	8d 50 01             	lea    0x1(%eax),%edx
   128b1:	89 55 fc             	mov    %edx,-0x4(%ebp)
   128b4:	c6 00 30             	movb   $0x30,(%eax)
        *p++ = 'X';
   128b7:	8b 45 fc             	mov    -0x4(%ebp),%eax
   128ba:	8d 50 01             	lea    0x1(%eax),%edx
   128bd:	89 55 fc             	mov    %edx,-0x4(%ebp)
   128c0:	c6 00 58             	movb   $0x58,(%eax)
    }
    do{
        char ch = num2ch[num % base];
   128c3:	8b 0d 40 40 01 00    	mov    0x14040,%ecx
   128c9:	8b 45 0c             	mov    0xc(%ebp),%eax
   128cc:	99                   	cltd   
   128cd:	f7 7d 10             	idivl  0x10(%ebp)
   128d0:	89 d0                	mov    %edx,%eax
   128d2:	01 c8                	add    %ecx,%eax
   128d4:	0f b6 00             	movzbl (%eax),%eax
   128d7:	88 45 f7             	mov    %al,-0x9(%ebp)
        *p++ = ch;
   128da:	8b 45 fc             	mov    -0x4(%ebp),%eax
   128dd:	8d 50 01             	lea    0x1(%eax),%edx
   128e0:	89 55 fc             	mov    %edx,-0x4(%ebp)
   128e3:	0f b6 55 f7          	movzbl -0x9(%ebp),%edx
   128e7:	88 10                	mov    %dl,(%eax)
        num /= base;
   128e9:	8b 45 0c             	mov    0xc(%ebp),%eax
   128ec:	99                   	cltd   
   128ed:	f7 7d 10             	idivl  0x10(%ebp)
   128f0:	89 45 0c             	mov    %eax,0xc(%ebp)
    }while( num );
   128f3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   128f7:	75 ca                	jne    128c3 <kernel_itoa+0x68>
    *p-- = '\0';
   128f9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   128fc:	8d 50 ff             	lea    -0x1(%eax),%edx
   128ff:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12902:	c6 00 00             	movb   $0x0,(%eax)

    char *start = buf;
   12905:	8b 45 08             	mov    0x8(%ebp),%eax
   12908:	89 45 f8             	mov    %eax,-0x8(%ebp)

    if( (char)*buf == '-' ){
   1290b:	8b 45 08             	mov    0x8(%ebp),%eax
   1290e:	0f b6 00             	movzbl (%eax),%eax
   12911:	3c 2d                	cmp    $0x2d,%al
   12913:	75 04                	jne    12919 <kernel_itoa+0xbe>
        start = start + 1;
   12915:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    }
    if( base == 16 ){
   12919:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   1291d:	75 2b                	jne    1294a <kernel_itoa+0xef>
        start = start + 2;
   1291f:	83 45 f8 02          	addl   $0x2,-0x8(%ebp)
    }
    while( start < p ){
   12923:	eb 25                	jmp    1294a <kernel_itoa+0xef>
        char ch = *start;
   12925:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12928:	0f b6 00             	movzbl (%eax),%eax
   1292b:	88 45 f6             	mov    %al,-0xa(%ebp)
        *start = *p;
   1292e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12931:	0f b6 10             	movzbl (%eax),%edx
   12934:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12937:	88 10                	mov    %dl,(%eax)
        *p = ch;
   12939:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1293c:	0f b6 55 f6          	movzbl -0xa(%ebp),%edx
   12940:	88 10                	mov    %dl,(%eax)
        start ++;
   12942:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
        p --;
   12946:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
    while( start < p ){
   1294a:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1294d:	3b 45 fc             	cmp    -0x4(%ebp),%eax
   12950:	72 d3                	jb     12925 <kernel_itoa+0xca>
    }
}
   12952:	c9                   	leave  
   12953:	c3                   	ret    

00012954 <kernel_vsprintf>:

void kernel_vsprintf( char * buf , const char * fmt , va_list args ){
   12954:	55                   	push   %ebp
   12955:	89 e5                	mov    %esp,%ebp
   12957:	83 ec 20             	sub    $0x20,%esp
    enum { NORMAL , READ_FMT } state = NORMAL;
   1295a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    char * curr = buf;
   12961:	8b 45 08             	mov    0x8(%ebp),%eax
   12964:	89 45 f8             	mov    %eax,-0x8(%ebp)
    char ch;
    while( (ch = *fmt++ ) ){
   12967:	e9 17 01 00 00       	jmp    12a83 <kernel_vsprintf+0x12f>
        switch( state ){
   1296c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1296f:	85 c0                	test   %eax,%eax
   12971:	74 0a                	je     1297d <kernel_vsprintf+0x29>
   12973:	83 f8 01             	cmp    $0x1,%eax
   12976:	74 2b                	je     129a3 <kernel_vsprintf+0x4f>
   12978:	e9 06 01 00 00       	jmp    12a83 <kernel_vsprintf+0x12f>
            case NORMAL:
                if( ch == '%'){
   1297d:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   12981:	75 0c                	jne    1298f <kernel_vsprintf+0x3b>
                    state = READ_FMT;
   12983:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   1298a:	e9 f4 00 00 00       	jmp    12a83 <kernel_vsprintf+0x12f>
                }
                else{
                    *curr ++ = ch;
   1298f:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12992:	8d 50 01             	lea    0x1(%eax),%edx
   12995:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12998:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   1299c:	88 10                	mov    %dl,(%eax)
                }
                break;
   1299e:	e9 e0 00 00 00       	jmp    12a83 <kernel_vsprintf+0x12f>
            case READ_FMT:
                if( ch == 'd' ){
   129a3:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   129a7:	75 31                	jne    129da <kernel_vsprintf+0x86>
                    int num = va_arg( args , int );
   129a9:	8b 45 10             	mov    0x10(%ebp),%eax
   129ac:	8d 50 04             	lea    0x4(%eax),%edx
   129af:	89 55 10             	mov    %edx,0x10(%ebp)
   129b2:	8b 00                	mov    (%eax),%eax
   129b4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                    kernel_itoa( curr , num , 10 );
   129b7:	6a 0a                	push   $0xa
   129b9:	ff 75 e4             	pushl  -0x1c(%ebp)
   129bc:	ff 75 f8             	pushl  -0x8(%ebp)
   129bf:	e8 97 fe ff ff       	call   1285b <kernel_itoa>
   129c4:	83 c4 0c             	add    $0xc,%esp
                    curr = curr +  kernel_strlen( curr );
   129c7:	ff 75 f8             	pushl  -0x8(%ebp)
   129ca:	e8 39 fd ff ff       	call   12708 <kernel_strlen>
   129cf:	83 c4 04             	add    $0x4,%esp
   129d2:	01 45 f8             	add    %eax,-0x8(%ebp)
   129d5:	e9 a1 00 00 00       	jmp    12a7b <kernel_vsprintf+0x127>
                }
                else if( ch == 'x' ){
   129da:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   129de:	75 2e                	jne    12a0e <kernel_vsprintf+0xba>
                    int num = va_arg( args , int );
   129e0:	8b 45 10             	mov    0x10(%ebp),%eax
   129e3:	8d 50 04             	lea    0x4(%eax),%edx
   129e6:	89 55 10             	mov    %edx,0x10(%ebp)
   129e9:	8b 00                	mov    (%eax),%eax
   129eb:	89 45 e8             	mov    %eax,-0x18(%ebp)
                    kernel_itoa( curr , num , 16 );
   129ee:	6a 10                	push   $0x10
   129f0:	ff 75 e8             	pushl  -0x18(%ebp)
   129f3:	ff 75 f8             	pushl  -0x8(%ebp)
   129f6:	e8 60 fe ff ff       	call   1285b <kernel_itoa>
   129fb:	83 c4 0c             	add    $0xc,%esp
                    curr = curr + kernel_strlen( curr );                   
   129fe:	ff 75 f8             	pushl  -0x8(%ebp)
   12a01:	e8 02 fd ff ff       	call   12708 <kernel_strlen>
   12a06:	83 c4 04             	add    $0x4,%esp
   12a09:	01 45 f8             	add    %eax,-0x8(%ebp)
   12a0c:	eb 6d                	jmp    12a7b <kernel_vsprintf+0x127>
                }
                else if( ch == 'c' ){
   12a0e:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   12a12:	75 1f                	jne    12a33 <kernel_vsprintf+0xdf>
                    char c = va_arg( args , int );
   12a14:	8b 45 10             	mov    0x10(%ebp),%eax
   12a17:	8d 50 04             	lea    0x4(%eax),%edx
   12a1a:	89 55 10             	mov    %edx,0x10(%ebp)
   12a1d:	8b 00                	mov    (%eax),%eax
   12a1f:	88 45 ee             	mov    %al,-0x12(%ebp)
                    *curr++ = c;
   12a22:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12a25:	8d 50 01             	lea    0x1(%eax),%edx
   12a28:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12a2b:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   12a2f:	88 10                	mov    %dl,(%eax)
   12a31:	eb 48                	jmp    12a7b <kernel_vsprintf+0x127>
                }
                else if( ch == 's' ){
   12a33:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   12a37:	75 42                	jne    12a7b <kernel_vsprintf+0x127>
                    const char * str = va_arg( args , char * );
   12a39:	8b 45 10             	mov    0x10(%ebp),%eax
   12a3c:	8d 50 04             	lea    0x4(%eax),%edx
   12a3f:	89 55 10             	mov    %edx,0x10(%ebp)
   12a42:	8b 00                	mov    (%eax),%eax
   12a44:	89 45 f4             	mov    %eax,-0xc(%ebp)
                    int len = kernel_strlen( str );
   12a47:	ff 75 f4             	pushl  -0xc(%ebp)
   12a4a:	e8 b9 fc ff ff       	call   12708 <kernel_strlen>
   12a4f:	83 c4 04             	add    $0x4,%esp
   12a52:	89 45 f0             	mov    %eax,-0x10(%ebp)
                    while( len -- ){
   12a55:	eb 17                	jmp    12a6e <kernel_vsprintf+0x11a>
                        *curr ++ = *str ++;
   12a57:	8b 55 f4             	mov    -0xc(%ebp),%edx
   12a5a:	8d 42 01             	lea    0x1(%edx),%eax
   12a5d:	89 45 f4             	mov    %eax,-0xc(%ebp)
   12a60:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12a63:	8d 48 01             	lea    0x1(%eax),%ecx
   12a66:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   12a69:	0f b6 12             	movzbl (%edx),%edx
   12a6c:	88 10                	mov    %dl,(%eax)
                    while( len -- ){
   12a6e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12a71:	8d 50 ff             	lea    -0x1(%eax),%edx
   12a74:	89 55 f0             	mov    %edx,-0x10(%ebp)
   12a77:	85 c0                	test   %eax,%eax
   12a79:	75 dc                	jne    12a57 <kernel_vsprintf+0x103>

                    }
                }
                state = NORMAL;
   12a7b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
                break;
   12a82:	90                   	nop
    while( (ch = *fmt++ ) ){
   12a83:	8b 45 0c             	mov    0xc(%ebp),%eax
   12a86:	8d 50 01             	lea    0x1(%eax),%edx
   12a89:	89 55 0c             	mov    %edx,0xc(%ebp)
   12a8c:	0f b6 00             	movzbl (%eax),%eax
   12a8f:	88 45 ef             	mov    %al,-0x11(%ebp)
   12a92:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   12a96:	0f 85 d0 fe ff ff    	jne    1296c <kernel_vsprintf+0x18>
        }
    }
}
   12a9c:	90                   	nop
   12a9d:	c9                   	leave  
   12a9e:	c3                   	ret    

00012a9f <pannic>:

void pannic( const char* file , int line , const char* func , const char*  cond ){
   12a9f:	55                   	push   %ebp
   12aa0:	89 e5                	mov    %esp,%ebp
   12aa2:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert failed! %s" , cond );
   12aa5:	83 ec 08             	sub    $0x8,%esp
   12aa8:	ff 75 14             	pushl  0x14(%ebp)
   12aab:	68 37 36 01 00       	push   $0x13637
   12ab0:	e8 f1 02 00 00       	call   12da6 <log_printf>
   12ab5:	83 c4 10             	add    $0x10,%esp
    log_printf("file: %s\n\rline: %d\n\rfunc: %s" , file , line , func );
   12ab8:	ff 75 10             	pushl  0x10(%ebp)
   12abb:	ff 75 0c             	pushl  0xc(%ebp)
   12abe:	ff 75 08             	pushl  0x8(%ebp)
   12ac1:	68 49 36 01 00       	push   $0x13649
   12ac6:	e8 db 02 00 00       	call   12da6 <log_printf>
   12acb:	83 c4 10             	add    $0x10,%esp
    for( ; ; ){
        hlt();
   12ace:	e8 17 fb ff ff       	call   125ea <hlt>
   12ad3:	eb f9                	jmp    12ace <pannic+0x2f>

00012ad5 <list_is_empty>:
static inline int list_is_empty( list_t * list ){
   12ad5:	55                   	push   %ebp
   12ad6:	89 e5                	mov    %esp,%ebp
    return list->count == 0;
   12ad8:	8b 45 08             	mov    0x8(%ebp),%eax
   12adb:	8b 40 08             	mov    0x8(%eax),%eax
   12ade:	85 c0                	test   %eax,%eax
   12ae0:	0f 94 c0             	sete   %al
   12ae3:	0f b6 c0             	movzbl %al,%eax
}
   12ae6:	5d                   	pop    %ebp
   12ae7:	c3                   	ret    

00012ae8 <list_init>:
#include"tools/list.h"

void list_init( list_t * list ){
   12ae8:	55                   	push   %ebp
   12ae9:	89 e5                	mov    %esp,%ebp
    list->first = list->last = (list_node_t *)0;
   12aeb:	8b 45 08             	mov    0x8(%ebp),%eax
   12aee:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12af5:	8b 45 08             	mov    0x8(%ebp),%eax
   12af8:	8b 50 04             	mov    0x4(%eax),%edx
   12afb:	8b 45 08             	mov    0x8(%ebp),%eax
   12afe:	89 10                	mov    %edx,(%eax)
    list->count = 0;
   12b00:	8b 45 08             	mov    0x8(%ebp),%eax
   12b03:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   12b0a:	90                   	nop
   12b0b:	5d                   	pop    %ebp
   12b0c:	c3                   	ret    

00012b0d <list_insert_first>:


void list_insert_first( list_t * list , list_node_t * node ){
   12b0d:	55                   	push   %ebp
   12b0e:	89 e5                	mov    %esp,%ebp
    node -> next = list -> first;
   12b10:	8b 45 08             	mov    0x8(%ebp),%eax
   12b13:	8b 10                	mov    (%eax),%edx
   12b15:	8b 45 0c             	mov    0xc(%ebp),%eax
   12b18:	89 50 04             	mov    %edx,0x4(%eax)
    node -> pre = ( list_node_t * )0;
   12b1b:	8b 45 0c             	mov    0xc(%ebp),%eax
   12b1e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    if( list_is_empty(list) ){
   12b24:	ff 75 08             	pushl  0x8(%ebp)
   12b27:	e8 a9 ff ff ff       	call   12ad5 <list_is_empty>
   12b2c:	83 c4 04             	add    $0x4,%esp
   12b2f:	85 c0                	test   %eax,%eax
   12b31:	74 15                	je     12b48 <list_insert_first+0x3b>
        list -> last = list -> first = node;
   12b33:	8b 45 08             	mov    0x8(%ebp),%eax
   12b36:	8b 55 0c             	mov    0xc(%ebp),%edx
   12b39:	89 10                	mov    %edx,(%eax)
   12b3b:	8b 45 08             	mov    0x8(%ebp),%eax
   12b3e:	8b 10                	mov    (%eax),%edx
   12b40:	8b 45 08             	mov    0x8(%ebp),%eax
   12b43:	89 50 04             	mov    %edx,0x4(%eax)
   12b46:	eb 12                	jmp    12b5a <list_insert_first+0x4d>
    }
    else{
        list -> first -> pre = node;
   12b48:	8b 45 08             	mov    0x8(%ebp),%eax
   12b4b:	8b 00                	mov    (%eax),%eax
   12b4d:	8b 55 0c             	mov    0xc(%ebp),%edx
   12b50:	89 10                	mov    %edx,(%eax)
        list -> first = node;
   12b52:	8b 45 08             	mov    0x8(%ebp),%eax
   12b55:	8b 55 0c             	mov    0xc(%ebp),%edx
   12b58:	89 10                	mov    %edx,(%eax)
    }
    list -> count ++;
   12b5a:	8b 45 08             	mov    0x8(%ebp),%eax
   12b5d:	8b 40 08             	mov    0x8(%eax),%eax
   12b60:	8d 50 01             	lea    0x1(%eax),%edx
   12b63:	8b 45 08             	mov    0x8(%ebp),%eax
   12b66:	89 50 08             	mov    %edx,0x8(%eax)
}
   12b69:	90                   	nop
   12b6a:	c9                   	leave  
   12b6b:	c3                   	ret    

00012b6c <list_insert_last>:
void list_insert_last( list_t * list , list_node_t * node ){
   12b6c:	55                   	push   %ebp
   12b6d:	89 e5                	mov    %esp,%ebp
    node -> pre = list -> last;
   12b6f:	8b 45 08             	mov    0x8(%ebp),%eax
   12b72:	8b 50 04             	mov    0x4(%eax),%edx
   12b75:	8b 45 0c             	mov    0xc(%ebp),%eax
   12b78:	89 10                	mov    %edx,(%eax)
    node -> next = (list_node_t * )0;
   12b7a:	8b 45 0c             	mov    0xc(%ebp),%eax
   12b7d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    if( list_is_empty(list) ){
   12b84:	ff 75 08             	pushl  0x8(%ebp)
   12b87:	e8 49 ff ff ff       	call   12ad5 <list_is_empty>
   12b8c:	83 c4 04             	add    $0x4,%esp
   12b8f:	85 c0                	test   %eax,%eax
   12b91:	74 16                	je     12ba9 <list_insert_last+0x3d>
        list -> first =  list -> last = node;
   12b93:	8b 45 08             	mov    0x8(%ebp),%eax
   12b96:	8b 55 0c             	mov    0xc(%ebp),%edx
   12b99:	89 50 04             	mov    %edx,0x4(%eax)
   12b9c:	8b 45 08             	mov    0x8(%ebp),%eax
   12b9f:	8b 50 04             	mov    0x4(%eax),%edx
   12ba2:	8b 45 08             	mov    0x8(%ebp),%eax
   12ba5:	89 10                	mov    %edx,(%eax)
   12ba7:	eb 15                	jmp    12bbe <list_insert_last+0x52>
    }
    else{
        list -> last -> next = node;
   12ba9:	8b 45 08             	mov    0x8(%ebp),%eax
   12bac:	8b 40 04             	mov    0x4(%eax),%eax
   12baf:	8b 55 0c             	mov    0xc(%ebp),%edx
   12bb2:	89 50 04             	mov    %edx,0x4(%eax)
        list -> last = node;
   12bb5:	8b 45 08             	mov    0x8(%ebp),%eax
   12bb8:	8b 55 0c             	mov    0xc(%ebp),%edx
   12bbb:	89 50 04             	mov    %edx,0x4(%eax)
    }
    list -> count ++;
   12bbe:	8b 45 08             	mov    0x8(%ebp),%eax
   12bc1:	8b 40 08             	mov    0x8(%eax),%eax
   12bc4:	8d 50 01             	lea    0x1(%eax),%edx
   12bc7:	8b 45 08             	mov    0x8(%ebp),%eax
   12bca:	89 50 08             	mov    %edx,0x8(%eax)
}
   12bcd:	90                   	nop
   12bce:	c9                   	leave  
   12bcf:	c3                   	ret    

00012bd0 <list_remove_first>:

list_node_t * list_remove_first( list_t * list ){
   12bd0:	55                   	push   %ebp
   12bd1:	89 e5                	mov    %esp,%ebp
   12bd3:	83 ec 10             	sub    $0x10,%esp
    if( list_is_empty(list) ){
   12bd6:	ff 75 08             	pushl  0x8(%ebp)
   12bd9:	e8 f7 fe ff ff       	call   12ad5 <list_is_empty>
   12bde:	83 c4 04             	add    $0x4,%esp
   12be1:	85 c0                	test   %eax,%eax
   12be3:	74 07                	je     12bec <list_remove_first+0x1c>
        return (list_node_t *)0;
   12be5:	b8 00 00 00 00       	mov    $0x0,%eax
   12bea:	eb 5a                	jmp    12c46 <list_remove_first+0x76>
    }

    list_node_t * remove_node = list -> first;
   12bec:	8b 45 08             	mov    0x8(%ebp),%eax
   12bef:	8b 00                	mov    (%eax),%eax
   12bf1:	89 45 fc             	mov    %eax,-0x4(%ebp)
    list -> first = remove_node -> next;
   12bf4:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12bf7:	8b 50 04             	mov    0x4(%eax),%edx
   12bfa:	8b 45 08             	mov    0x8(%ebp),%eax
   12bfd:	89 10                	mov    %edx,(%eax)

    if( list -> first == (list_node_t *)0 ){
   12bff:	8b 45 08             	mov    0x8(%ebp),%eax
   12c02:	8b 00                	mov    (%eax),%eax
   12c04:	85 c0                	test   %eax,%eax
   12c06:	75 0c                	jne    12c14 <list_remove_first+0x44>
        list -> last = (list_node_t *)0;
   12c08:	8b 45 08             	mov    0x8(%ebp),%eax
   12c0b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12c12:	eb 0b                	jmp    12c1f <list_remove_first+0x4f>
    }
    else{
        list -> first -> pre = ( list_node_t *)0;
   12c14:	8b 45 08             	mov    0x8(%ebp),%eax
   12c17:	8b 00                	mov    (%eax),%eax
   12c19:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }
    list -> count --;
   12c1f:	8b 45 08             	mov    0x8(%ebp),%eax
   12c22:	8b 40 08             	mov    0x8(%eax),%eax
   12c25:	8d 50 ff             	lea    -0x1(%eax),%edx
   12c28:	8b 45 08             	mov    0x8(%ebp),%eax
   12c2b:	89 50 08             	mov    %edx,0x8(%eax)
    remove_node -> pre = remove_node -> next = ( list_node_t * )0;
   12c2e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12c31:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12c38:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12c3b:	8b 50 04             	mov    0x4(%eax),%edx
   12c3e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12c41:	89 10                	mov    %edx,(%eax)
    return remove_node;
   12c43:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   12c46:	c9                   	leave  
   12c47:	c3                   	ret    

00012c48 <list_remove_node>:

list_node_t * list_remove_node( list_t * list , list_node_t * node ){
   12c48:	55                   	push   %ebp
   12c49:	89 e5                	mov    %esp,%ebp
    if( node == list -> first ){
   12c4b:	8b 45 08             	mov    0x8(%ebp),%eax
   12c4e:	8b 00                	mov    (%eax),%eax
   12c50:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12c53:	75 0b                	jne    12c60 <list_remove_node+0x18>
        list -> first = node -> next; 
   12c55:	8b 45 0c             	mov    0xc(%ebp),%eax
   12c58:	8b 50 04             	mov    0x4(%eax),%edx
   12c5b:	8b 45 08             	mov    0x8(%ebp),%eax
   12c5e:	89 10                	mov    %edx,(%eax)
    }
    if( node == list -> last ){
   12c60:	8b 45 08             	mov    0x8(%ebp),%eax
   12c63:	8b 40 04             	mov    0x4(%eax),%eax
   12c66:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12c69:	75 0b                	jne    12c76 <list_remove_node+0x2e>
        list -> last = node -> pre;
   12c6b:	8b 45 0c             	mov    0xc(%ebp),%eax
   12c6e:	8b 10                	mov    (%eax),%edx
   12c70:	8b 45 08             	mov    0x8(%ebp),%eax
   12c73:	89 50 04             	mov    %edx,0x4(%eax)
    }
    if( node -> pre ){
   12c76:	8b 45 0c             	mov    0xc(%ebp),%eax
   12c79:	8b 00                	mov    (%eax),%eax
   12c7b:	85 c0                	test   %eax,%eax
   12c7d:	74 0e                	je     12c8d <list_remove_node+0x45>
        node -> pre -> next = node -> next;
   12c7f:	8b 45 0c             	mov    0xc(%ebp),%eax
   12c82:	8b 00                	mov    (%eax),%eax
   12c84:	8b 55 0c             	mov    0xc(%ebp),%edx
   12c87:	8b 52 04             	mov    0x4(%edx),%edx
   12c8a:	89 50 04             	mov    %edx,0x4(%eax)
    }
    if( node -> next ){
   12c8d:	8b 45 0c             	mov    0xc(%ebp),%eax
   12c90:	8b 40 04             	mov    0x4(%eax),%eax
   12c93:	85 c0                	test   %eax,%eax
   12c95:	74 0d                	je     12ca4 <list_remove_node+0x5c>
        node -> next -> pre = node -> pre;
   12c97:	8b 45 0c             	mov    0xc(%ebp),%eax
   12c9a:	8b 40 04             	mov    0x4(%eax),%eax
   12c9d:	8b 55 0c             	mov    0xc(%ebp),%edx
   12ca0:	8b 12                	mov    (%edx),%edx
   12ca2:	89 10                	mov    %edx,(%eax)
    }

    node -> pre = node -> next = ( list_node_t *)0;
   12ca4:	8b 45 0c             	mov    0xc(%ebp),%eax
   12ca7:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12cae:	8b 45 0c             	mov    0xc(%ebp),%eax
   12cb1:	8b 50 04             	mov    0x4(%eax),%edx
   12cb4:	8b 45 0c             	mov    0xc(%ebp),%eax
   12cb7:	89 10                	mov    %edx,(%eax)
    list -> count --;
   12cb9:	8b 45 08             	mov    0x8(%ebp),%eax
   12cbc:	8b 40 08             	mov    0x8(%eax),%eax
   12cbf:	8d 50 ff             	lea    -0x1(%eax),%edx
   12cc2:	8b 45 08             	mov    0x8(%ebp),%eax
   12cc5:	89 50 08             	mov    %edx,0x8(%eax)
    return node;
   12cc8:	8b 45 0c             	mov    0xc(%ebp),%eax
   12ccb:	5d                   	pop    %ebp
   12ccc:	c3                   	ret    

00012ccd <inb>:
static inline uint8_t inb( uint16_t port ){
   12ccd:	55                   	push   %ebp
   12cce:	89 e5                	mov    %esp,%ebp
   12cd0:	83 ec 14             	sub    $0x14,%esp
   12cd3:	8b 45 08             	mov    0x8(%ebp),%eax
   12cd6:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p] , %[v]" : [v]"=a"(rv) : [p]"d"(port));
   12cda:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   12cde:	89 c2                	mov    %eax,%edx
   12ce0:	ec                   	in     (%dx),%al
   12ce1:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   12ce4:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   12ce8:	c9                   	leave  
   12ce9:	c3                   	ret    

00012cea <outb>:
static inline void outb( uint16_t port , uint8_t data ){
   12cea:	55                   	push   %ebp
   12ceb:	89 e5                	mov    %esp,%ebp
   12ced:	83 ec 08             	sub    $0x8,%esp
   12cf0:	8b 55 08             	mov    0x8(%ebp),%edx
   12cf3:	8b 45 0c             	mov    0xc(%ebp),%eax
   12cf6:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   12cfa:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v] , %[p]"::[p]"d"(port) , [v]"a"(data));
   12cfd:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   12d01:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   12d05:	ee                   	out    %al,(%dx)
}
   12d06:	90                   	nop
   12d07:	c9                   	leave  
   12d08:	c3                   	ret    

00012d09 <log_init>:
#include"ipc/mutex.h"
#define COM1_PORT   0x3F8

static mutex_t mutex;

void log_init( void ){
   12d09:	55                   	push   %ebp
   12d0a:	89 e5                	mov    %esp,%ebp
   12d0c:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&mutex);
   12d0f:	83 ec 0c             	sub    $0xc,%esp
   12d12:	68 e4 8d 01 00       	push   $0x18de4
   12d17:	e8 be f3 ff ff       	call   120da <mutex_init>
   12d1c:	83 c4 10             	add    $0x10,%esp
    outb( COM1_PORT + 1 , 0x00 );
   12d1f:	83 ec 08             	sub    $0x8,%esp
   12d22:	6a 00                	push   $0x0
   12d24:	68 f9 03 00 00       	push   $0x3f9
   12d29:	e8 bc ff ff ff       	call   12cea <outb>
   12d2e:	83 c4 10             	add    $0x10,%esp
    outb( COM1_PORT + 3 , 0x80 ); 
   12d31:	83 ec 08             	sub    $0x8,%esp
   12d34:	68 80 00 00 00       	push   $0x80
   12d39:	68 fb 03 00 00       	push   $0x3fb
   12d3e:	e8 a7 ff ff ff       	call   12cea <outb>
   12d43:	83 c4 10             	add    $0x10,%esp
    outb( COM1_PORT + 0 , 0x03 );
   12d46:	83 ec 08             	sub    $0x8,%esp
   12d49:	6a 03                	push   $0x3
   12d4b:	68 f8 03 00 00       	push   $0x3f8
   12d50:	e8 95 ff ff ff       	call   12cea <outb>
   12d55:	83 c4 10             	add    $0x10,%esp
    outb( COM1_PORT + 1 , 0x00 );
   12d58:	83 ec 08             	sub    $0x8,%esp
   12d5b:	6a 00                	push   $0x0
   12d5d:	68 f9 03 00 00       	push   $0x3f9
   12d62:	e8 83 ff ff ff       	call   12cea <outb>
   12d67:	83 c4 10             	add    $0x10,%esp
    outb( COM1_PORT + 3 , 0x03 );
   12d6a:	83 ec 08             	sub    $0x8,%esp
   12d6d:	6a 03                	push   $0x3
   12d6f:	68 fb 03 00 00       	push   $0x3fb
   12d74:	e8 71 ff ff ff       	call   12cea <outb>
   12d79:	83 c4 10             	add    $0x10,%esp
    outb( COM1_PORT + 2 , 0xc7 );
   12d7c:	83 ec 08             	sub    $0x8,%esp
   12d7f:	68 c7 00 00 00       	push   $0xc7
   12d84:	68 fa 03 00 00       	push   $0x3fa
   12d89:	e8 5c ff ff ff       	call   12cea <outb>
   12d8e:	83 c4 10             	add    $0x10,%esp
    outb( COM1_PORT + 4 , 0x0f );
   12d91:	83 ec 08             	sub    $0x8,%esp
   12d94:	6a 0f                	push   $0xf
   12d96:	68 fc 03 00 00       	push   $0x3fc
   12d9b:	e8 4a ff ff ff       	call   12cea <outb>
   12da0:	83 c4 10             	add    $0x10,%esp
}
   12da3:	90                   	nop
   12da4:	c9                   	leave  
   12da5:	c3                   	ret    

00012da6 <log_printf>:

void log_printf( const char * fmt , ... ){
   12da6:	55                   	push   %ebp
   12da7:	89 e5                	mov    %esp,%ebp
   12da9:	81 ec 98 00 00 00    	sub    $0x98,%esp
    char str_buf[128];
    va_list args;
    kernel_memset( str_buf , '\0' , sizeof(str_buf) );
   12daf:	83 ec 04             	sub    $0x4,%esp
   12db2:	68 80 00 00 00       	push   $0x80
   12db7:	6a 00                	push   $0x0
   12db9:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12dbf:	50                   	push   %eax
   12dc0:	e8 cd f9 ff ff       	call   12792 <kernel_memset>
   12dc5:	83 c4 10             	add    $0x10,%esp
    va_start( args , fmt );
   12dc8:	8d 45 0c             	lea    0xc(%ebp),%eax
   12dcb:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kernel_vsprintf( str_buf , fmt , args );
   12dd1:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   12dd7:	83 ec 04             	sub    $0x4,%esp
   12dda:	50                   	push   %eax
   12ddb:	ff 75 08             	pushl  0x8(%ebp)
   12dde:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12de4:	50                   	push   %eax
   12de5:	e8 6a fb ff ff       	call   12954 <kernel_vsprintf>
   12dea:	83 c4 10             	add    $0x10,%esp
    va_end( args );

    mutex_lock(&mutex);
   12ded:	83 ec 0c             	sub    $0xc,%esp
   12df0:	68 e4 8d 01 00       	push   $0x18de4
   12df5:	e8 0e f3 ff ff       	call   12108 <mutex_lock>
   12dfa:	83 c4 10             	add    $0x10,%esp
//临界区
    const char * p = str_buf;
   12dfd:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12e03:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while( *p != '\0' ){
   12e06:	eb 3b                	jmp    12e43 <log_printf+0x9d>
        while((inb(COM1_PORT + 5) & ( 1 << 6 )) == 0 );
   12e08:	90                   	nop
   12e09:	83 ec 0c             	sub    $0xc,%esp
   12e0c:	68 fd 03 00 00       	push   $0x3fd
   12e11:	e8 b7 fe ff ff       	call   12ccd <inb>
   12e16:	83 c4 10             	add    $0x10,%esp
   12e19:	0f b6 c0             	movzbl %al,%eax
   12e1c:	83 e0 40             	and    $0x40,%eax
   12e1f:	85 c0                	test   %eax,%eax
   12e21:	74 e6                	je     12e09 <log_printf+0x63>
        outb( COM1_PORT , *p++ );
   12e23:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12e26:	8d 50 01             	lea    0x1(%eax),%edx
   12e29:	89 55 f4             	mov    %edx,-0xc(%ebp)
   12e2c:	0f b6 00             	movzbl (%eax),%eax
   12e2f:	0f b6 c0             	movzbl %al,%eax
   12e32:	83 ec 08             	sub    $0x8,%esp
   12e35:	50                   	push   %eax
   12e36:	68 f8 03 00 00       	push   $0x3f8
   12e3b:	e8 aa fe ff ff       	call   12cea <outb>
   12e40:	83 c4 10             	add    $0x10,%esp
    while( *p != '\0' ){
   12e43:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12e46:	0f b6 00             	movzbl (%eax),%eax
   12e49:	84 c0                	test   %al,%al
   12e4b:	75 bb                	jne    12e08 <log_printf+0x62>
    }

    outb( COM1_PORT , '\r' );
   12e4d:	83 ec 08             	sub    $0x8,%esp
   12e50:	6a 0d                	push   $0xd
   12e52:	68 f8 03 00 00       	push   $0x3f8
   12e57:	e8 8e fe ff ff       	call   12cea <outb>
   12e5c:	83 c4 10             	add    $0x10,%esp
    outb( COM1_PORT , '\n' );
   12e5f:	83 ec 08             	sub    $0x8,%esp
   12e62:	6a 0a                	push   $0xa
   12e64:	68 f8 03 00 00       	push   $0x3f8
   12e69:	e8 7c fe ff ff       	call   12cea <outb>
   12e6e:	83 c4 10             	add    $0x10,%esp
//临界区
    mutex_unlock(&mutex);
   12e71:	83 ec 0c             	sub    $0xc,%esp
   12e74:	68 e4 8d 01 00       	push   $0x18de4
   12e79:	e8 1b f3 ff ff       	call   12199 <mutex_unlock>
   12e7e:	83 c4 10             	add    $0x10,%esp
   12e81:	90                   	nop
   12e82:	c9                   	leave  
   12e83:	c3                   	ret    

Disassembly of section .first_task:

80000000 <first_task_entry>:
	.code32
	.text
	.global first_task_entry
	.extern first_task_main
first_task_entry:
	mov %ss , %ax
80000000:	66 8c d0             	mov    %ss,%ax
	mov %ax , %ds
80000003:	8e d8                	mov    %eax,%ds
	mov %ax , %ss
80000005:	8e d0                	mov    %eax,%ss
	mov %ax , %es
80000007:	8e c0                	mov    %eax,%es
	mov %ax , %fs
80000009:	8e e0                	mov    %eax,%fs
	mov %ax , %gs
8000000b:	8e e8                	mov    %eax,%gs
	jmp first_task_main
8000000d:	e9 71 00 00 00       	jmp    80000083 <first_task_main>

80000012 <sys_call>:
    int arg2;
    int arg3;
}syscall_args_t;


static inline int sys_call( syscall_args_t * args ){
80000012:	55                   	push   %ebp
80000013:	89 e5                	mov    %esp,%ebp
80000015:	57                   	push   %edi
80000016:	56                   	push   %esi
80000017:	53                   	push   %ebx
80000018:	83 ec 10             	sub    $0x10,%esp
    uint32_t addr[] = { 0 , SELECTOR_SYSCAL | 0 };
8000001b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
80000022:	c7 45 f0 18 00 00 00 	movl   $0x18,-0x10(%ebp)
        "push %[arg2]\n\t"
        "push %[arg1]\n\t"
        "push %[arg0]\n\t"
        "push %[id]\n\t"
        "lcall *(%[a])"::
        [arg3]"r"(args->arg3) , [arg2]"r"(args->arg2) , [arg1]"r"(args->arg1) ,
80000029:	8b 45 08             	mov    0x8(%ebp),%eax
8000002c:	8b 40 10             	mov    0x10(%eax),%eax
8000002f:	8b 55 08             	mov    0x8(%ebp),%edx
80000032:	8b 52 0c             	mov    0xc(%edx),%edx
80000035:	8b 4d 08             	mov    0x8(%ebp),%ecx
80000038:	8b 49 08             	mov    0x8(%ecx),%ecx
        [arg0]"r"(args->arg0) , [id]"r"(args->id) ,
8000003b:	8b 5d 08             	mov    0x8(%ebp),%ebx
8000003e:	8b 5b 04             	mov    0x4(%ebx),%ebx
80000041:	8b 75 08             	mov    0x8(%ebp),%esi
80000044:	8b 36                	mov    (%esi),%esi
    __asm__ __volatile__(
80000046:	8d 7d ec             	lea    -0x14(%ebp),%edi
80000049:	50                   	push   %eax
8000004a:	52                   	push   %edx
8000004b:	51                   	push   %ecx
8000004c:	53                   	push   %ebx
8000004d:	56                   	push   %esi
8000004e:	ff 1f                	lcall  *(%edi)
        [a]"r"(addr));
}
80000050:	90                   	nop
80000051:	83 c4 10             	add    $0x10,%esp
80000054:	5b                   	pop    %ebx
80000055:	5e                   	pop    %esi
80000056:	5f                   	pop    %edi
80000057:	5d                   	pop    %ebp
80000058:	c3                   	ret    

80000059 <msleep>:

static inline void msleep( int ms ){
80000059:	55                   	push   %ebp
8000005a:	89 e5                	mov    %esp,%ebp
8000005c:	83 ec 20             	sub    $0x20,%esp
    if( ms <= 0 ){
8000005f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
80000063:	7e 1b                	jle    80000080 <msleep+0x27>
        return ;
    }
    syscall_args_t args;
    args.id = SYS_sleep;
80000065:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    args.arg0 = ms;
8000006c:	8b 45 08             	mov    0x8(%ebp),%eax
8000006f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    sys_call(&args);
80000072:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000075:	50                   	push   %eax
80000076:	e8 97 ff ff ff       	call   80000012 <sys_call>
8000007b:	83 c4 04             	add    $0x4,%esp
8000007e:	eb 01                	jmp    80000081 <msleep+0x28>
        return ;
80000080:	90                   	nop
}
80000081:	c9                   	leave  
80000082:	c3                   	ret    

80000083 <first_task_main>:
#include"core/task.h"
#include"tools/log.h"
#include"core/memory.h"
#include"applib/lib_syscall.h"
int first_task_main( void ){
80000083:	55                   	push   %ebp
80000084:	89 e5                	mov    %esp,%ebp
    for( ; ; ){
//        log_printf("first task");
        msleep(1000);
80000086:	68 e8 03 00 00       	push   $0x3e8
8000008b:	e8 c9 ff ff ff       	call   80000059 <msleep>
80000090:	83 c4 04             	add    $0x4,%esp
80000093:	eb f1                	jmp    80000086 <first_task_main+0x3>
