
D:/OS/diy-x86os-master/start/start/build/source/kernel/kernel.elf:     file format elf32-i386
D:/OS/diy-x86os-master/start/start/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00003853 memsz 0x00003853 flags r-x
    LOAD off    0x00005000 vaddr 0x00014000 paddr 0x00014000 align 2**12
         filesz 0x00000044 memsz 0x00006e00 flags rw-
    LOAD off    0x00006000 vaddr 0x80000000 paddr 0x0001ae00 align 2**12
         filesz 0x00000110 memsz 0x00000110 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ebd  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000993  00012ec0  00012ec0  00003ec0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000044  00014000  00014000  00005000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00005e00  00015000  00015000  00005044  2**12
                  ALLOC
  4 .first_task   00000110  80000000  0001ae00  00006000  2**0
                  CONTENTS, ALLOC, LOAD, CODE
  5 .debug_line   00001ca7  00000000  00000000  00006110  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004a86  00000000  00000000  00007db7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000135b  00000000  00000000  0000c83d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000200  00000000  00000000  0000db98  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000012af  00000000  00000000  0000dd98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .comment      00000011  00000000  00000000  0000f047  2**0
                  CONTENTS, READONLY
 11 .debug_frame  0000144c  00000000  00000000  0000f058  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
00012ec0 l    d  .rodata	00000000 .rodata
00014000 l    d  .data	00000000 .data
00015000 l    d  .bss	00000000 .bss
80000000 l    d  .first_task	00000000 .first_task
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 CMakeFiles/kernel.dir/init/start.S.obj
00010013 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 memory.c
000102f8 l     F .text	0000000c write_cr3
00010304 l     F .text	00000011 mmu_set_page_dir
00010315 l     F .text	00000014 pde_index
00010329 l     F .text	00000019 pte_index
00010342 l     F .text	00000010 pde_paddr
00010352 l     F .text	00000010 pte_paddr
00010362 l     F .text	00000014 down2
00010376 l     F .text	0000001c up2
00015000 l     O .bss	00000028 paddr_alloc
00016000 l     O .bss	00001004 kernel_page_dir
00010392 l     F .text	00000058 addr_alloc_init
000103ea l     F .text	00000067 addr_alloc_page
00010451 l     F .text	00000062 addr_free_page
00012fd0 l     O .rodata	00000012 __func__.2207
00014000 l     O .data	00000040 kernel_map.2218
000106e0 l     F .text	00000037 total_mem_size
00012fe4 l     O .rodata	0000000c __func__.2246
00010a9e l     F .text	00000010 curr_page_dir
00000000 l    df *ABS*	00000000 syscall.c
00013000 l     O .rodata	00000194 sys_table
00000000 l    df *ABS*	00000000 task.c
00010bbd l     F .text	0000001b list_node_init
00010bd8 l     F .text	0000000b list_node_next
00010be3 l     F .text	0000000b list_count
00010bee l     F .text	0000000a list_first
00010bf8 l     F .text	00000007 hlt
00010bff l     F .text	00000017 write_tr
00010c16 l     F .text	0000000c write_cr3
00010c22 l     F .text	00000011 mmu_set_page_dir
00017020 l     O .bss	00001000 idle_task_stack
00018020 l     O .bss	000001a0 task_manager
00010c33 l     F .text	00000188 tss_init
00013248 l     O .rodata	0000000a __func__.2270
00013254 l     O .rodata	00000010 __func__.2288
00010f9f l     F .text	0000000a idle_task_entry
00000000 l    df *ABS*	00000000 cpu.c
0001133a l     F .text	00000028 lgdt
00011362 l     F .text	0000001a far_jump
000181c0 l     O .bss	00000800 gdt_table
000189c0 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 irq.c
000115bc l     F .text	00000007 cli
000115c3 l     F .text	00000007 sti
000115ca l     F .text	0000001d inb
000115e7 l     F .text	0000001f outb
00011606 l     F .text	00000028 lidt
0001162e l     F .text	00000007 hlt
00011635 l     F .text	00000010 read_eflags
00011645 l     F .text	0000000b write_eflags
00011650 l     F .text	00000011 read_cr2
00011661 l     F .text	000000ff dump_core_regs
00011760 l     F .text	0000003a do_default_handler
00011b49 l     F .text	00000093 init_pic
000189e0 l     O .bss	00000400 idt_table
00000000 l    df *ABS*	00000000 mmu.c
00000000 l    df *ABS*	00000000 time.c
00011f3c l     F .text	0000001f outb
00018de0 l     O .bss	00000004 sys_tick
00011f83 l     F .text	00000060 init_pit
00000000 l    df *ABS*	00000000 init.c
000137f4 l     O .rodata	0000000c __func__.2269
00013800 l     O .rodata	00000013 __func__.2274
00000000 l    df *ABS*	00000000 mutex.c
00012108 l     F .text	0000000b list_count
00000000 l    df *ABS*	00000000 sem.c
0001228f l     F .text	0000000b list_count
00000000 l    df *ABS*	00000000 bitmap.c
00000000 l    df *ABS*	00000000 klib.c
00012623 l     F .text	00000007 hlt
00014040 l     O .data	00000004 num2ch.1933
00000000 l    df *ABS*	00000000 list.c
00012b0e l     F .text	00000013 list_is_empty
00000000 l    df *ABS*	00000000 log.c
00012d06 l     F .text	0000001d inb
00012d23 l     F .text	0000001f outb
00018de4 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 first_task.c
80000012 l     F .first_task	0000004a sys_call
8000005c l     F .first_task	0000002a msleep
80000086 l     F .first_task	00000021 getpid
800000a7 l     F .first_task	00000028 print_msg
00011b2d g     F .text	0000001c do_handler_control_protection_exception
0001243c g     F .text	0000003e bitmap_get_bit
0001277c g     F .text	0000004f kernel_memcpy
000110f0 g     F .text	0000000a task_current
00011b11 g     F .text	0000001c do_handler_virtualization_exception
00011842 g     F .text	0000001c do_handler_bound_range_exceeded
00011edd g     F .text	0000000b irq_enable_global
00012ba5 g     F .text	00000064 list_insert_last
000118ce g     F .text	0000001c do_handler_segment_not_present
00011059 g     F .text	00000034 task_set_ready
0001254e g     F .text	0000001b bitmap_is_set
000127cb g     F .text	00000041 kernel_memset
00010b32 g     F .text	0000008b do_handler_syscall
0001148d g     F .text	0000001e cpu_init
00012d42 g     F .text	0000009d log_init
000120b2 g     F .text	00000056 init_main
0001020f g       .text	00000000 exception_handler_alignment_check
00011583 g     F .text	00000039 gdt_free_sel
00010b18 g     F .text	0000001a sys_print_msg
0001262a g     F .text	00000047 kernel_strcpy
00014000 g       .data	00000000 s_data
00011dd6 g     F .text	00000080 irq_enable
0001002b g       .text	00000000 exception_handler_unknown
000100a7 g       .text	00000000 exception_handler_breakpoint
00011826 g     F .text	0000001c do_handler_overflow
00011abd g     F .text	0000001c do_handler_alignment_check
000105b9 g     F .text	00000084 memory_create_map
000101b6 g       .text	00000000 exception_handler_general_protection
00011906 g     F .text	000000b5 do_handler_general_protection
000123aa g     F .text	00000029 sem_count
800000cf g     F .first_task	00000034 first_task_main
000117b6 g     F .text	0000001c do_handler_divider
0001247a g     F .text	000000d4 bitmap_set_bit
00011896 g     F .text	0000001c do_handler_double_fault
000119bb g     F .text	000000e6 do_handler_page_fault
000100e5 g       .text	00000000 exception_handler_bound_range_exceeded
0001026a g       .text	00000000 exception_handler_virtualization_exception
00011570 g     F .text	00000013 swith_to_tss
00010142 g       .text	00000000 exception_handler_double_fault
00011ee8 g     F .text	0000002b pic_send_eoi
00010f95 g     F .text	0000000a task_first_task
00010000 g       .text	00000000 s_text
000107f8 g     F .text	00000085 memory_create_uvm
000122bd g     F .text	0000006b sem_wait
00010a5c g     F .text	00000022 memory_alloc_page_for
00012c81 g     F .text	00000085 list_remove_node
00010199 g       .text	00000000 exception_handler_stack_segment_fault
80000000 g       .first_task	00000000 first_task_entry
000100c6 g       .text	00000000 exception_handler_overflow
000102c5 g       .text	00000000 simple_switch
000102a6 g       .text	00000000 exception_handler_time
00011af5 g     F .text	0000001c do_handler_simd_exception
00018e00 g     O .bss	00002000 stack
000112cd g     F .text	00000057 sys_sleep
00010aae g     F .text	0000006a memory_free_page
0001ae00 g       *ABS*	00000000 s_first_task
00010988 g     F .text	000000d4 memory_alloc_for_page_dir
00012328 g     F .text	00000082 sem_notify
0001185e g     F .text	0000001c do_handler_invalid_opcode
0001015f g       .text	00000000 exception_handler_invalid_tss
00011aa1 g     F .text	0000001c do_handler_fpu_error
00010ecf g     F .text	000000c6 task_first_init
00011ad9 g     F .text	0000001c do_handler_machine_check
000117d2 g     F .text	0000001c do_handler_Debug
000104b3 g     F .text	00000056 show_mem_info
0001024b g       .text	00000000 exception_handler_simd_exception
00012b46 g     F .text	0000005f list_insert_first
000112ad g     F .text	00000020 task_set_wakeup
000117ee g     F .text	0000001c do_handler_NMI
0001004a g       .text	00000000 exception_handler_divider
00012671 g     F .text	00000070 kernel_strncpy
00011ed2 g     F .text	0000000b irq_disable_global
000110fa g     F .text	00000061 sys_sched_yield
0001af10 g       *ABS*	00000000 mem_free_start
00011ffb g     F .text	00000053 kernel_init
0001229a g     F .text	00000023 sem_init
00010000 g       .text	00000000 _start
0001298d g     F .text	0000014b kernel_vsprintf
00010104 g       .text	00000000 exception_handler_invalid_opcode
0001ae00 g       .bss	00000000 e_data
00012141 g     F .text	00000091 mutex_lock
0001022c g       .text	00000000 exception_handler_machine_check
000118b2 g     F .text	0000001c do_handler_invalid_tss
00000000 g       .text	00000000 kernel_base
0001af10 g       *ABS*	00000000 e_first_task
00011273 g     F .text	0000003a task_set_sleep
00011d9c g     F .text	0000003a irq_install
00011402 g     F .text	0000008b init_gdt
00011f13 g     F .text	00000018 irq_enter_protection
00012113 g     F .text	0000002e mutex_init
00011e56 g     F .text	0000007c irq_disable
0001187a g     F .text	0000001c do_handler_device_not_available
0001087d g     F .text	000000ec free_pagemap
000123d3 g     F .text	00000016 bitmap_byte_count
0001115b g     F .text	0000005b task_dispatch
0001204e g     F .text	00000064 move_to_first_task
000110ad g     F .text	00000043 task_next_run
0001280c g     F .text	00000064 kernel_memcmp
0001063d g     F .text	000000a3 create_kernel_table
00012b21 g     F .text	00000025 list_init
000101d3 g       .text	00000000 exception_handler_page_fault
0001108d g     F .text	00000020 task_set_block
0001179a g     F .text	0000001c do_handler_unknown
00010a7e g     F .text	00000020 memory_alloc_page
000101f0 g       .text	00000000 exception_handler_fpu_error
00010eb1 g     F .text	0000001e task_switch_from_to
00011bdc g     F .text	000001c0 irq_init
000121d2 g     F .text	000000bd mutex_unlock
00011f2b g     F .text	00000011 irq_leave_protection
00012741 g     F .text	0000003b kernel_strlen
0001137c g     F .text	00000086 segment_desc_set
000102da g       .text	00000000 exception_handler_syscall
00012c09 g     F .text	00000078 list_remove_first
00013853 g       .rodata	00000000 e_text
00010289 g       .text	00000000 exception_handler_control_protection_exception
000123e9 g     F .text	00000053 bitmap_init
0001017c g       .text	00000000 exception_handler_segment_not_present
00010088 g       .text	00000000 exception_handler_NMI
00012569 g     F .text	000000ba bitmap_alloc_nbits
00010fa9 g     F .text	000000b0 task_manager_init
00010069 g       .text	00000000 exception_handler_Debug
000111b6 g     F .text	000000bd task_time_tick
00010717 g     F .text	000000e1 memory_init
00012ad8 g     F .text	00000036 pannic
000118ea g     F .text	0000001c do_handler_stack_segment_fault
0001180a g     F .text	0000001c do_handler_breakpoint
00010969 g     F .text	0000001f task_free_page_map
00012ddf g     F .text	000000de log_printf
00010dbb g     F .text	000000f6 task_init
00012870 g     F .text	00000024 kernel_sprintf
000126e1 g     F .text	00000060 kernel_strncpm
00011324 g     F .text	00000016 sys_getpid
000114f2 g     F .text	0000007e gdt_alloc_desc
00012894 g     F .text	000000f9 kernel_itoa
000114ab g     F .text	00000047 gate_desc_set
00010123 g       .text	00000000 exception_handler_device_not_available
00010509 g     F .text	000000b0 find_pte
00011f5b g     F .text	00000028 do_handler_time
00011fe3 g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
#include"os_cfg.h"
    .text
    .extern kernel_init , init_main
    .global _start
_start:
    push %ebp
   10000:	55                   	push   %ebp
    mov %esp , %ebp
   10001:	89 e5                	mov    %esp,%ebp
    mov 0x8(%ebp) , %eax
   10003:	8b 45 08             	mov    0x8(%ebp),%eax

    push %eax
   10006:	50                   	push   %eax
    call kernel_init
   10007:	e8 ef 1f 00 00       	call   11ffb <kernel_init>
    jmp $KERNEL_SELECTOR_CS , $gdt_reload
   1000c:	ea 13 00 01 00 08 00 	ljmp   $0x8,$0x10013

00010013 <gdt_reload>:
gdt_reload:
    mov $KERNEL_SELECTOR_DS , %ax
   10013:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax , %ds
   10017:	8e d8                	mov    %eax,%ds
	mov %ax , %ss
   10019:	8e d0                	mov    %eax,%ss
	mov %ax , %es
   1001b:	8e c0                	mov    %eax,%es
	mov %ax , %fs
   1001d:	8e e0                	mov    %eax,%fs
	mov %ax , %gs
   1001f:	8e e8                	mov    %eax,%gs
    mov $( stack + KERNEL_STACK_SIZE ) , %esp
   10021:	bc 00 ae 01 00       	mov    $0x1ae00,%esp
    jmp init_main
   10026:	e9 87 20 00 00       	jmp    120b2 <init_main>

0001002b <exception_handler_unknown>:
    popa
    add $( 2 * 4 ) , %esp
    iret
.endm

exception_handler unknown , -1 , 0
   1002b:	6a 00                	push   $0x0
   1002d:	6a ff                	push   $0xffffffff
   1002f:	60                   	pusha  
   10030:	1e                   	push   %ds
   10031:	06                   	push   %es
   10032:	0f a0                	push   %fs
   10034:	0f a8                	push   %gs
   10036:	54                   	push   %esp
   10037:	e8 5e 17 00 00       	call   1179a <do_handler_unknown>
   1003c:	83 c4 04             	add    $0x4,%esp
   1003f:	0f a9                	pop    %gs
   10041:	0f a1                	pop    %fs
   10043:	07                   	pop    %es
   10044:	1f                   	pop    %ds
   10045:	61                   	popa   
   10046:	83 c4 08             	add    $0x8,%esp
   10049:	cf                   	iret   

0001004a <exception_handler_divider>:
exception_handler divider , 0 , 0
   1004a:	6a 00                	push   $0x0
   1004c:	6a 00                	push   $0x0
   1004e:	60                   	pusha  
   1004f:	1e                   	push   %ds
   10050:	06                   	push   %es
   10051:	0f a0                	push   %fs
   10053:	0f a8                	push   %gs
   10055:	54                   	push   %esp
   10056:	e8 5b 17 00 00       	call   117b6 <do_handler_divider>
   1005b:	83 c4 04             	add    $0x4,%esp
   1005e:	0f a9                	pop    %gs
   10060:	0f a1                	pop    %fs
   10062:	07                   	pop    %es
   10063:	1f                   	pop    %ds
   10064:	61                   	popa   
   10065:	83 c4 08             	add    $0x8,%esp
   10068:	cf                   	iret   

00010069 <exception_handler_Debug>:
exception_handler Debug , 1 , 0
   10069:	6a 00                	push   $0x0
   1006b:	6a 01                	push   $0x1
   1006d:	60                   	pusha  
   1006e:	1e                   	push   %ds
   1006f:	06                   	push   %es
   10070:	0f a0                	push   %fs
   10072:	0f a8                	push   %gs
   10074:	54                   	push   %esp
   10075:	e8 58 17 00 00       	call   117d2 <do_handler_Debug>
   1007a:	83 c4 04             	add    $0x4,%esp
   1007d:	0f a9                	pop    %gs
   1007f:	0f a1                	pop    %fs
   10081:	07                   	pop    %es
   10082:	1f                   	pop    %ds
   10083:	61                   	popa   
   10084:	83 c4 08             	add    $0x8,%esp
   10087:	cf                   	iret   

00010088 <exception_handler_NMI>:
exception_handler NMI , 2 , 0
   10088:	6a 00                	push   $0x0
   1008a:	6a 02                	push   $0x2
   1008c:	60                   	pusha  
   1008d:	1e                   	push   %ds
   1008e:	06                   	push   %es
   1008f:	0f a0                	push   %fs
   10091:	0f a8                	push   %gs
   10093:	54                   	push   %esp
   10094:	e8 55 17 00 00       	call   117ee <do_handler_NMI>
   10099:	83 c4 04             	add    $0x4,%esp
   1009c:	0f a9                	pop    %gs
   1009e:	0f a1                	pop    %fs
   100a0:	07                   	pop    %es
   100a1:	1f                   	pop    %ds
   100a2:	61                   	popa   
   100a3:	83 c4 08             	add    $0x8,%esp
   100a6:	cf                   	iret   

000100a7 <exception_handler_breakpoint>:
exception_handler breakpoint , 3 , 0
   100a7:	6a 00                	push   $0x0
   100a9:	6a 03                	push   $0x3
   100ab:	60                   	pusha  
   100ac:	1e                   	push   %ds
   100ad:	06                   	push   %es
   100ae:	0f a0                	push   %fs
   100b0:	0f a8                	push   %gs
   100b2:	54                   	push   %esp
   100b3:	e8 52 17 00 00       	call   1180a <do_handler_breakpoint>
   100b8:	83 c4 04             	add    $0x4,%esp
   100bb:	0f a9                	pop    %gs
   100bd:	0f a1                	pop    %fs
   100bf:	07                   	pop    %es
   100c0:	1f                   	pop    %ds
   100c1:	61                   	popa   
   100c2:	83 c4 08             	add    $0x8,%esp
   100c5:	cf                   	iret   

000100c6 <exception_handler_overflow>:
exception_handler overflow , 4 , 0
   100c6:	6a 00                	push   $0x0
   100c8:	6a 04                	push   $0x4
   100ca:	60                   	pusha  
   100cb:	1e                   	push   %ds
   100cc:	06                   	push   %es
   100cd:	0f a0                	push   %fs
   100cf:	0f a8                	push   %gs
   100d1:	54                   	push   %esp
   100d2:	e8 4f 17 00 00       	call   11826 <do_handler_overflow>
   100d7:	83 c4 04             	add    $0x4,%esp
   100da:	0f a9                	pop    %gs
   100dc:	0f a1                	pop    %fs
   100de:	07                   	pop    %es
   100df:	1f                   	pop    %ds
   100e0:	61                   	popa   
   100e1:	83 c4 08             	add    $0x8,%esp
   100e4:	cf                   	iret   

000100e5 <exception_handler_bound_range_exceeded>:
exception_handler bound_range_exceeded , 5 , 0
   100e5:	6a 00                	push   $0x0
   100e7:	6a 05                	push   $0x5
   100e9:	60                   	pusha  
   100ea:	1e                   	push   %ds
   100eb:	06                   	push   %es
   100ec:	0f a0                	push   %fs
   100ee:	0f a8                	push   %gs
   100f0:	54                   	push   %esp
   100f1:	e8 4c 17 00 00       	call   11842 <do_handler_bound_range_exceeded>
   100f6:	83 c4 04             	add    $0x4,%esp
   100f9:	0f a9                	pop    %gs
   100fb:	0f a1                	pop    %fs
   100fd:	07                   	pop    %es
   100fe:	1f                   	pop    %ds
   100ff:	61                   	popa   
   10100:	83 c4 08             	add    $0x8,%esp
   10103:	cf                   	iret   

00010104 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode , 6 , 0
   10104:	6a 00                	push   $0x0
   10106:	6a 06                	push   $0x6
   10108:	60                   	pusha  
   10109:	1e                   	push   %ds
   1010a:	06                   	push   %es
   1010b:	0f a0                	push   %fs
   1010d:	0f a8                	push   %gs
   1010f:	54                   	push   %esp
   10110:	e8 49 17 00 00       	call   1185e <do_handler_invalid_opcode>
   10115:	83 c4 04             	add    $0x4,%esp
   10118:	0f a9                	pop    %gs
   1011a:	0f a1                	pop    %fs
   1011c:	07                   	pop    %es
   1011d:	1f                   	pop    %ds
   1011e:	61                   	popa   
   1011f:	83 c4 08             	add    $0x8,%esp
   10122:	cf                   	iret   

00010123 <exception_handler_device_not_available>:
exception_handler device_not_available , 7 , 0
   10123:	6a 00                	push   $0x0
   10125:	6a 07                	push   $0x7
   10127:	60                   	pusha  
   10128:	1e                   	push   %ds
   10129:	06                   	push   %es
   1012a:	0f a0                	push   %fs
   1012c:	0f a8                	push   %gs
   1012e:	54                   	push   %esp
   1012f:	e8 46 17 00 00       	call   1187a <do_handler_device_not_available>
   10134:	83 c4 04             	add    $0x4,%esp
   10137:	0f a9                	pop    %gs
   10139:	0f a1                	pop    %fs
   1013b:	07                   	pop    %es
   1013c:	1f                   	pop    %ds
   1013d:	61                   	popa   
   1013e:	83 c4 08             	add    $0x8,%esp
   10141:	cf                   	iret   

00010142 <exception_handler_double_fault>:
exception_handler double_fault , 8 , 1
   10142:	6a 08                	push   $0x8
   10144:	60                   	pusha  
   10145:	1e                   	push   %ds
   10146:	06                   	push   %es
   10147:	0f a0                	push   %fs
   10149:	0f a8                	push   %gs
   1014b:	54                   	push   %esp
   1014c:	e8 45 17 00 00       	call   11896 <do_handler_double_fault>
   10151:	83 c4 04             	add    $0x4,%esp
   10154:	0f a9                	pop    %gs
   10156:	0f a1                	pop    %fs
   10158:	07                   	pop    %es
   10159:	1f                   	pop    %ds
   1015a:	61                   	popa   
   1015b:	83 c4 08             	add    $0x8,%esp
   1015e:	cf                   	iret   

0001015f <exception_handler_invalid_tss>:
exception_handler invalid_tss , 10 , 1
   1015f:	6a 0a                	push   $0xa
   10161:	60                   	pusha  
   10162:	1e                   	push   %ds
   10163:	06                   	push   %es
   10164:	0f a0                	push   %fs
   10166:	0f a8                	push   %gs
   10168:	54                   	push   %esp
   10169:	e8 44 17 00 00       	call   118b2 <do_handler_invalid_tss>
   1016e:	83 c4 04             	add    $0x4,%esp
   10171:	0f a9                	pop    %gs
   10173:	0f a1                	pop    %fs
   10175:	07                   	pop    %es
   10176:	1f                   	pop    %ds
   10177:	61                   	popa   
   10178:	83 c4 08             	add    $0x8,%esp
   1017b:	cf                   	iret   

0001017c <exception_handler_segment_not_present>:
exception_handler segment_not_present , 11 , 1
   1017c:	6a 0b                	push   $0xb
   1017e:	60                   	pusha  
   1017f:	1e                   	push   %ds
   10180:	06                   	push   %es
   10181:	0f a0                	push   %fs
   10183:	0f a8                	push   %gs
   10185:	54                   	push   %esp
   10186:	e8 43 17 00 00       	call   118ce <do_handler_segment_not_present>
   1018b:	83 c4 04             	add    $0x4,%esp
   1018e:	0f a9                	pop    %gs
   10190:	0f a1                	pop    %fs
   10192:	07                   	pop    %es
   10193:	1f                   	pop    %ds
   10194:	61                   	popa   
   10195:	83 c4 08             	add    $0x8,%esp
   10198:	cf                   	iret   

00010199 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault , 12 , 1
   10199:	6a 0c                	push   $0xc
   1019b:	60                   	pusha  
   1019c:	1e                   	push   %ds
   1019d:	06                   	push   %es
   1019e:	0f a0                	push   %fs
   101a0:	0f a8                	push   %gs
   101a2:	54                   	push   %esp
   101a3:	e8 42 17 00 00       	call   118ea <do_handler_stack_segment_fault>
   101a8:	83 c4 04             	add    $0x4,%esp
   101ab:	0f a9                	pop    %gs
   101ad:	0f a1                	pop    %fs
   101af:	07                   	pop    %es
   101b0:	1f                   	pop    %ds
   101b1:	61                   	popa   
   101b2:	83 c4 08             	add    $0x8,%esp
   101b5:	cf                   	iret   

000101b6 <exception_handler_general_protection>:
exception_handler general_protection , 13 , 1
   101b6:	6a 0d                	push   $0xd
   101b8:	60                   	pusha  
   101b9:	1e                   	push   %ds
   101ba:	06                   	push   %es
   101bb:	0f a0                	push   %fs
   101bd:	0f a8                	push   %gs
   101bf:	54                   	push   %esp
   101c0:	e8 41 17 00 00       	call   11906 <do_handler_general_protection>
   101c5:	83 c4 04             	add    $0x4,%esp
   101c8:	0f a9                	pop    %gs
   101ca:	0f a1                	pop    %fs
   101cc:	07                   	pop    %es
   101cd:	1f                   	pop    %ds
   101ce:	61                   	popa   
   101cf:	83 c4 08             	add    $0x8,%esp
   101d2:	cf                   	iret   

000101d3 <exception_handler_page_fault>:
exception_handler page_fault , 14 , 1
   101d3:	6a 0e                	push   $0xe
   101d5:	60                   	pusha  
   101d6:	1e                   	push   %ds
   101d7:	06                   	push   %es
   101d8:	0f a0                	push   %fs
   101da:	0f a8                	push   %gs
   101dc:	54                   	push   %esp
   101dd:	e8 d9 17 00 00       	call   119bb <do_handler_page_fault>
   101e2:	83 c4 04             	add    $0x4,%esp
   101e5:	0f a9                	pop    %gs
   101e7:	0f a1                	pop    %fs
   101e9:	07                   	pop    %es
   101ea:	1f                   	pop    %ds
   101eb:	61                   	popa   
   101ec:	83 c4 08             	add    $0x8,%esp
   101ef:	cf                   	iret   

000101f0 <exception_handler_fpu_error>:
exception_handler fpu_error , 16 , 0
   101f0:	6a 00                	push   $0x0
   101f2:	6a 10                	push   $0x10
   101f4:	60                   	pusha  
   101f5:	1e                   	push   %ds
   101f6:	06                   	push   %es
   101f7:	0f a0                	push   %fs
   101f9:	0f a8                	push   %gs
   101fb:	54                   	push   %esp
   101fc:	e8 a0 18 00 00       	call   11aa1 <do_handler_fpu_error>
   10201:	83 c4 04             	add    $0x4,%esp
   10204:	0f a9                	pop    %gs
   10206:	0f a1                	pop    %fs
   10208:	07                   	pop    %es
   10209:	1f                   	pop    %ds
   1020a:	61                   	popa   
   1020b:	83 c4 08             	add    $0x8,%esp
   1020e:	cf                   	iret   

0001020f <exception_handler_alignment_check>:
exception_handler alignment_check , 17 , 1
   1020f:	6a 11                	push   $0x11
   10211:	60                   	pusha  
   10212:	1e                   	push   %ds
   10213:	06                   	push   %es
   10214:	0f a0                	push   %fs
   10216:	0f a8                	push   %gs
   10218:	54                   	push   %esp
   10219:	e8 9f 18 00 00       	call   11abd <do_handler_alignment_check>
   1021e:	83 c4 04             	add    $0x4,%esp
   10221:	0f a9                	pop    %gs
   10223:	0f a1                	pop    %fs
   10225:	07                   	pop    %es
   10226:	1f                   	pop    %ds
   10227:	61                   	popa   
   10228:	83 c4 08             	add    $0x8,%esp
   1022b:	cf                   	iret   

0001022c <exception_handler_machine_check>:
exception_handler machine_check , 18 , 0
   1022c:	6a 00                	push   $0x0
   1022e:	6a 12                	push   $0x12
   10230:	60                   	pusha  
   10231:	1e                   	push   %ds
   10232:	06                   	push   %es
   10233:	0f a0                	push   %fs
   10235:	0f a8                	push   %gs
   10237:	54                   	push   %esp
   10238:	e8 9c 18 00 00       	call   11ad9 <do_handler_machine_check>
   1023d:	83 c4 04             	add    $0x4,%esp
   10240:	0f a9                	pop    %gs
   10242:	0f a1                	pop    %fs
   10244:	07                   	pop    %es
   10245:	1f                   	pop    %ds
   10246:	61                   	popa   
   10247:	83 c4 08             	add    $0x8,%esp
   1024a:	cf                   	iret   

0001024b <exception_handler_simd_exception>:
exception_handler simd_exception , 19 , 0
   1024b:	6a 00                	push   $0x0
   1024d:	6a 13                	push   $0x13
   1024f:	60                   	pusha  
   10250:	1e                   	push   %ds
   10251:	06                   	push   %es
   10252:	0f a0                	push   %fs
   10254:	0f a8                	push   %gs
   10256:	54                   	push   %esp
   10257:	e8 99 18 00 00       	call   11af5 <do_handler_simd_exception>
   1025c:	83 c4 04             	add    $0x4,%esp
   1025f:	0f a9                	pop    %gs
   10261:	0f a1                	pop    %fs
   10263:	07                   	pop    %es
   10264:	1f                   	pop    %ds
   10265:	61                   	popa   
   10266:	83 c4 08             	add    $0x8,%esp
   10269:	cf                   	iret   

0001026a <exception_handler_virtualization_exception>:
exception_handler virtualization_exception , 20 , 0
   1026a:	6a 00                	push   $0x0
   1026c:	6a 14                	push   $0x14
   1026e:	60                   	pusha  
   1026f:	1e                   	push   %ds
   10270:	06                   	push   %es
   10271:	0f a0                	push   %fs
   10273:	0f a8                	push   %gs
   10275:	54                   	push   %esp
   10276:	e8 96 18 00 00       	call   11b11 <do_handler_virtualization_exception>
   1027b:	83 c4 04             	add    $0x4,%esp
   1027e:	0f a9                	pop    %gs
   10280:	0f a1                	pop    %fs
   10282:	07                   	pop    %es
   10283:	1f                   	pop    %ds
   10284:	61                   	popa   
   10285:	83 c4 08             	add    $0x8,%esp
   10288:	cf                   	iret   

00010289 <exception_handler_control_protection_exception>:
exception_handler control_protection_exception , 21 , 1
   10289:	6a 15                	push   $0x15
   1028b:	60                   	pusha  
   1028c:	1e                   	push   %ds
   1028d:	06                   	push   %es
   1028e:	0f a0                	push   %fs
   10290:	0f a8                	push   %gs
   10292:	54                   	push   %esp
   10293:	e8 95 18 00 00       	call   11b2d <do_handler_control_protection_exception>
   10298:	83 c4 04             	add    $0x4,%esp
   1029b:	0f a9                	pop    %gs
   1029d:	0f a1                	pop    %fs
   1029f:	07                   	pop    %es
   102a0:	1f                   	pop    %ds
   102a1:	61                   	popa   
   102a2:	83 c4 08             	add    $0x8,%esp
   102a5:	cf                   	iret   

000102a6 <exception_handler_time>:
exception_handler time , 0x20 , 0
   102a6:	6a 00                	push   $0x0
   102a8:	6a 20                	push   $0x20
   102aa:	60                   	pusha  
   102ab:	1e                   	push   %ds
   102ac:	06                   	push   %es
   102ad:	0f a0                	push   %fs
   102af:	0f a8                	push   %gs
   102b1:	54                   	push   %esp
   102b2:	e8 a4 1c 00 00       	call   11f5b <do_handler_time>
   102b7:	83 c4 04             	add    $0x4,%esp
   102ba:	0f a9                	pop    %gs
   102bc:	0f a1                	pop    %fs
   102be:	07                   	pop    %es
   102bf:	1f                   	pop    %ds
   102c0:	61                   	popa   
   102c1:	83 c4 08             	add    $0x8,%esp
   102c4:	cf                   	iret   

000102c5 <simple_switch>:
    .text
    .global simple_switch
    .global exception_handler_syscall
    .extern do_handler_syscall
simple_switch:
    mov 4(%esp) , %eax
   102c5:	8b 44 24 04          	mov    0x4(%esp),%eax
    mov 8(%esp) , %edx
   102c9:	8b 54 24 08          	mov    0x8(%esp),%edx
    push %ebp
   102cd:	55                   	push   %ebp
    push %ebx
   102ce:	53                   	push   %ebx
    push %esi
   102cf:	56                   	push   %esi
    push %edi
   102d0:	57                   	push   %edi

    mov %esp , (%eax)
   102d1:	89 20                	mov    %esp,(%eax)
    mov %edx , %esp
   102d3:	89 d4                	mov    %edx,%esp

    pop %edi
   102d5:	5f                   	pop    %edi
    pop %esi
   102d6:	5e                   	pop    %esi
    pop %ebx
   102d7:	5b                   	pop    %ebx
    pop %ebp
   102d8:	5d                   	pop    %ebp
    ret
   102d9:	c3                   	ret    

000102da <exception_handler_syscall>:

exception_handler_syscall:
    pusha
   102da:	60                   	pusha  
    push %ds
   102db:	1e                   	push   %ds
    push %es
   102dc:	06                   	push   %es
    push %fs
   102dd:	0f a0                	push   %fs
    push %gs
   102df:	0f a8                	push   %gs
    pushf
   102e1:	9c                   	pushf  

    mov %esp , %eax
   102e2:	89 e0                	mov    %esp,%eax
    push %eax
   102e4:	50                   	push   %eax
    call do_handler_syscall;
   102e5:	e8 48 08 00 00       	call   10b32 <do_handler_syscall>
    add $4 , %esp
   102ea:	83 c4 04             	add    $0x4,%esp


    popf
   102ed:	9d                   	popf   
    pop %gs
   102ee:	0f a9                	pop    %gs
    pop %fs
   102f0:	0f a1                	pop    %fs
    pop %es
   102f2:	07                   	pop    %es
    pop %ds
   102f3:	1f                   	pop    %ds
    popa
   102f4:	61                   	popa   

   102f5:	ca 14 00             	lret   $0x14

000102f8 <write_cr3>:
    uint32_t cr3;
    __asm__ __volatile__("mov %%cr3 , %[v]":[v]"=r"(cr3));
    return cr3;
}

static inline void write_cr3( uint32_t v ){
   102f8:	55                   	push   %ebp
   102f9:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v] , %%cr3"::[v]"r"(v));
   102fb:	8b 45 08             	mov    0x8(%ebp),%eax
   102fe:	0f 22 d8             	mov    %eax,%cr3
}
   10301:	90                   	nop
   10302:	5d                   	pop    %ebp
   10303:	c3                   	ret    

00010304 <mmu_set_page_dir>:
        uint32_t phy_page_addr : 20;

    };
}pte_t;

static inline void mmu_set_page_dir(uint32_t paddr ){
   10304:	55                   	push   %ebp
   10305:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   10307:	ff 75 08             	pushl  0x8(%ebp)
   1030a:	e8 e9 ff ff ff       	call   102f8 <write_cr3>
   1030f:	83 c4 04             	add    $0x4,%esp
}
   10312:	90                   	nop
   10313:	c9                   	leave  
   10314:	c3                   	ret    

00010315 <pde_index>:


static inline uint32_t pde_index( uint32_t vaddr ){
   10315:	55                   	push   %ebp
   10316:	89 e5                	mov    %esp,%ebp
   10318:	83 ec 10             	sub    $0x10,%esp
    int index = ( vaddr >> 22 );
   1031b:	8b 45 08             	mov    0x8(%ebp),%eax
   1031e:	c1 e8 16             	shr    $0x16,%eax
   10321:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return index;
   10324:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10327:	c9                   	leave  
   10328:	c3                   	ret    

00010329 <pte_index>:

static inline uint32_t pte_index( uint32_t vaddr ){
   10329:	55                   	push   %ebp
   1032a:	89 e5                	mov    %esp,%ebp
   1032c:	83 ec 10             	sub    $0x10,%esp
    int index = ( vaddr >> 12 ) & 0x3ff ;
   1032f:	8b 45 08             	mov    0x8(%ebp),%eax
   10332:	c1 e8 0c             	shr    $0xc,%eax
   10335:	25 ff 03 00 00       	and    $0x3ff,%eax
   1033a:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return index;
   1033d:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10340:	c9                   	leave  
   10341:	c3                   	ret    

00010342 <pde_paddr>:

static inline uint32_t pde_paddr( pde_t * pde ){
   10342:	55                   	push   %ebp
   10343:	89 e5                	mov    %esp,%ebp
    return pde->phy_pt_addr << 12;
   10345:	8b 45 08             	mov    0x8(%ebp),%eax
   10348:	8b 00                	mov    (%eax),%eax
   1034a:	c1 e8 0c             	shr    $0xc,%eax
   1034d:	c1 e0 0c             	shl    $0xc,%eax
}
   10350:	5d                   	pop    %ebp
   10351:	c3                   	ret    

00010352 <pte_paddr>:

static inline uint32_t pte_paddr( pte_t * pte ){
   10352:	55                   	push   %ebp
   10353:	89 e5                	mov    %esp,%ebp
    return pte->phy_page_addr << 12;
   10355:	8b 45 08             	mov    0x8(%ebp),%eax
   10358:	8b 00                	mov    (%eax),%eax
   1035a:	c1 e8 0c             	shr    $0xc,%eax
   1035d:	c1 e0 0c             	shl    $0xc,%eax
}
   10360:	5d                   	pop    %ebp
   10361:	c3                   	ret    

00010362 <down2>:
#define KLIB_H
#include"comm/types.h"
#include<stdarg.h>
#define REALSE

static inline uint32_t down2( uint32_t size , uint32_t bounds ){
   10362:	55                   	push   %ebp
   10363:	89 e5                	mov    %esp,%ebp
    return size / bounds * bounds;
   10365:	8b 45 08             	mov    0x8(%ebp),%eax
   10368:	ba 00 00 00 00       	mov    $0x0,%edx
   1036d:	f7 75 0c             	divl   0xc(%ebp)
   10370:	0f af 45 0c          	imul   0xc(%ebp),%eax
}
   10374:	5d                   	pop    %ebp
   10375:	c3                   	ret    

00010376 <up2>:

static inline uint32_t up2( uint32_t size , uint32_t bounds ){
   10376:	55                   	push   %ebp
   10377:	89 e5                	mov    %esp,%ebp
    return (size + bounds - 1)/ bounds * bounds;
   10379:	8b 55 08             	mov    0x8(%ebp),%edx
   1037c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1037f:	01 d0                	add    %edx,%eax
   10381:	83 e8 01             	sub    $0x1,%eax
   10384:	ba 00 00 00 00       	mov    $0x0,%edx
   10389:	f7 75 0c             	divl   0xc(%ebp)
   1038c:	0f af 45 0c          	imul   0xc(%ebp),%eax
}
   10390:	5d                   	pop    %ebp
   10391:	c3                   	ret    

00010392 <addr_alloc_init>:

static addr_alloc_t paddr_alloc;

static pde_t kernel_page_dir[PDE_CNT] __attribute__((aligned(MEM_PAGE_SIZE))); 
static void addr_alloc_init( addr_alloc_t * alloc , uint8_t * bits , 
    uint32_t start , uint32_t size , uint32_t page_size ){
   10392:	55                   	push   %ebp
   10393:	89 e5                	mov    %esp,%ebp
   10395:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&alloc->mutex);
   10398:	8b 45 08             	mov    0x8(%ebp),%eax
   1039b:	83 ec 0c             	sub    $0xc,%esp
   1039e:	50                   	push   %eax
   1039f:	e8 6f 1d 00 00       	call   12113 <mutex_init>
   103a4:	83 c4 10             	add    $0x10,%esp
    alloc->start = start;
   103a7:	8b 45 08             	mov    0x8(%ebp),%eax
   103aa:	8b 55 10             	mov    0x10(%ebp),%edx
   103ad:	89 50 1c             	mov    %edx,0x1c(%eax)
    alloc->size = size;
   103b0:	8b 45 08             	mov    0x8(%ebp),%eax
   103b3:	8b 55 14             	mov    0x14(%ebp),%edx
   103b6:	89 50 20             	mov    %edx,0x20(%eax)
    alloc->page_size = page_size;
   103b9:	8b 45 08             	mov    0x8(%ebp),%eax
   103bc:	8b 55 18             	mov    0x18(%ebp),%edx
   103bf:	89 50 24             	mov    %edx,0x24(%eax)
    bitmap_init( &alloc->bitmap , bits , alloc->size / page_size , 0 );
   103c2:	8b 45 08             	mov    0x8(%ebp),%eax
   103c5:	8b 40 20             	mov    0x20(%eax),%eax
   103c8:	ba 00 00 00 00       	mov    $0x0,%edx
   103cd:	f7 75 18             	divl   0x18(%ebp)
   103d0:	89 c2                	mov    %eax,%edx
   103d2:	8b 45 08             	mov    0x8(%ebp),%eax
   103d5:	83 c0 14             	add    $0x14,%eax
   103d8:	6a 00                	push   $0x0
   103da:	52                   	push   %edx
   103db:	ff 75 0c             	pushl  0xc(%ebp)
   103de:	50                   	push   %eax
   103df:	e8 05 20 00 00       	call   123e9 <bitmap_init>
   103e4:	83 c4 10             	add    $0x10,%esp
}
   103e7:	90                   	nop
   103e8:	c9                   	leave  
   103e9:	c3                   	ret    

000103ea <addr_alloc_page>:

static uint32_t addr_alloc_page( addr_alloc_t * alloc , int page_count ){
   103ea:	55                   	push   %ebp
   103eb:	89 e5                	mov    %esp,%ebp
   103ed:	83 ec 18             	sub    $0x18,%esp
    uint32_t addr = 0;
   103f0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    mutex_lock(&alloc->mutex);
   103f7:	8b 45 08             	mov    0x8(%ebp),%eax
   103fa:	83 ec 0c             	sub    $0xc,%esp
   103fd:	50                   	push   %eax
   103fe:	e8 3e 1d 00 00       	call   12141 <mutex_lock>
   10403:	83 c4 10             	add    $0x10,%esp

    int page_index = bitmap_alloc_nbits( &alloc->bitmap , 0 , page_count );
   10406:	8b 45 08             	mov    0x8(%ebp),%eax
   10409:	83 c0 14             	add    $0x14,%eax
   1040c:	83 ec 04             	sub    $0x4,%esp
   1040f:	ff 75 0c             	pushl  0xc(%ebp)
   10412:	6a 00                	push   $0x0
   10414:	50                   	push   %eax
   10415:	e8 4f 21 00 00       	call   12569 <bitmap_alloc_nbits>
   1041a:	83 c4 10             	add    $0x10,%esp
   1041d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if( page_index >= 0 ){
   10420:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10424:	78 17                	js     1043d <addr_alloc_page+0x53>
        addr = alloc->start + page_index * alloc->page_size;
   10426:	8b 45 08             	mov    0x8(%ebp),%eax
   10429:	8b 50 1c             	mov    0x1c(%eax),%edx
   1042c:	8b 45 08             	mov    0x8(%ebp),%eax
   1042f:	8b 48 24             	mov    0x24(%eax),%ecx
   10432:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10435:	0f af c1             	imul   %ecx,%eax
   10438:	01 d0                	add    %edx,%eax
   1043a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    mutex_unlock(&alloc->mutex);
   1043d:	8b 45 08             	mov    0x8(%ebp),%eax
   10440:	83 ec 0c             	sub    $0xc,%esp
   10443:	50                   	push   %eax
   10444:	e8 89 1d 00 00       	call   121d2 <mutex_unlock>
   10449:	83 c4 10             	add    $0x10,%esp
    return addr;
   1044c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   1044f:	c9                   	leave  
   10450:	c3                   	ret    

00010451 <addr_free_page>:

static void addr_free_page( addr_alloc_t * alloc , uint32_t addr , int page_count ){
   10451:	55                   	push   %ebp
   10452:	89 e5                	mov    %esp,%ebp
   10454:	53                   	push   %ebx
   10455:	83 ec 14             	sub    $0x14,%esp
    mutex_lock(&alloc->mutex);
   10458:	8b 45 08             	mov    0x8(%ebp),%eax
   1045b:	83 ec 0c             	sub    $0xc,%esp
   1045e:	50                   	push   %eax
   1045f:	e8 dd 1c 00 00       	call   12141 <mutex_lock>
   10464:	83 c4 10             	add    $0x10,%esp
    uint32_t pg_index = ( addr - alloc->start ) / alloc->page_size;
   10467:	8b 45 08             	mov    0x8(%ebp),%eax
   1046a:	8b 40 1c             	mov    0x1c(%eax),%eax
   1046d:	8b 55 0c             	mov    0xc(%ebp),%edx
   10470:	89 d1                	mov    %edx,%ecx
   10472:	29 c1                	sub    %eax,%ecx
   10474:	8b 45 08             	mov    0x8(%ebp),%eax
   10477:	8b 58 24             	mov    0x24(%eax),%ebx
   1047a:	89 c8                	mov    %ecx,%eax
   1047c:	ba 00 00 00 00       	mov    $0x0,%edx
   10481:	f7 f3                	div    %ebx
   10483:	89 45 f4             	mov    %eax,-0xc(%ebp)
    bitmap_set_bit( &alloc->bitmap , pg_index , page_count , 0 );
   10486:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10489:	8b 55 08             	mov    0x8(%ebp),%edx
   1048c:	83 c2 14             	add    $0x14,%edx
   1048f:	6a 00                	push   $0x0
   10491:	ff 75 10             	pushl  0x10(%ebp)
   10494:	50                   	push   %eax
   10495:	52                   	push   %edx
   10496:	e8 df 1f 00 00       	call   1247a <bitmap_set_bit>
   1049b:	83 c4 10             	add    $0x10,%esp
    mutex_unlock(&alloc->mutex);
   1049e:	8b 45 08             	mov    0x8(%ebp),%eax
   104a1:	83 ec 0c             	sub    $0xc,%esp
   104a4:	50                   	push   %eax
   104a5:	e8 28 1d 00 00       	call   121d2 <mutex_unlock>
   104aa:	83 c4 10             	add    $0x10,%esp

}
   104ad:	90                   	nop
   104ae:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   104b1:	c9                   	leave  
   104b2:	c3                   	ret    

000104b3 <show_mem_info>:

void show_mem_info( boot_info_t * boot_info ){
   104b3:	55                   	push   %ebp
   104b4:	89 e5                	mov    %esp,%ebp
   104b6:	83 ec 18             	sub    $0x18,%esp
    log_printf("mem region");
   104b9:	83 ec 0c             	sub    $0xc,%esp
   104bc:	68 c0 2e 01 00       	push   $0x12ec0
   104c1:	e8 19 29 00 00       	call   12ddf <log_printf>
   104c6:	83 c4 10             	add    $0x10,%esp
    for( int i = 0 ; i < boot_info->ram_region_count ; i ++ ){
   104c9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   104d0:	eb 29                	jmp    104fb <show_mem_info+0x48>
        log_printf("[%d]:%x - %x\n" , i , boot_info->ram_region_cfg[i].start , 
   104d2:	8b 45 08             	mov    0x8(%ebp),%eax
   104d5:	8b 55 f4             	mov    -0xc(%ebp),%edx
   104d8:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   104dc:	8b 45 08             	mov    0x8(%ebp),%eax
   104df:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   104e2:	8b 04 c8             	mov    (%eax,%ecx,8),%eax
   104e5:	52                   	push   %edx
   104e6:	50                   	push   %eax
   104e7:	ff 75 f4             	pushl  -0xc(%ebp)
   104ea:	68 cb 2e 01 00       	push   $0x12ecb
   104ef:	e8 eb 28 00 00       	call   12ddf <log_printf>
   104f4:	83 c4 10             	add    $0x10,%esp
    for( int i = 0 ; i < boot_info->ram_region_count ; i ++ ){
   104f7:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   104fb:	8b 45 08             	mov    0x8(%ebp),%eax
   104fe:	8b 40 50             	mov    0x50(%eax),%eax
   10501:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   10504:	7c cc                	jl     104d2 <show_mem_info+0x1f>
        boot_info->ram_region_cfg[i].size);
    }
}
   10506:	90                   	nop
   10507:	c9                   	leave  
   10508:	c3                   	ret    

00010509 <find_pte>:

pte_t * find_pte( pde_t * page_dir , uint32_t vaddr , int alloc ){
   10509:	55                   	push   %ebp
   1050a:	89 e5                	mov    %esp,%ebp
   1050c:	83 ec 18             	sub    $0x18,%esp

    pte_t * page_table;
    //找到是页目录表中的表项
    pde_t * pde = page_dir + pde_index( vaddr );
   1050f:	ff 75 0c             	pushl  0xc(%ebp)
   10512:	e8 fe fd ff ff       	call   10315 <pde_index>
   10517:	83 c4 04             	add    $0x4,%esp
   1051a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10521:	8b 45 08             	mov    0x8(%ebp),%eax
   10524:	01 d0                	add    %edx,%eax
   10526:	89 45 f0             	mov    %eax,-0x10(%ebp)
    //判断该表项是否存在
    if( pde->present ){
   10529:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1052c:	0f b6 00             	movzbl (%eax),%eax
   1052f:	83 e0 01             	and    $0x1,%eax
   10532:	84 c0                	test   %al,%al
   10534:	74 10                	je     10546 <find_pte+0x3d>
        page_table = (pte_t *)pde_paddr(pde);
   10536:	ff 75 f0             	pushl  -0x10(%ebp)
   10539:	e8 04 fe ff ff       	call   10342 <pde_paddr>
   1053e:	83 c4 04             	add    $0x4,%esp
   10541:	89 45 f4             	mov    %eax,-0xc(%ebp)
   10544:	eb 57                	jmp    1059d <find_pte+0x94>
    }
    else{
        if( alloc == 0 ){
   10546:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1054a:	75 07                	jne    10553 <find_pte+0x4a>
            return (pte_t *)0;
   1054c:	b8 00 00 00 00       	mov    $0x0,%eax
   10551:	eb 64                	jmp    105b7 <find_pte+0xae>
        }
        //创建一个二级页表
        uint32_t pg_paddr = addr_alloc_page( &paddr_alloc , 1 );
   10553:	83 ec 08             	sub    $0x8,%esp
   10556:	6a 01                	push   $0x1
   10558:	68 00 50 01 00       	push   $0x15000
   1055d:	e8 88 fe ff ff       	call   103ea <addr_alloc_page>
   10562:	83 c4 10             	add    $0x10,%esp
   10565:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if( pg_paddr == 0 ){
   10568:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1056c:	75 07                	jne    10575 <find_pte+0x6c>
            return (pte_t * )0;
   1056e:	b8 00 00 00 00       	mov    $0x0,%eax
   10573:	eb 42                	jmp    105b7 <find_pte+0xae>
        }

        pde->v = pg_paddr | PDE_P | PDE_W | PDE_U; 
   10575:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10578:	83 c8 07             	or     $0x7,%eax
   1057b:	89 c2                	mov    %eax,%edx
   1057d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10580:	89 10                	mov    %edx,(%eax)
        page_table = (pte_t *)pg_paddr;
   10582:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10585:	89 45 f4             	mov    %eax,-0xc(%ebp)
        kernel_memset( page_table , 0 , MEM_PAGE_SIZE );
   10588:	83 ec 04             	sub    $0x4,%esp
   1058b:	68 00 10 00 00       	push   $0x1000
   10590:	6a 00                	push   $0x0
   10592:	ff 75 f4             	pushl  -0xc(%ebp)
   10595:	e8 31 22 00 00       	call   127cb <kernel_memset>
   1059a:	83 c4 10             	add    $0x10,%esp
    }

    return page_table + pte_index( vaddr );
   1059d:	83 ec 0c             	sub    $0xc,%esp
   105a0:	ff 75 0c             	pushl  0xc(%ebp)
   105a3:	e8 81 fd ff ff       	call   10329 <pte_index>
   105a8:	83 c4 10             	add    $0x10,%esp
   105ab:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   105b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   105b5:	01 d0                	add    %edx,%eax
}
   105b7:	c9                   	leave  
   105b8:	c3                   	ret    

000105b9 <memory_create_map>:

int memory_create_map (pde_t * page_dir , uint32_t vaddr , uint32_t paddr , int count , uint32_t prem ){
   105b9:	55                   	push   %ebp
   105ba:	89 e5                	mov    %esp,%ebp
   105bc:	83 ec 18             	sub    $0x18,%esp
    for( int i = 0 ; i < count ; i ++ ){
   105bf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   105c6:	eb 6b                	jmp    10633 <memory_create_map+0x7a>
        pte_t * pte = find_pte( page_dir , vaddr , 1 );
   105c8:	83 ec 04             	sub    $0x4,%esp
   105cb:	6a 01                	push   $0x1
   105cd:	ff 75 0c             	pushl  0xc(%ebp)
   105d0:	ff 75 08             	pushl  0x8(%ebp)
   105d3:	e8 31 ff ff ff       	call   10509 <find_pte>
   105d8:	83 c4 10             	add    $0x10,%esp
   105db:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if( pte == (pte_t *)0 ){
   105de:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   105e2:	75 07                	jne    105eb <memory_create_map+0x32>
            return -1;
   105e4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   105e9:	eb 50                	jmp    1063b <memory_create_map+0x82>
        }
        ASSERT( pte->present == 0 );
   105eb:	8b 45 f0             	mov    -0x10(%ebp),%eax
   105ee:	0f b6 00             	movzbl (%eax),%eax
   105f1:	83 e0 01             	and    $0x1,%eax
   105f4:	84 c0                	test   %al,%al
   105f6:	74 19                	je     10611 <memory_create_map+0x58>
   105f8:	68 d9 2e 01 00       	push   $0x12ed9
   105fd:	68 d0 2f 01 00       	push   $0x12fd0
   10602:	6a 50                	push   $0x50
   10604:	68 ec 2e 01 00       	push   $0x12eec
   10609:	e8 ca 24 00 00       	call   12ad8 <pannic>
   1060e:	83 c4 10             	add    $0x10,%esp
        pte->v = paddr | prem | PTE_P;
   10611:	8b 45 10             	mov    0x10(%ebp),%eax
   10614:	0b 45 18             	or     0x18(%ebp),%eax
   10617:	83 c8 01             	or     $0x1,%eax
   1061a:	89 c2                	mov    %eax,%edx
   1061c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1061f:	89 10                	mov    %edx,(%eax)
        vaddr += MEM_PAGE_SIZE;
   10621:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
        paddr += MEM_PAGE_SIZE;
   10628:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    for( int i = 0 ; i < count ; i ++ ){
   1062f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10633:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10636:	3b 45 14             	cmp    0x14(%ebp),%eax
   10639:	7c 8d                	jl     105c8 <memory_create_map+0xf>
    }
}
   1063b:	c9                   	leave  
   1063c:	c3                   	ret    

0001063d <create_kernel_table>:

void create_kernel_table( void ){
   1063d:	55                   	push   %ebp
   1063e:	89 e5                	mov    %esp,%ebp
   10640:	83 ec 28             	sub    $0x28,%esp
        { s_text , e_text ,  s_text , 0 },
        { s_data , (void *)MEM_EBDA_START , s_data , PTE_W } ,
        { (void *)MEM_EXT_START , (void *)MEM_EXT_END , (void *)MEM_EXT_START , PTE_W }
    };

    for( int i = 0 ; i < sizeof(kernel_map) / sizeof(memory_map_t) ; i ++ ){
   10643:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1064a:	e9 82 00 00 00       	jmp    106d1 <create_kernel_table+0x94>
        memory_map_t * map = kernel_map + i;
   1064f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10652:	c1 e0 04             	shl    $0x4,%eax
   10655:	05 00 40 01 00       	add    $0x14000,%eax
   1065a:	89 45 f0             	mov    %eax,-0x10(%ebp)
        uint32_t vstart = down2( (uint32_t)map->vstart , MEM_PAGE_SIZE );
   1065d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10660:	8b 00                	mov    (%eax),%eax
   10662:	68 00 10 00 00       	push   $0x1000
   10667:	50                   	push   %eax
   10668:	e8 f5 fc ff ff       	call   10362 <down2>
   1066d:	83 c4 08             	add    $0x8,%esp
   10670:	89 45 ec             	mov    %eax,-0x14(%ebp)
        uint32_t vend = up2( (uint32_t)map->vend , MEM_PAGE_SIZE );
   10673:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10676:	8b 40 04             	mov    0x4(%eax),%eax
   10679:	68 00 10 00 00       	push   $0x1000
   1067e:	50                   	push   %eax
   1067f:	e8 f2 fc ff ff       	call   10376 <up2>
   10684:	83 c4 08             	add    $0x8,%esp
   10687:	89 45 e8             	mov    %eax,-0x18(%ebp)
        uint32_t paddr = down2((uint32_t)map->p_start , MEM_PAGE_SIZE );
   1068a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1068d:	8b 40 08             	mov    0x8(%eax),%eax
   10690:	68 00 10 00 00       	push   $0x1000
   10695:	50                   	push   %eax
   10696:	e8 c7 fc ff ff       	call   10362 <down2>
   1069b:	83 c4 08             	add    $0x8,%esp
   1069e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        int page_count = (vend - vstart) / MEM_PAGE_SIZE;
   106a1:	8b 45 e8             	mov    -0x18(%ebp),%eax
   106a4:	2b 45 ec             	sub    -0x14(%ebp),%eax
   106a7:	c1 e8 0c             	shr    $0xc,%eax
   106aa:	89 45 e0             	mov    %eax,-0x20(%ebp)
        memory_create_map( kernel_page_dir ,  vstart , paddr , page_count , map->perm );
   106ad:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106b0:	8b 40 0c             	mov    0xc(%eax),%eax
   106b3:	83 ec 0c             	sub    $0xc,%esp
   106b6:	50                   	push   %eax
   106b7:	ff 75 e0             	pushl  -0x20(%ebp)
   106ba:	ff 75 e4             	pushl  -0x1c(%ebp)
   106bd:	ff 75 ec             	pushl  -0x14(%ebp)
   106c0:	68 00 60 01 00       	push   $0x16000
   106c5:	e8 ef fe ff ff       	call   105b9 <memory_create_map>
   106ca:	83 c4 20             	add    $0x20,%esp
    for( int i = 0 ; i < sizeof(kernel_map) / sizeof(memory_map_t) ; i ++ ){
   106cd:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   106d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   106d4:	83 f8 03             	cmp    $0x3,%eax
   106d7:	0f 86 72 ff ff ff    	jbe    1064f <create_kernel_table+0x12>
    }
}
   106dd:	90                   	nop
   106de:	c9                   	leave  
   106df:	c3                   	ret    

000106e0 <total_mem_size>:

static uint32_t total_mem_size( boot_info_t * boot_info ){
   106e0:	55                   	push   %ebp
   106e1:	89 e5                	mov    %esp,%ebp
   106e3:	83 ec 10             	sub    $0x10,%esp
    uint32_t mem_size = 0;
   106e6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for( int i = 0 ; i < boot_info->ram_region_count ; i ++ ){
   106ed:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   106f4:	eb 11                	jmp    10707 <total_mem_size+0x27>
        mem_size += boot_info -> ram_region_cfg[i].size;
   106f6:	8b 45 08             	mov    0x8(%ebp),%eax
   106f9:	8b 55 f8             	mov    -0x8(%ebp),%edx
   106fc:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
   10700:	01 45 fc             	add    %eax,-0x4(%ebp)
    for( int i = 0 ; i < boot_info->ram_region_count ; i ++ ){
   10703:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   10707:	8b 45 08             	mov    0x8(%ebp),%eax
   1070a:	8b 40 50             	mov    0x50(%eax),%eax
   1070d:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   10710:	7c e4                	jl     106f6 <total_mem_size+0x16>
    }
    return mem_size;
   10712:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10715:	c9                   	leave  
   10716:	c3                   	ret    

00010717 <memory_init>:

void memory_init( boot_info_t * boot_info ){
   10717:	55                   	push   %ebp
   10718:	89 e5                	mov    %esp,%ebp
   1071a:	83 ec 18             	sub    $0x18,%esp
    extern uint8_t * mem_free_start;
    log_printf("mem init");
   1071d:	83 ec 0c             	sub    $0xc,%esp
   10720:	68 2b 2f 01 00       	push   $0x12f2b
   10725:	e8 b5 26 00 00       	call   12ddf <log_printf>
   1072a:	83 c4 10             	add    $0x10,%esp
    show_mem_info( boot_info );
   1072d:	83 ec 0c             	sub    $0xc,%esp
   10730:	ff 75 08             	pushl  0x8(%ebp)
   10733:	e8 7b fd ff ff       	call   104b3 <show_mem_info>
   10738:	83 c4 10             	add    $0x10,%esp
    uint8_t * mem_free = (uint8_t *)&mem_free_start;
   1073b:	c7 45 f4 10 af 01 00 	movl   $0x1af10,-0xc(%ebp)
    uint32_t mem_up1MB_free = total_mem_size(boot_info) - MEM_EXT_START;
   10742:	83 ec 0c             	sub    $0xc,%esp
   10745:	ff 75 08             	pushl  0x8(%ebp)
   10748:	e8 93 ff ff ff       	call   106e0 <total_mem_size>
   1074d:	83 c4 10             	add    $0x10,%esp
   10750:	2d 00 00 10 00       	sub    $0x100000,%eax
   10755:	89 45 f0             	mov    %eax,-0x10(%ebp)
    mem_up1MB_free = down2( mem_up1MB_free , MEM_PAGE_SIZE );
   10758:	83 ec 08             	sub    $0x8,%esp
   1075b:	68 00 10 00 00       	push   $0x1000
   10760:	ff 75 f0             	pushl  -0x10(%ebp)
   10763:	e8 fa fb ff ff       	call   10362 <down2>
   10768:	83 c4 10             	add    $0x10,%esp
   1076b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    log_printf("free memory:%x , size:%x" , MEM_EXT_START , mem_up1MB_free );
   1076e:	83 ec 04             	sub    $0x4,%esp
   10771:	ff 75 f0             	pushl  -0x10(%ebp)
   10774:	68 00 00 10 00       	push   $0x100000
   10779:	68 34 2f 01 00       	push   $0x12f34
   1077e:	e8 5c 26 00 00       	call   12ddf <log_printf>
   10783:	83 c4 10             	add    $0x10,%esp
    addr_alloc_init( &paddr_alloc , mem_free , MEM_EXT_START , mem_up1MB_free , MEM_PAGE_SIZE );
   10786:	83 ec 0c             	sub    $0xc,%esp
   10789:	68 00 10 00 00       	push   $0x1000
   1078e:	ff 75 f0             	pushl  -0x10(%ebp)
   10791:	68 00 00 10 00       	push   $0x100000
   10796:	ff 75 f4             	pushl  -0xc(%ebp)
   10799:	68 00 50 01 00       	push   $0x15000
   1079e:	e8 ef fb ff ff       	call   10392 <addr_alloc_init>
   107a3:	83 c4 20             	add    $0x20,%esp
    mem_free += bitmap_byte_count( paddr_alloc.size / MEM_PAGE_SIZE );
   107a6:	a1 20 50 01 00       	mov    0x15020,%eax
   107ab:	c1 e8 0c             	shr    $0xc,%eax
   107ae:	83 ec 0c             	sub    $0xc,%esp
   107b1:	50                   	push   %eax
   107b2:	e8 1c 1c 00 00       	call   123d3 <bitmap_byte_count>
   107b7:	83 c4 10             	add    $0x10,%esp
   107ba:	01 45 f4             	add    %eax,-0xc(%ebp)
    ASSERT( mem_free < (uint8_t *)MEM_EBDA_START );
   107bd:	81 7d f4 ff ff 07 00 	cmpl   $0x7ffff,-0xc(%ebp)
   107c4:	76 19                	jbe    107df <memory_init+0xc8>
   107c6:	68 50 2f 01 00       	push   $0x12f50
   107cb:	68 e4 2f 01 00       	push   $0x12fe4
   107d0:	6a 7c                	push   $0x7c
   107d2:	68 ec 2e 01 00       	push   $0x12eec
   107d7:	e8 fc 22 00 00       	call   12ad8 <pannic>
   107dc:	83 c4 10             	add    $0x10,%esp

    create_kernel_table();
   107df:	e8 59 fe ff ff       	call   1063d <create_kernel_table>
    mmu_set_page_dir((uint32_t)kernel_page_dir);
   107e4:	b8 00 60 01 00       	mov    $0x16000,%eax
   107e9:	83 ec 0c             	sub    $0xc,%esp
   107ec:	50                   	push   %eax
   107ed:	e8 12 fb ff ff       	call   10304 <mmu_set_page_dir>
   107f2:	83 c4 10             	add    $0x10,%esp
}
   107f5:	90                   	nop
   107f6:	c9                   	leave  
   107f7:	c3                   	ret    

000107f8 <memory_create_uvm>:

uint32_t memory_create_uvm( void ){
   107f8:	55                   	push   %ebp
   107f9:	89 e5                	mov    %esp,%ebp
   107fb:	83 ec 18             	sub    $0x18,%esp
    pde_t * page_dir = (pde_t *)addr_alloc_page(&paddr_alloc , 1);
   107fe:	83 ec 08             	sub    $0x8,%esp
   10801:	6a 01                	push   $0x1
   10803:	68 00 50 01 00       	push   $0x15000
   10808:	e8 dd fb ff ff       	call   103ea <addr_alloc_page>
   1080d:	83 c4 10             	add    $0x10,%esp
   10810:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if( page_dir == 0 ){
   10813:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10817:	75 07                	jne    10820 <memory_create_uvm+0x28>
        return 0;
   10819:	b8 00 00 00 00       	mov    $0x0,%eax
   1081e:	eb 5b                	jmp    1087b <memory_create_uvm+0x83>
    }
    kernel_memset((void *)page_dir , 0 , MEM_PAGE_SIZE );
   10820:	83 ec 04             	sub    $0x4,%esp
   10823:	68 00 10 00 00       	push   $0x1000
   10828:	6a 00                	push   $0x0
   1082a:	ff 75 f0             	pushl  -0x10(%ebp)
   1082d:	e8 99 1f 00 00       	call   127cb <kernel_memset>
   10832:	83 c4 10             	add    $0x10,%esp
    uint32_t user_pde_start = pde_index(MEMORY_TASK_BASE);
   10835:	83 ec 0c             	sub    $0xc,%esp
   10838:	68 00 00 00 80       	push   $0x80000000
   1083d:	e8 d3 fa ff ff       	call   10315 <pde_index>
   10842:	83 c4 10             	add    $0x10,%esp
   10845:	89 45 ec             	mov    %eax,-0x14(%ebp)
    for(int i = 0 ; i < user_pde_start ; i ++ ){
   10848:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1084f:	eb 1f                	jmp    10870 <memory_create_uvm+0x78>
        page_dir[i].v = kernel_page_dir[i].v;
   10851:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10854:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   1085b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1085e:	01 c2                	add    %eax,%edx
   10860:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10863:	8b 04 85 00 60 01 00 	mov    0x16000(,%eax,4),%eax
   1086a:	89 02                	mov    %eax,(%edx)
    for(int i = 0 ; i < user_pde_start ; i ++ ){
   1086c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10870:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10873:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   10876:	77 d9                	ja     10851 <memory_create_uvm+0x59>
    }

    return (uint32_t)page_dir;
   10878:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   1087b:	c9                   	leave  
   1087c:	c3                   	ret    

0001087d <free_pagemap>:

void free_pagemap( addr_alloc_t * alloc , uint32_t vaddr , uint32_t page_count , pde_t * page_dir ){
   1087d:	55                   	push   %ebp
   1087e:	89 e5                	mov    %esp,%ebp
   10880:	83 ec 28             	sub    $0x28,%esp
    //没收二级页表的页表项
    for(int i = 0 ; i < page_count ; i ++ ){
   10883:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1088a:	eb 56                	jmp    108e2 <free_pagemap+0x65>
        pte_t * pte = find_pte( page_dir , vaddr , 0 );
   1088c:	83 ec 04             	sub    $0x4,%esp
   1088f:	6a 00                	push   $0x0
   10891:	ff 75 0c             	pushl  0xc(%ebp)
   10894:	ff 75 14             	pushl  0x14(%ebp)
   10897:	e8 6d fc ff ff       	call   10509 <find_pte>
   1089c:	83 c4 10             	add    $0x10,%esp
   1089f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if( pte == 0 ) continue;
   108a2:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   108a6:	74 35                	je     108dd <free_pagemap+0x60>
        uint32_t paddr = ( pte->phy_page_addr ) << 12;
   108a8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   108ab:	8b 00                	mov    (%eax),%eax
   108ad:	c1 e8 0c             	shr    $0xc,%eax
   108b0:	c1 e0 0c             	shl    $0xc,%eax
   108b3:	89 45 e0             	mov    %eax,-0x20(%ebp)
        addr_free_page( &paddr_alloc , paddr , 1 );
   108b6:	83 ec 04             	sub    $0x4,%esp
   108b9:	6a 01                	push   $0x1
   108bb:	ff 75 e0             	pushl  -0x20(%ebp)
   108be:	68 00 50 01 00       	push   $0x15000
   108c3:	e8 89 fb ff ff       	call   10451 <addr_free_page>
   108c8:	83 c4 10             	add    $0x10,%esp
        vaddr = vaddr + MEM_PAGE_SIZE;
   108cb:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
        pte->v = 0;
   108d2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   108d5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   108db:	eb 01                	jmp    108de <free_pagemap+0x61>
        if( pte == 0 ) continue;
   108dd:	90                   	nop
    for(int i = 0 ; i < page_count ; i ++ ){
   108de:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   108e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   108e5:	39 45 10             	cmp    %eax,0x10(%ebp)
   108e8:	77 a2                	ja     1088c <free_pagemap+0xf>
    } 
    //没收二级页表
    for(int i = 0 ; i < ( page_count / 1024 ); i ++ ){
   108ea:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   108f1:	eb 64                	jmp    10957 <free_pagemap+0xda>
        pde_t * pde = page_dir + pde_index(vaddr);
   108f3:	83 ec 0c             	sub    $0xc,%esp
   108f6:	ff 75 0c             	pushl  0xc(%ebp)
   108f9:	e8 17 fa ff ff       	call   10315 <pde_index>
   108fe:	83 c4 10             	add    $0x10,%esp
   10901:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10908:	8b 45 14             	mov    0x14(%ebp),%eax
   1090b:	01 d0                	add    %edx,%eax
   1090d:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if( pde->present == 0 ) continue;
   10910:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10913:	0f b6 00             	movzbl (%eax),%eax
   10916:	83 e0 01             	and    $0x1,%eax
   10919:	84 c0                	test   %al,%al
   1091b:	74 35                	je     10952 <free_pagemap+0xd5>
        uint32_t paddr = ( pde->phy_pt_addr ) << 12;
   1091d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10920:	8b 00                	mov    (%eax),%eax
   10922:	c1 e8 0c             	shr    $0xc,%eax
   10925:	c1 e0 0c             	shl    $0xc,%eax
   10928:	89 45 e8             	mov    %eax,-0x18(%ebp)
        addr_free_page( &paddr_alloc , paddr , 1 );
   1092b:	83 ec 04             	sub    $0x4,%esp
   1092e:	6a 01                	push   $0x1
   10930:	ff 75 e8             	pushl  -0x18(%ebp)
   10933:	68 00 50 01 00       	push   $0x15000
   10938:	e8 14 fb ff ff       	call   10451 <addr_free_page>
   1093d:	83 c4 10             	add    $0x10,%esp
        vaddr = vaddr + MEM_PAGE_SIZE * 1024 ;
   10940:	81 45 0c 00 00 40 00 	addl   $0x400000,0xc(%ebp)
        pde->v = 0;
   10947:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1094a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   10950:	eb 01                	jmp    10953 <free_pagemap+0xd6>
        if( pde->present == 0 ) continue;
   10952:	90                   	nop
    for(int i = 0 ; i < ( page_count / 1024 ); i ++ ){
   10953:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10957:	8b 45 10             	mov    0x10(%ebp),%eax
   1095a:	c1 e8 0a             	shr    $0xa,%eax
   1095d:	89 c2                	mov    %eax,%edx
   1095f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10962:	39 c2                	cmp    %eax,%edx
   10964:	77 8d                	ja     108f3 <free_pagemap+0x76>
    }     
}
   10966:	90                   	nop
   10967:	c9                   	leave  
   10968:	c3                   	ret    

00010969 <task_free_page_map>:

void task_free_page_map( uint32_t vaddr , uint32_t page_count , pde_t * page_dir ){
   10969:	55                   	push   %ebp
   1096a:	89 e5                	mov    %esp,%ebp
   1096c:	83 ec 08             	sub    $0x8,%esp
    free_pagemap( &paddr_alloc , vaddr , page_count , page_dir );
   1096f:	ff 75 10             	pushl  0x10(%ebp)
   10972:	ff 75 0c             	pushl  0xc(%ebp)
   10975:	ff 75 08             	pushl  0x8(%ebp)
   10978:	68 00 50 01 00       	push   $0x15000
   1097d:	e8 fb fe ff ff       	call   1087d <free_pagemap>
   10982:	83 c4 10             	add    $0x10,%esp
    return ;
   10985:	90                   	nop
}
   10986:	c9                   	leave  
   10987:	c3                   	ret    

00010988 <memory_alloc_for_page_dir>:

int memory_alloc_for_page_dir( uint32_t page_dir , uint32_t vaddr , uint32_t size,  int prem ){
   10988:	55                   	push   %ebp
   10989:	89 e5                	mov    %esp,%ebp
   1098b:	83 ec 28             	sub    $0x28,%esp
    uint32_t curr_vaddr = vaddr;
   1098e:	8b 45 0c             	mov    0xc(%ebp),%eax
   10991:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int page_count = up2( size , MEM_PAGE_SIZE ) / MEM_PAGE_SIZE; 
   10994:	68 00 10 00 00       	push   $0x1000
   10999:	ff 75 10             	pushl  0x10(%ebp)
   1099c:	e8 d5 f9 ff ff       	call   10376 <up2>
   109a1:	83 c4 08             	add    $0x8,%esp
   109a4:	c1 e8 0c             	shr    $0xc,%eax
   109a7:	89 45 ec             	mov    %eax,-0x14(%ebp)

    for( int i = 0 ; i < page_count ; i ++ ){
   109aa:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   109b1:	e9 93 00 00 00       	jmp    10a49 <memory_alloc_for_page_dir+0xc1>
        uint32_t paddr = addr_alloc_page( &paddr_alloc , 1 );
   109b6:	83 ec 08             	sub    $0x8,%esp
   109b9:	6a 01                	push   $0x1
   109bb:	68 00 50 01 00       	push   $0x15000
   109c0:	e8 25 fa ff ff       	call   103ea <addr_alloc_page>
   109c5:	83 c4 10             	add    $0x10,%esp
   109c8:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if( paddr == 0 ){
   109cb:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   109cf:	75 17                	jne    109e8 <memory_alloc_for_page_dir+0x60>
            log_printf("mem alloc failed. At memory_alloc_for_page_dir()");
   109d1:	83 ec 0c             	sub    $0xc,%esp
   109d4:	68 78 2f 01 00       	push   $0x12f78
   109d9:	e8 01 24 00 00       	call   12ddf <log_printf>
   109de:	83 c4 10             	add    $0x10,%esp
            return 0;
   109e1:	b8 00 00 00 00       	mov    $0x0,%eax
   109e6:	eb 72                	jmp    10a5a <memory_alloc_for_page_dir+0xd2>
        }

        int err = memory_create_map((pde_t *)page_dir , curr_vaddr , paddr , 1 , prem );
   109e8:	8b 55 14             	mov    0x14(%ebp),%edx
   109eb:	8b 45 08             	mov    0x8(%ebp),%eax
   109ee:	83 ec 0c             	sub    $0xc,%esp
   109f1:	52                   	push   %edx
   109f2:	6a 01                	push   $0x1
   109f4:	ff 75 e8             	pushl  -0x18(%ebp)
   109f7:	ff 75 f4             	pushl  -0xc(%ebp)
   109fa:	50                   	push   %eax
   109fb:	e8 b9 fb ff ff       	call   105b9 <memory_create_map>
   10a00:	83 c4 20             	add    $0x20,%esp
   10a03:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if( err < 0 ){
   10a06:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10a0a:	79 32                	jns    10a3e <memory_alloc_for_page_dir+0xb6>
            log_printf("create memory failed . err = %d " , err );
   10a0c:	83 ec 08             	sub    $0x8,%esp
   10a0f:	ff 75 e4             	pushl  -0x1c(%ebp)
   10a12:	68 ac 2f 01 00       	push   $0x12fac
   10a17:	e8 c3 23 00 00       	call   12ddf <log_printf>
   10a1c:	83 c4 10             	add    $0x10,%esp
            free_pagemap( &paddr_alloc , vaddr , i  , (pde_t *)page_dir );
   10a1f:	8b 55 08             	mov    0x8(%ebp),%edx
   10a22:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10a25:	52                   	push   %edx
   10a26:	50                   	push   %eax
   10a27:	ff 75 0c             	pushl  0xc(%ebp)
   10a2a:	68 00 50 01 00       	push   $0x15000
   10a2f:	e8 49 fe ff ff       	call   1087d <free_pagemap>
   10a34:	83 c4 10             	add    $0x10,%esp
            return 0;
   10a37:	b8 00 00 00 00       	mov    $0x0,%eax
   10a3c:	eb 1c                	jmp    10a5a <memory_alloc_for_page_dir+0xd2>
        }

        curr_vaddr += MEM_PAGE_SIZE;
   10a3e:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
    for( int i = 0 ; i < page_count ; i ++ ){
   10a45:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10a49:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10a4c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
   10a4f:	0f 8c 61 ff ff ff    	jl     109b6 <memory_alloc_for_page_dir+0x2e>
    }
    return 0;
   10a55:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10a5a:	c9                   	leave  
   10a5b:	c3                   	ret    

00010a5c <memory_alloc_page_for>:

int memory_alloc_page_for( uint32_t addr , uint32_t size , int prem ){
   10a5c:	55                   	push   %ebp
   10a5d:	89 e5                	mov    %esp,%ebp
   10a5f:	83 ec 08             	sub    $0x8,%esp
    return memory_alloc_for_page_dir( task_current() -> tss.cr3 , addr , size , prem );
   10a62:	e8 89 06 00 00       	call   110f0 <task_current>
   10a67:	8b 40 68             	mov    0x68(%eax),%eax
   10a6a:	ff 75 10             	pushl  0x10(%ebp)
   10a6d:	ff 75 0c             	pushl  0xc(%ebp)
   10a70:	ff 75 08             	pushl  0x8(%ebp)
   10a73:	50                   	push   %eax
   10a74:	e8 0f ff ff ff       	call   10988 <memory_alloc_for_page_dir>
   10a79:	83 c4 10             	add    $0x10,%esp
}
   10a7c:	c9                   	leave  
   10a7d:	c3                   	ret    

00010a7e <memory_alloc_page>:

uint32_t memory_alloc_page(void){
   10a7e:	55                   	push   %ebp
   10a7f:	89 e5                	mov    %esp,%ebp
   10a81:	83 ec 18             	sub    $0x18,%esp
    uint32_t addr = addr_alloc_page( &paddr_alloc , 1 );
   10a84:	83 ec 08             	sub    $0x8,%esp
   10a87:	6a 01                	push   $0x1
   10a89:	68 00 50 01 00       	push   $0x15000
   10a8e:	e8 57 f9 ff ff       	call   103ea <addr_alloc_page>
   10a93:	83 c4 10             	add    $0x10,%esp
   10a96:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return addr;
   10a99:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   10a9c:	c9                   	leave  
   10a9d:	c3                   	ret    

00010a9e <curr_page_dir>:

static pde_t * curr_page_dir ( void ){
   10a9e:	55                   	push   %ebp
   10a9f:	89 e5                	mov    %esp,%ebp
   10aa1:	83 ec 08             	sub    $0x8,%esp
    return (pde_t *)( task_current()->tss.cr3 );
   10aa4:	e8 47 06 00 00       	call   110f0 <task_current>
   10aa9:	8b 40 68             	mov    0x68(%eax),%eax
}
   10aac:	c9                   	leave  
   10aad:	c3                   	ret    

00010aae <memory_free_page>:

void memory_free_page( uint32_t addr ){
   10aae:	55                   	push   %ebp
   10aaf:	89 e5                	mov    %esp,%ebp
   10ab1:	83 ec 18             	sub    $0x18,%esp
    if( addr < MEMORY_TASK_BASE ){
   10ab4:	8b 45 08             	mov    0x8(%ebp),%eax
   10ab7:	85 c0                	test   %eax,%eax
   10ab9:	78 17                	js     10ad2 <memory_free_page+0x24>
        addr_free_page(&paddr_alloc , addr , 1 );
   10abb:	83 ec 04             	sub    $0x4,%esp
   10abe:	6a 01                	push   $0x1
   10ac0:	ff 75 08             	pushl  0x8(%ebp)
   10ac3:	68 00 50 01 00       	push   $0x15000
   10ac8:	e8 84 f9 ff ff       	call   10451 <addr_free_page>
   10acd:	83 c4 10             	add    $0x10,%esp
    else{
        pte_t * pte = find_pte( curr_page_dir() , addr , 0 );
        addr_free_page( &paddr_alloc , pte_paddr(pte), 1 );
        pte->v = 0; 
    }
   10ad0:	eb 43                	jmp    10b15 <memory_free_page+0x67>
        pte_t * pte = find_pte( curr_page_dir() , addr , 0 );
   10ad2:	e8 c7 ff ff ff       	call   10a9e <curr_page_dir>
   10ad7:	83 ec 04             	sub    $0x4,%esp
   10ada:	6a 00                	push   $0x0
   10adc:	ff 75 08             	pushl  0x8(%ebp)
   10adf:	50                   	push   %eax
   10ae0:	e8 24 fa ff ff       	call   10509 <find_pte>
   10ae5:	83 c4 10             	add    $0x10,%esp
   10ae8:	89 45 f4             	mov    %eax,-0xc(%ebp)
        addr_free_page( &paddr_alloc , pte_paddr(pte), 1 );
   10aeb:	83 ec 0c             	sub    $0xc,%esp
   10aee:	ff 75 f4             	pushl  -0xc(%ebp)
   10af1:	e8 5c f8 ff ff       	call   10352 <pte_paddr>
   10af6:	83 c4 10             	add    $0x10,%esp
   10af9:	83 ec 04             	sub    $0x4,%esp
   10afc:	6a 01                	push   $0x1
   10afe:	50                   	push   %eax
   10aff:	68 00 50 01 00       	push   $0x15000
   10b04:	e8 48 f9 ff ff       	call   10451 <addr_free_page>
   10b09:	83 c4 10             	add    $0x10,%esp
        pte->v = 0; 
   10b0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10b0f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   10b15:	90                   	nop
   10b16:	c9                   	leave  
   10b17:	c3                   	ret    

00010b18 <sys_print_msg>:
#include"tools/log.h"
#include"core/task.h"

typedef int (*syscall_handler_t)(uint32_t arg0 , uint32_t arg1 , uint32_t arg2 , uint32_t arg3 );

void sys_print_msg( char * fmt , int arg ){
   10b18:	55                   	push   %ebp
   10b19:	89 e5                	mov    %esp,%ebp
   10b1b:	83 ec 08             	sub    $0x8,%esp
    log_printf( fmt , arg );
   10b1e:	83 ec 08             	sub    $0x8,%esp
   10b21:	ff 75 0c             	pushl  0xc(%ebp)
   10b24:	ff 75 08             	pushl  0x8(%ebp)
   10b27:	e8 b3 22 00 00       	call   12ddf <log_printf>
   10b2c:	83 c4 10             	add    $0x10,%esp
}
   10b2f:	90                   	nop
   10b30:	c9                   	leave  
   10b31:	c3                   	ret    

00010b32 <do_handler_syscall>:
    [SYS_sleep] = (syscall_handler_t)sys_sleep ,
    [SYS_getpid] = (syscall_handler_t)sys_getpid ,
    [SYS_printmsg] = (syscall_handler_t)sys_print_msg,
};

void do_handler_syscall( syscall_frame_t * frame ){
   10b32:	55                   	push   %ebp
   10b33:	89 e5                	mov    %esp,%ebp
   10b35:	53                   	push   %ebx
   10b36:	83 ec 14             	sub    $0x14,%esp
    if( frame->func_id < sizeof(sys_table) / sizeof(sys_table[0]) ){
   10b39:	8b 45 08             	mov    0x8(%ebp),%eax
   10b3c:	8b 40 3c             	mov    0x3c(%eax),%eax
   10b3f:	83 f8 64             	cmp    $0x64,%eax
   10b42:	77 4e                	ja     10b92 <do_handler_syscall+0x60>
        syscall_handler_t handler = sys_table[frame->func_id];
   10b44:	8b 45 08             	mov    0x8(%ebp),%eax
   10b47:	8b 40 3c             	mov    0x3c(%eax),%eax
   10b4a:	8b 04 85 00 30 01 00 	mov    0x13000(,%eax,4),%eax
   10b51:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if( handler ){
   10b54:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10b58:	74 38                	je     10b92 <do_handler_syscall+0x60>
            int ret = handler( frame -> arg0 , frame -> arg1 , frame -> arg2 , frame -> arg3 );
   10b5a:	8b 45 08             	mov    0x8(%ebp),%eax
   10b5d:	8b 40 4c             	mov    0x4c(%eax),%eax
   10b60:	89 c3                	mov    %eax,%ebx
   10b62:	8b 45 08             	mov    0x8(%ebp),%eax
   10b65:	8b 40 48             	mov    0x48(%eax),%eax
   10b68:	89 c1                	mov    %eax,%ecx
   10b6a:	8b 45 08             	mov    0x8(%ebp),%eax
   10b6d:	8b 40 44             	mov    0x44(%eax),%eax
   10b70:	89 c2                	mov    %eax,%edx
   10b72:	8b 45 08             	mov    0x8(%ebp),%eax
   10b75:	8b 40 40             	mov    0x40(%eax),%eax
   10b78:	53                   	push   %ebx
   10b79:	51                   	push   %ecx
   10b7a:	52                   	push   %edx
   10b7b:	50                   	push   %eax
   10b7c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10b7f:	ff d0                	call   *%eax
   10b81:	83 c4 10             	add    $0x10,%esp
   10b84:	89 45 f0             	mov    %eax,-0x10(%ebp)
            frame->eax = ret;
   10b87:	8b 55 f0             	mov    -0x10(%ebp),%edx
   10b8a:	8b 45 08             	mov    0x8(%ebp),%eax
   10b8d:	89 50 30             	mov    %edx,0x30(%eax)
            return ;
   10b90:	eb 26                	jmp    10bb8 <do_handler_syscall+0x86>
        }
    }

    task_t * task = task_current();
   10b92:	e8 59 05 00 00       	call   110f0 <task_current>
   10b97:	89 45 ec             	mov    %eax,-0x14(%ebp)
    log_printf("task: %s , Unknow syscall: %d" , task->name , frame->func_id );
   10b9a:	8b 45 08             	mov    0x8(%ebp),%eax
   10b9d:	8b 40 3c             	mov    0x3c(%eax),%eax
   10ba0:	8b 55 ec             	mov    -0x14(%ebp),%edx
   10ba3:	83 c2 14             	add    $0x14,%edx
   10ba6:	83 ec 04             	sub    $0x4,%esp
   10ba9:	50                   	push   %eax
   10baa:	52                   	push   %edx
   10bab:	68 94 31 01 00       	push   $0x13194
   10bb0:	e8 2a 22 00 00       	call   12ddf <log_printf>
   10bb5:	83 c4 10             	add    $0x10,%esp
   10bb8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10bbb:	c9                   	leave  
   10bbc:	c3                   	ret    

00010bbd <list_node_init>:
typedef struct _list_node_t {
    struct _list_node_t * pre;
    struct _list_node_t * next;
}list_node_t;

static inline void list_node_init( list_node_t * node ){
   10bbd:	55                   	push   %ebp
   10bbe:	89 e5                	mov    %esp,%ebp
    node->pre = node->next = ( list_node_t * )0;
   10bc0:	8b 45 08             	mov    0x8(%ebp),%eax
   10bc3:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   10bca:	8b 45 08             	mov    0x8(%ebp),%eax
   10bcd:	8b 50 04             	mov    0x4(%eax),%edx
   10bd0:	8b 45 08             	mov    0x8(%ebp),%eax
   10bd3:	89 10                	mov    %edx,(%eax)
}
   10bd5:	90                   	nop
   10bd6:	5d                   	pop    %ebp
   10bd7:	c3                   	ret    

00010bd8 <list_node_next>:

static inline list_node_t * list_node_pre( list_node_t * node ){
    return node->pre;
}

static inline list_node_t * list_node_next( list_node_t * node ){
   10bd8:	55                   	push   %ebp
   10bd9:	89 e5                	mov    %esp,%ebp
    return node->next;
   10bdb:	8b 45 08             	mov    0x8(%ebp),%eax
   10bde:	8b 40 04             	mov    0x4(%eax),%eax
}
   10be1:	5d                   	pop    %ebp
   10be2:	c3                   	ret    

00010be3 <list_count>:

static inline int list_is_empty( list_t * list ){
    return list->count == 0;
}

static inline int list_count( list_t * list ){
   10be3:	55                   	push   %ebp
   10be4:	89 e5                	mov    %esp,%ebp
    return list -> count;
   10be6:	8b 45 08             	mov    0x8(%ebp),%eax
   10be9:	8b 40 08             	mov    0x8(%eax),%eax
}
   10bec:	5d                   	pop    %ebp
   10bed:	c3                   	ret    

00010bee <list_first>:

static inline list_node_t * list_first( list_t * list ){
   10bee:	55                   	push   %ebp
   10bef:	89 e5                	mov    %esp,%ebp
    return list -> first;
   10bf1:	8b 45 08             	mov    0x8(%ebp),%eax
   10bf4:	8b 00                	mov    (%eax),%eax
}
   10bf6:	5d                   	pop    %ebp
   10bf7:	c3                   	ret    

00010bf8 <hlt>:
static inline void hlt( void ){
   10bf8:	55                   	push   %ebp
   10bf9:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   10bfb:	f4                   	hlt    
}
   10bfc:	90                   	nop
   10bfd:	5d                   	pop    %ebp
   10bfe:	c3                   	ret    

00010bff <write_tr>:
static inline void write_tr( uint16_t tss_sel ){
   10bff:	55                   	push   %ebp
   10c00:	89 e5                	mov    %esp,%ebp
   10c02:	83 ec 04             	sub    $0x4,%esp
   10c05:	8b 45 08             	mov    0x8(%ebp),%eax
   10c08:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    __asm__ __volatile__("ltr %%ax"::"a"(tss_sel));
   10c0c:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   10c10:	0f 00 d8             	ltr    %ax
}
   10c13:	90                   	nop
   10c14:	c9                   	leave  
   10c15:	c3                   	ret    

00010c16 <write_cr3>:
static inline void write_cr3( uint32_t v ){
   10c16:	55                   	push   %ebp
   10c17:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v] , %%cr3"::[v]"r"(v));
   10c19:	8b 45 08             	mov    0x8(%ebp),%eax
   10c1c:	0f 22 d8             	mov    %eax,%cr3
}
   10c1f:	90                   	nop
   10c20:	5d                   	pop    %ebp
   10c21:	c3                   	ret    

00010c22 <mmu_set_page_dir>:
static inline void mmu_set_page_dir(uint32_t paddr ){
   10c22:	55                   	push   %ebp
   10c23:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   10c25:	ff 75 08             	pushl  0x8(%ebp)
   10c28:	e8 e9 ff ff ff       	call   10c16 <write_cr3>
   10c2d:	83 c4 04             	add    $0x4,%esp
}
   10c30:	90                   	nop
   10c31:	c9                   	leave  
   10c32:	c3                   	ret    

00010c33 <tss_init>:
#include"cpu/mmu.h"
static uint32_t idle_task_stack[IDLE_TASK_SIZE];

static task_manager_t task_manager;

static int tss_init( task_t* task , int flag , uint32_t entry , uint32_t esp ){
   10c33:	55                   	push   %ebp
   10c34:	89 e5                	mov    %esp,%ebp
   10c36:	83 ec 28             	sub    $0x28,%esp
    int tss_sel = gdt_alloc_desc();
   10c39:	e8 b4 08 00 00       	call   114f2 <gdt_alloc_desc>
   10c3e:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if( tss_sel < 0 ){
   10c41:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   10c45:	79 1a                	jns    10c61 <tss_init+0x2e>
        log_printf("alloc tss failed");
   10c47:	83 ec 0c             	sub    $0xc,%esp
   10c4a:	68 b4 31 01 00       	push   $0x131b4
   10c4f:	e8 8b 21 00 00       	call   12ddf <log_printf>
   10c54:	83 c4 10             	add    $0x10,%esp
        return -1;
   10c57:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10c5c:	e9 58 01 00 00       	jmp    10db9 <tss_init+0x186>
    }

    segment_desc_set( tss_sel , (uint32_t)&(task->tss) ,  sizeof(tss_t) , 
   10c61:	8b 45 08             	mov    0x8(%ebp),%eax
   10c64:	83 c0 4c             	add    $0x4c,%eax
   10c67:	68 89 00 00 00       	push   $0x89
   10c6c:	6a 68                	push   $0x68
   10c6e:	50                   	push   %eax
   10c6f:	ff 75 ec             	pushl  -0x14(%ebp)
   10c72:	e8 05 07 00 00       	call   1137c <segment_desc_set>
   10c77:	83 c4 10             	add    $0x10,%esp
    SEG_P_PRESENT | SEG_DPL0 | SEG_TYPE_TSS  );
 
    kernel_memset( &task->tss , 0 , sizeof(tss_t) );
   10c7a:	8b 45 08             	mov    0x8(%ebp),%eax
   10c7d:	83 c0 4c             	add    $0x4c,%eax
   10c80:	83 ec 04             	sub    $0x4,%esp
   10c83:	6a 68                	push   $0x68
   10c85:	6a 00                	push   $0x0
   10c87:	50                   	push   %eax
   10c88:	e8 3e 1b 00 00       	call   127cb <kernel_memset>
   10c8d:	83 c4 10             	add    $0x10,%esp

    int code_sel , data_sel; 

    if( flag & TASK_FALGS_SYSTEM ){
   10c90:	8b 45 0c             	mov    0xc(%ebp),%eax
   10c93:	83 e0 01             	and    $0x1,%eax
   10c96:	85 c0                	test   %eax,%eax
   10c98:	74 10                	je     10caa <tss_init+0x77>
        code_sel = KERNEL_SELECTOR_CS;
   10c9a:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%ebp)
        data_sel = KERNEL_SELECTOR_DS;
   10ca1:	c7 45 f0 10 00 00 00 	movl   $0x10,-0x10(%ebp)
   10ca8:	eb 16                	jmp    10cc0 <tss_init+0x8d>
    }
    else{
        code_sel = task_manager.app_code_sel | SEG_CPL3 ;
   10caa:	a1 b8 81 01 00       	mov    0x181b8,%eax
   10caf:	83 c8 03             	or     $0x3,%eax
   10cb2:	89 45 f4             	mov    %eax,-0xc(%ebp)
        data_sel = task_manager.app_data_sel | SEG_CPL3 ;
   10cb5:	a1 bc 81 01 00       	mov    0x181bc,%eax
   10cba:	83 c8 03             	or     $0x3,%eax
   10cbd:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }

    uint32_t kernel_stack = memory_alloc_page();
   10cc0:	e8 b9 fd ff ff       	call   10a7e <memory_alloc_page>
   10cc5:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if( kernel_stack == 0 ){
   10cc8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   10ccc:	0f 84 bc 00 00 00    	je     10d8e <tss_init+0x15b>
        goto tss_init_failed;
    }
    task->tss.eip = entry;
   10cd2:	8b 45 08             	mov    0x8(%ebp),%eax
   10cd5:	8b 55 10             	mov    0x10(%ebp),%edx
   10cd8:	89 50 6c             	mov    %edx,0x6c(%eax)
    task->tss.esp = esp;
   10cdb:	8b 45 08             	mov    0x8(%ebp),%eax
   10cde:	8b 55 14             	mov    0x14(%ebp),%edx
   10ce1:	89 90 84 00 00 00    	mov    %edx,0x84(%eax)
    task->tss.esp0 = kernel_stack + MEM_PAGE_SIZE;
   10ce7:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10cea:	8d 90 00 10 00 00    	lea    0x1000(%eax),%edx
   10cf0:	8b 45 08             	mov    0x8(%ebp),%eax
   10cf3:	89 50 50             	mov    %edx,0x50(%eax)
    task->tss.ss = data_sel;
   10cf6:	8b 55 f0             	mov    -0x10(%ebp),%edx
   10cf9:	8b 45 08             	mov    0x8(%ebp),%eax
   10cfc:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
    task->tss.ss0 = KERNEL_SELECTOR_DS;
   10d02:	8b 45 08             	mov    0x8(%ebp),%eax
   10d05:	c7 40 54 10 00 00 00 	movl   $0x10,0x54(%eax)
    task->tss.es = task->tss.ds = task->tss.fs = task->tss.gs = data_sel;
   10d0c:	8b 55 f0             	mov    -0x10(%ebp),%edx
   10d0f:	8b 45 08             	mov    0x8(%ebp),%eax
   10d12:	89 90 a8 00 00 00    	mov    %edx,0xa8(%eax)
   10d18:	8b 45 08             	mov    0x8(%ebp),%eax
   10d1b:	8b 90 a8 00 00 00    	mov    0xa8(%eax),%edx
   10d21:	8b 45 08             	mov    0x8(%ebp),%eax
   10d24:	89 90 a4 00 00 00    	mov    %edx,0xa4(%eax)
   10d2a:	8b 45 08             	mov    0x8(%ebp),%eax
   10d2d:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
   10d33:	8b 45 08             	mov    0x8(%ebp),%eax
   10d36:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
   10d3c:	8b 45 08             	mov    0x8(%ebp),%eax
   10d3f:	8b 90 a0 00 00 00    	mov    0xa0(%eax),%edx
   10d45:	8b 45 08             	mov    0x8(%ebp),%eax
   10d48:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    task->tss.cs = code_sel;
   10d4e:	8b 55 f4             	mov    -0xc(%ebp),%edx
   10d51:	8b 45 08             	mov    0x8(%ebp),%eax
   10d54:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    task->tss.eflags = EFLAGS_IF | EFLAGS_DEFAULT;
   10d5a:	8b 45 08             	mov    0x8(%ebp),%eax
   10d5d:	c7 40 70 02 02 00 00 	movl   $0x202,0x70(%eax)

    uint32_t page_dir = memory_create_uvm();    
   10d64:	e8 8f fa ff ff       	call   107f8 <memory_create_uvm>
   10d69:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    if( page_dir == 0 ){
   10d6c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10d70:	74 1f                	je     10d91 <tss_init+0x15e>
        goto tss_init_failed;
        return -1;
    }
    task->tss.cr3 = page_dir;
   10d72:	8b 45 08             	mov    0x8(%ebp),%eax
   10d75:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   10d78:	89 50 68             	mov    %edx,0x68(%eax)
    task->tss_sel = tss_sel;
   10d7b:	8b 45 08             	mov    0x8(%ebp),%eax
   10d7e:	8b 55 ec             	mov    -0x14(%ebp),%edx
   10d81:	89 90 b4 00 00 00    	mov    %edx,0xb4(%eax)
    return 0;
   10d87:	b8 00 00 00 00       	mov    $0x0,%eax
   10d8c:	eb 2b                	jmp    10db9 <tss_init+0x186>
        goto tss_init_failed;
   10d8e:	90                   	nop
   10d8f:	eb 01                	jmp    10d92 <tss_init+0x15f>
        goto tss_init_failed;
   10d91:	90                   	nop
tss_init_failed:
    gdt_free_sel(tss_sel);
   10d92:	83 ec 0c             	sub    $0xc,%esp
   10d95:	ff 75 ec             	pushl  -0x14(%ebp)
   10d98:	e8 e6 07 00 00       	call   11583 <gdt_free_sel>
   10d9d:	83 c4 10             	add    $0x10,%esp
    if( kernel_stack ){
   10da0:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   10da4:	74 0e                	je     10db4 <tss_init+0x181>
        memory_free_page( kernel_stack );
   10da6:	83 ec 0c             	sub    $0xc,%esp
   10da9:	ff 75 e8             	pushl  -0x18(%ebp)
   10dac:	e8 fd fc ff ff       	call   10aae <memory_free_page>
   10db1:	83 c4 10             	add    $0x10,%esp
    }
    return -1;
   10db4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10db9:	c9                   	leave  
   10dba:	c3                   	ret    

00010dbb <task_init>:

int task_init( task_t * task , const char * name , int flag ,  uint32_t entry , uint32_t esp ){
   10dbb:	55                   	push   %ebp
   10dbc:	89 e5                	mov    %esp,%ebp
   10dbe:	83 ec 18             	sub    $0x18,%esp
    ASSERT( task != (task_t *)0 );
   10dc1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10dc5:	75 19                	jne    10de0 <task_init+0x25>
   10dc7:	68 c5 31 01 00       	push   $0x131c5
   10dcc:	68 48 32 01 00       	push   $0x13248
   10dd1:	6a 44                	push   $0x44
   10dd3:	68 dc 31 01 00       	push   $0x131dc
   10dd8:	e8 fb 1c 00 00       	call   12ad8 <pannic>
   10ddd:	83 c4 10             	add    $0x10,%esp
    tss_init( task , flag , entry , esp );
   10de0:	ff 75 18             	pushl  0x18(%ebp)
   10de3:	ff 75 14             	pushl  0x14(%ebp)
   10de6:	ff 75 10             	pushl  0x10(%ebp)
   10de9:	ff 75 08             	pushl  0x8(%ebp)
   10dec:	e8 42 fe ff ff       	call   10c33 <tss_init>
   10df1:	83 c4 10             	add    $0x10,%esp
    kernel_strncpy( task -> name , name , TASK_NAME_SIZE );
   10df4:	8b 45 08             	mov    0x8(%ebp),%eax
   10df7:	83 c0 14             	add    $0x14,%eax
   10dfa:	83 ec 04             	sub    $0x4,%esp
   10dfd:	6a 20                	push   $0x20
   10dff:	ff 75 0c             	pushl  0xc(%ebp)
   10e02:	50                   	push   %eax
   10e03:	e8 69 18 00 00       	call   12671 <kernel_strncpy>
   10e08:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   10e0b:	8b 45 08             	mov    0x8(%ebp),%eax
   10e0e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    task -> time_ticks = TASK_TIME_SLICE_DEFAULT;
   10e14:	8b 45 08             	mov    0x8(%ebp),%eax
   10e17:	c7 40 0c 0a 00 00 00 	movl   $0xa,0xc(%eax)
    task -> slice_ticks = task -> time_ticks;
   10e1e:	8b 45 08             	mov    0x8(%ebp),%eax
   10e21:	8b 50 0c             	mov    0xc(%eax),%edx
   10e24:	8b 45 08             	mov    0x8(%ebp),%eax
   10e27:	89 50 10             	mov    %edx,0x10(%eax)
    task -> sleep_ticks = 0;
   10e2a:	8b 45 08             	mov    0x8(%ebp),%eax
   10e2d:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    //初始化节点
    list_node_init( &task -> all_node );
   10e34:	8b 45 08             	mov    0x8(%ebp),%eax
   10e37:	83 c0 44             	add    $0x44,%eax
   10e3a:	83 ec 0c             	sub    $0xc,%esp
   10e3d:	50                   	push   %eax
   10e3e:	e8 7a fd ff ff       	call   10bbd <list_node_init>
   10e43:	83 c4 10             	add    $0x10,%esp
    list_node_init( &task -> run_node );
   10e46:	8b 45 08             	mov    0x8(%ebp),%eax
   10e49:	83 c0 34             	add    $0x34,%eax
   10e4c:	83 ec 0c             	sub    $0xc,%esp
   10e4f:	50                   	push   %eax
   10e50:	e8 68 fd ff ff       	call   10bbd <list_node_init>
   10e55:	83 c4 10             	add    $0x10,%esp
    list_node_init( &task -> wait_node );
   10e58:	8b 45 08             	mov    0x8(%ebp),%eax
   10e5b:	83 c0 3c             	add    $0x3c,%eax
   10e5e:	83 ec 0c             	sub    $0xc,%esp
   10e61:	50                   	push   %eax
   10e62:	e8 56 fd ff ff       	call   10bbd <list_node_init>
   10e67:	83 c4 10             	add    $0x10,%esp
    //插入就绪队列以及任务队列 
    irq_state_t state = irq_enter_protection();
   10e6a:	e8 a4 10 00 00       	call   11f13 <irq_enter_protection>
   10e6f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task->pid = (uint32_t)task;
   10e72:	8b 55 08             	mov    0x8(%ebp),%edx
   10e75:	8b 45 08             	mov    0x8(%ebp),%eax
   10e78:	89 50 04             	mov    %edx,0x4(%eax)
    task_set_ready( task );
   10e7b:	83 ec 0c             	sub    $0xc,%esp
   10e7e:	ff 75 08             	pushl  0x8(%ebp)
   10e81:	e8 d3 01 00 00       	call   11059 <task_set_ready>
   10e86:	83 c4 10             	add    $0x10,%esp
    list_insert_last( &task_manager.task_list , &task->all_node  );
   10e89:	8b 45 08             	mov    0x8(%ebp),%eax
   10e8c:	83 c0 44             	add    $0x44,%eax
   10e8f:	83 ec 08             	sub    $0x8,%esp
   10e92:	50                   	push   %eax
   10e93:	68 30 80 01 00       	push   $0x18030
   10e98:	e8 08 1d 00 00       	call   12ba5 <list_insert_last>
   10e9d:	83 c4 10             	add    $0x10,%esp
    irq_leave_protection( state );
   10ea0:	83 ec 0c             	sub    $0xc,%esp
   10ea3:	ff 75 f4             	pushl  -0xc(%ebp)
   10ea6:	e8 80 10 00 00       	call   11f2b <irq_leave_protection>
   10eab:	83 c4 10             	add    $0x10,%esp
} 
   10eae:	90                   	nop
   10eaf:	c9                   	leave  
   10eb0:	c3                   	ret    

00010eb1 <task_switch_from_to>:

void simple_switch( uint32_t **from  , uint32_t * to);

void task_switch_from_to( task_t *from , task_t * to ){
   10eb1:	55                   	push   %ebp
   10eb2:	89 e5                	mov    %esp,%ebp
   10eb4:	83 ec 08             	sub    $0x8,%esp
    swith_to_tss( to->tss_sel );
   10eb7:	8b 45 0c             	mov    0xc(%ebp),%eax
   10eba:	8b 80 b4 00 00 00    	mov    0xb4(%eax),%eax
   10ec0:	83 ec 0c             	sub    $0xc,%esp
   10ec3:	50                   	push   %eax
   10ec4:	e8 a7 06 00 00       	call   11570 <swith_to_tss>
   10ec9:	83 c4 10             	add    $0x10,%esp
    //simple_switch( &(from->stack) , (to->stack) );
}
   10ecc:	90                   	nop
   10ecd:	c9                   	leave  
   10ece:	c3                   	ret    

00010ecf <task_first_init>:


void task_first_init( void ){
   10ecf:	55                   	push   %ebp
   10ed0:	89 e5                	mov    %esp,%ebp
   10ed2:	83 ec 18             	sub    $0x18,%esp
    void first_task_entry(void);
    extern uint8_t s_first_task[] , e_first_task[];

    uint32_t copy_size = (uint32_t)(e_first_task - s_first_task );
   10ed5:	ba 10 af 01 00       	mov    $0x1af10,%edx
   10eda:	b8 00 ae 01 00       	mov    $0x1ae00,%eax
   10edf:	29 c2                	sub    %eax,%edx
   10ee1:	89 d0                	mov    %edx,%eax
   10ee3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t alloc_size = 10 * MEM_PAGE_SIZE;
   10ee6:	c7 45 f0 00 a0 00 00 	movl   $0xa000,-0x10(%ebp)
    ASSERT( copy_size < alloc_size );
   10eed:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10ef0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
   10ef3:	72 19                	jb     10f0e <task_first_init+0x3f>
   10ef5:	68 19 32 01 00       	push   $0x13219
   10efa:	68 54 32 01 00       	push   $0x13254
   10eff:	6a 65                	push   $0x65
   10f01:	68 dc 31 01 00       	push   $0x131dc
   10f06:	e8 cd 1b 00 00       	call   12ad8 <pannic>
   10f0b:	83 c4 10             	add    $0x10,%esp


    uint32_t first_start = (uint32_t)first_task_entry;
   10f0e:	c7 45 ec 00 00 00 80 	movl   $0x80000000,-0x14(%ebp)
    task_init( &task_manager.first_task , "first_task" ,  0 , first_start , first_start + alloc_size );
   10f15:	8b 55 ec             	mov    -0x14(%ebp),%edx
   10f18:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10f1b:	01 d0                	add    %edx,%eax
   10f1d:	83 ec 0c             	sub    $0xc,%esp
   10f20:	50                   	push   %eax
   10f21:	ff 75 ec             	pushl  -0x14(%ebp)
   10f24:	6a 00                	push   $0x0
   10f26:	68 30 32 01 00       	push   $0x13230
   10f2b:	68 48 80 01 00       	push   $0x18048
   10f30:	e8 86 fe ff ff       	call   10dbb <task_init>
   10f35:	83 c4 20             	add    $0x20,%esp
    write_tr( task_manager.first_task.tss_sel );
   10f38:	a1 fc 80 01 00       	mov    0x180fc,%eax
   10f3d:	0f b7 c0             	movzwl %ax,%eax
   10f40:	83 ec 0c             	sub    $0xc,%esp
   10f43:	50                   	push   %eax
   10f44:	e8 b6 fc ff ff       	call   10bff <write_tr>
   10f49:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = &task_manager.first_task;
   10f4c:	c7 05 20 80 01 00 48 	movl   $0x18048,0x18020
   10f53:	80 01 00 

    mmu_set_page_dir(task_manager.first_task.tss.cr3);
   10f56:	a1 b0 80 01 00       	mov    0x180b0,%eax
   10f5b:	83 ec 0c             	sub    $0xc,%esp
   10f5e:	50                   	push   %eax
   10f5f:	e8 be fc ff ff       	call   10c22 <mmu_set_page_dir>
   10f64:	83 c4 10             	add    $0x10,%esp
    
    memory_alloc_page_for(first_start , alloc_size , PTE_P | PTE_W | PTE_U );
   10f67:	83 ec 04             	sub    $0x4,%esp
   10f6a:	6a 07                	push   $0x7
   10f6c:	ff 75 f0             	pushl  -0x10(%ebp)
   10f6f:	ff 75 ec             	pushl  -0x14(%ebp)
   10f72:	e8 e5 fa ff ff       	call   10a5c <memory_alloc_page_for>
   10f77:	83 c4 10             	add    $0x10,%esp
    kernel_memcpy( (void *)first_start , s_first_task , copy_size  );
   10f7a:	8b 55 f4             	mov    -0xc(%ebp),%edx
   10f7d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10f80:	83 ec 04             	sub    $0x4,%esp
   10f83:	52                   	push   %edx
   10f84:	68 00 ae 01 00       	push   $0x1ae00
   10f89:	50                   	push   %eax
   10f8a:	e8 ed 17 00 00       	call   1277c <kernel_memcpy>
   10f8f:	83 c4 10             	add    $0x10,%esp
}
   10f92:	90                   	nop
   10f93:	c9                   	leave  
   10f94:	c3                   	ret    

00010f95 <task_first_task>:

task_t * task_first_task( void ){ 
   10f95:	55                   	push   %ebp
   10f96:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   10f98:	b8 48 80 01 00       	mov    $0x18048,%eax
}
   10f9d:	5d                   	pop    %ebp
   10f9e:	c3                   	ret    

00010f9f <idle_task_entry>:

static void idle_task_entry( void ){
   10f9f:	55                   	push   %ebp
   10fa0:	89 e5                	mov    %esp,%ebp
    for( ; ; ){
        hlt();
   10fa2:	e8 51 fc ff ff       	call   10bf8 <hlt>
   10fa7:	eb f9                	jmp    10fa2 <idle_task_entry+0x3>

00010fa9 <task_manager_init>:
    }
}

void task_manager_init( void ){
   10fa9:	55                   	push   %ebp
   10faa:	89 e5                	mov    %esp,%ebp
   10fac:	83 ec 18             	sub    $0x18,%esp
    int sel = gdt_alloc_desc();
   10faf:	e8 3e 05 00 00       	call   114f2 <gdt_alloc_desc>
   10fb4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    segment_desc_set( sel , 0x00000000 , 0xFFFFFFFF ,
   10fb7:	68 f2 40 00 00       	push   $0x40f2
   10fbc:	6a ff                	push   $0xffffffff
   10fbe:	6a 00                	push   $0x0
   10fc0:	ff 75 f4             	pushl  -0xc(%ebp)
   10fc3:	e8 b4 03 00 00       	call   1137c <segment_desc_set>
   10fc8:	83 c4 10             	add    $0x10,%esp
    SEG_P_PRESENT | SEG_DPL3 | SEG_S_NORMAL | SEG_TYPE_DATA | SEG_TYPE_RW | SEG_D );
    task_manager.app_data_sel = sel;
   10fcb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10fce:	a3 bc 81 01 00       	mov    %eax,0x181bc
    sel = gdt_alloc_desc();
   10fd3:	e8 1a 05 00 00       	call   114f2 <gdt_alloc_desc>
   10fd8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    segment_desc_set( sel , 0x00000000 , 0xFFFFFFFF ,
   10fdb:	68 fa 40 00 00       	push   $0x40fa
   10fe0:	6a ff                	push   $0xffffffff
   10fe2:	6a 00                	push   $0x0
   10fe4:	ff 75 f4             	pushl  -0xc(%ebp)
   10fe7:	e8 90 03 00 00       	call   1137c <segment_desc_set>
   10fec:	83 c4 10             	add    $0x10,%esp
    SEG_P_PRESENT | SEG_DPL3 | SEG_S_NORMAL | SEG_TYPE_CODE | SEG_TYPE_RW | SEG_D ); 
    task_manager.app_code_sel = sel;
   10fef:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10ff2:	a3 b8 81 01 00       	mov    %eax,0x181b8

    list_init( &task_manager.ready_list );
   10ff7:	83 ec 0c             	sub    $0xc,%esp
   10ffa:	68 24 80 01 00       	push   $0x18024
   10fff:	e8 1d 1b 00 00       	call   12b21 <list_init>
   11004:	83 c4 10             	add    $0x10,%esp
    list_init( &task_manager.task_list );
   11007:	83 ec 0c             	sub    $0xc,%esp
   1100a:	68 30 80 01 00       	push   $0x18030
   1100f:	e8 0d 1b 00 00       	call   12b21 <list_init>
   11014:	83 c4 10             	add    $0x10,%esp
    list_init( &task_manager.sleep_list );
   11017:	83 ec 0c             	sub    $0xc,%esp
   1101a:	68 3c 80 01 00       	push   $0x1803c
   1101f:	e8 fd 1a 00 00       	call   12b21 <list_init>
   11024:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = ( task_t * )0;
   11027:	c7 05 20 80 01 00 00 	movl   $0x0,0x18020
   1102e:	00 00 00 

    task_init( &task_manager.idle_task , "idle_tasks" , TASK_FALGS_SYSTEM , (uint32_t)idle_task_entry , (uint32_t)( idle_task_stack + IDLE_TASK_SIZE) );
   11031:	b8 20 80 01 00       	mov    $0x18020,%eax
   11036:	89 c2                	mov    %eax,%edx
   11038:	b8 9f 0f 01 00       	mov    $0x10f9f,%eax
   1103d:	83 ec 0c             	sub    $0xc,%esp
   11040:	52                   	push   %edx
   11041:	50                   	push   %eax
   11042:	6a 01                	push   $0x1
   11044:	68 3b 32 01 00       	push   $0x1323b
   11049:	68 00 81 01 00       	push   $0x18100
   1104e:	e8 68 fd ff ff       	call   10dbb <task_init>
   11053:	83 c4 20             	add    $0x20,%esp
}
   11056:	90                   	nop
   11057:	c9                   	leave  
   11058:	c3                   	ret    

00011059 <task_set_ready>:
 

void task_set_ready( task_t * task ){
   11059:	55                   	push   %ebp
   1105a:	89 e5                	mov    %esp,%ebp
   1105c:	83 ec 08             	sub    $0x8,%esp
    if( task == &task_manager.idle_task ){
   1105f:	81 7d 08 00 81 01 00 	cmpl   $0x18100,0x8(%ebp)
   11066:	74 22                	je     1108a <task_set_ready+0x31>
        return ;
    }
    list_insert_last( &task_manager.ready_list , &task->run_node );
   11068:	8b 45 08             	mov    0x8(%ebp),%eax
   1106b:	83 c0 34             	add    $0x34,%eax
   1106e:	83 ec 08             	sub    $0x8,%esp
   11071:	50                   	push   %eax
   11072:	68 24 80 01 00       	push   $0x18024
   11077:	e8 29 1b 00 00       	call   12ba5 <list_insert_last>
   1107c:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_READY;
   1107f:	8b 45 08             	mov    0x8(%ebp),%eax
   11082:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
   11088:	eb 01                	jmp    1108b <task_set_ready+0x32>
        return ;
   1108a:	90                   	nop
}
   1108b:	c9                   	leave  
   1108c:	c3                   	ret    

0001108d <task_set_block>:

void task_set_block( task_t * task ){
   1108d:	55                   	push   %ebp
   1108e:	89 e5                	mov    %esp,%ebp
   11090:	83 ec 08             	sub    $0x8,%esp
    list_remove_node( &task_manager.ready_list , &task->run_node );
   11093:	8b 45 08             	mov    0x8(%ebp),%eax
   11096:	83 c0 34             	add    $0x34,%eax
   11099:	83 ec 08             	sub    $0x8,%esp
   1109c:	50                   	push   %eax
   1109d:	68 24 80 01 00       	push   $0x18024
   110a2:	e8 da 1b 00 00       	call   12c81 <list_remove_node>
   110a7:	83 c4 10             	add    $0x10,%esp
}
   110aa:	90                   	nop
   110ab:	c9                   	leave  
   110ac:	c3                   	ret    

000110ad <task_next_run>:

task_t * task_next_run( void ){
   110ad:	55                   	push   %ebp
   110ae:	89 e5                	mov    %esp,%ebp
   110b0:	83 ec 10             	sub    $0x10,%esp
    if( list_count( &task_manager.ready_list) == 0 ){
   110b3:	68 24 80 01 00       	push   $0x18024
   110b8:	e8 26 fb ff ff       	call   10be3 <list_count>
   110bd:	83 c4 04             	add    $0x4,%esp
   110c0:	85 c0                	test   %eax,%eax
   110c2:	75 07                	jne    110cb <task_next_run+0x1e>
        return &task_manager.idle_task;
   110c4:	b8 00 81 01 00       	mov    $0x18100,%eax
   110c9:	eb 23                	jmp    110ee <task_next_run+0x41>
    }
    list_node_t * task_node = list_first(&task_manager.ready_list);
   110cb:	68 24 80 01 00       	push   $0x18024
   110d0:	e8 19 fb ff ff       	call   10bee <list_first>
   110d5:	83 c4 04             	add    $0x4,%esp
   110d8:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return list_node_parent( task_node , task_t , run_node ); 
   110db:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   110df:	74 08                	je     110e9 <task_next_run+0x3c>
   110e1:	8b 45 fc             	mov    -0x4(%ebp),%eax
   110e4:	83 e8 34             	sub    $0x34,%eax
   110e7:	eb 05                	jmp    110ee <task_next_run+0x41>
   110e9:	b8 00 00 00 00       	mov    $0x0,%eax
}
   110ee:	c9                   	leave  
   110ef:	c3                   	ret    

000110f0 <task_current>:

task_t * task_current( void ){
   110f0:	55                   	push   %ebp
   110f1:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   110f3:	a1 20 80 01 00       	mov    0x18020,%eax
}
   110f8:	5d                   	pop    %ebp
   110f9:	c3                   	ret    

000110fa <sys_sched_yield>:

int sys_sched_yield( void ){
   110fa:	55                   	push   %ebp
   110fb:	89 e5                	mov    %esp,%ebp
   110fd:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();    
   11100:	e8 0e 0e 00 00       	call   11f13 <irq_enter_protection>
   11105:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if( list_count(&task_manager.ready_list) > 1 ){
   11108:	83 ec 0c             	sub    $0xc,%esp
   1110b:	68 24 80 01 00       	push   $0x18024
   11110:	e8 ce fa ff ff       	call   10be3 <list_count>
   11115:	83 c4 10             	add    $0x10,%esp
   11118:	83 f8 01             	cmp    $0x1,%eax
   1111b:	7e 29                	jle    11146 <sys_sched_yield+0x4c>
        task_t * curr_task = task_current();
   1111d:	e8 ce ff ff ff       	call   110f0 <task_current>
   11122:	89 45 f0             	mov    %eax,-0x10(%ebp)

        task_set_block( curr_task );
   11125:	83 ec 0c             	sub    $0xc,%esp
   11128:	ff 75 f0             	pushl  -0x10(%ebp)
   1112b:	e8 5d ff ff ff       	call   1108d <task_set_block>
   11130:	83 c4 10             	add    $0x10,%esp
        task_set_ready( curr_task );
   11133:	83 ec 0c             	sub    $0xc,%esp
   11136:	ff 75 f0             	pushl  -0x10(%ebp)
   11139:	e8 1b ff ff ff       	call   11059 <task_set_ready>
   1113e:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   11141:	e8 15 00 00 00       	call   1115b <task_dispatch>
    }
    irq_leave_protection( state );
   11146:	83 ec 0c             	sub    $0xc,%esp
   11149:	ff 75 f4             	pushl  -0xc(%ebp)
   1114c:	e8 da 0d 00 00       	call   11f2b <irq_leave_protection>
   11151:	83 c4 10             	add    $0x10,%esp
    return 0;
   11154:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11159:	c9                   	leave  
   1115a:	c3                   	ret    

0001115b <task_dispatch>:

void task_dispatch(void){
   1115b:	55                   	push   %ebp
   1115c:	89 e5                	mov    %esp,%ebp
   1115e:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();    
   11161:	e8 ad 0d 00 00       	call   11f13 <irq_enter_protection>
   11166:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_t * to = task_next_run();
   11169:	e8 3f ff ff ff       	call   110ad <task_next_run>
   1116e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if( to != task_manager.curr_task ){
   11171:	a1 20 80 01 00       	mov    0x18020,%eax
   11176:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   11179:	74 2a                	je     111a5 <task_dispatch+0x4a>
        task_t * from = task_current();
   1117b:	e8 70 ff ff ff       	call   110f0 <task_current>
   11180:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_manager.curr_task = to;
   11183:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11186:	a3 20 80 01 00       	mov    %eax,0x18020
        to -> state = TASK_RUNNING;
   1118b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1118e:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        task_switch_from_to( from , to );
   11194:	83 ec 08             	sub    $0x8,%esp
   11197:	ff 75 f0             	pushl  -0x10(%ebp)
   1119a:	ff 75 ec             	pushl  -0x14(%ebp)
   1119d:	e8 0f fd ff ff       	call   10eb1 <task_switch_from_to>
   111a2:	83 c4 10             	add    $0x10,%esp
    }
    irq_leave_protection( state );
   111a5:	83 ec 0c             	sub    $0xc,%esp
   111a8:	ff 75 f4             	pushl  -0xc(%ebp)
   111ab:	e8 7b 0d 00 00       	call   11f2b <irq_leave_protection>
   111b0:	83 c4 10             	add    $0x10,%esp
}
   111b3:	90                   	nop
   111b4:	c9                   	leave  
   111b5:	c3                   	ret    

000111b6 <task_time_tick>:


void task_time_tick( void ){
   111b6:	55                   	push   %ebp
   111b7:	89 e5                	mov    %esp,%ebp
   111b9:	83 ec 18             	sub    $0x18,%esp
    task_t * curr_task  = task_current();
   111bc:	e8 2f ff ff ff       	call   110f0 <task_current>
   111c1:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if( -- curr_task->slice_ticks == 0 ){ 
   111c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   111c7:	8b 40 10             	mov    0x10(%eax),%eax
   111ca:	8d 50 ff             	lea    -0x1(%eax),%edx
   111cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
   111d0:	89 50 10             	mov    %edx,0x10(%eax)
   111d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   111d6:	8b 40 10             	mov    0x10(%eax),%eax
   111d9:	85 c0                	test   %eax,%eax
   111db:	75 11                	jne    111ee <task_time_tick+0x38>
        curr_task -> slice_ticks = curr_task -> time_ticks;
   111dd:	8b 45 f0             	mov    -0x10(%ebp),%eax
   111e0:	8b 50 0c             	mov    0xc(%eax),%edx
   111e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   111e6:	89 50 10             	mov    %edx,0x10(%eax)
        sys_sched_yield();
   111e9:	e8 0c ff ff ff       	call   110fa <sys_sched_yield>
    }

    list_node_t * curr = list_first( &task_manager.sleep_list );
   111ee:	83 ec 0c             	sub    $0xc,%esp
   111f1:	68 3c 80 01 00       	push   $0x1803c
   111f6:	e8 f3 f9 ff ff       	call   10bee <list_first>
   111fb:	83 c4 10             	add    $0x10,%esp
   111fe:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while( curr ){
   11201:	eb 62                	jmp    11265 <task_time_tick+0xaf>
        list_node_t * next = list_node_next( curr );
   11203:	83 ec 0c             	sub    $0xc,%esp
   11206:	ff 75 f4             	pushl  -0xc(%ebp)
   11209:	e8 ca f9 ff ff       	call   10bd8 <list_node_next>
   1120e:	83 c4 10             	add    $0x10,%esp
   11211:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_t * task = list_node_parent( curr , task_t , run_node );
   11214:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11218:	74 08                	je     11222 <task_time_tick+0x6c>
   1121a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1121d:	83 e8 34             	sub    $0x34,%eax
   11220:	eb 05                	jmp    11227 <task_time_tick+0x71>
   11222:	b8 00 00 00 00       	mov    $0x0,%eax
   11227:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if( --task->sleep_ticks == 0 ){
   1122a:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1122d:	8b 40 08             	mov    0x8(%eax),%eax
   11230:	8d 50 ff             	lea    -0x1(%eax),%edx
   11233:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11236:	89 50 08             	mov    %edx,0x8(%eax)
   11239:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1123c:	8b 40 08             	mov    0x8(%eax),%eax
   1123f:	85 c0                	test   %eax,%eax
   11241:	75 1c                	jne    1125f <task_time_tick+0xa9>
            task_set_wakeup( task );
   11243:	83 ec 0c             	sub    $0xc,%esp
   11246:	ff 75 e8             	pushl  -0x18(%ebp)
   11249:	e8 5f 00 00 00       	call   112ad <task_set_wakeup>
   1124e:	83 c4 10             	add    $0x10,%esp
            task_set_ready( task );
   11251:	83 ec 0c             	sub    $0xc,%esp
   11254:	ff 75 e8             	pushl  -0x18(%ebp)
   11257:	e8 fd fd ff ff       	call   11059 <task_set_ready>
   1125c:	83 c4 10             	add    $0x10,%esp
        }
        curr = next;
   1125f:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11262:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while( curr ){
   11265:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11269:	75 98                	jne    11203 <task_time_tick+0x4d>
    }
    task_dispatch();
   1126b:	e8 eb fe ff ff       	call   1115b <task_dispatch>
}
   11270:	90                   	nop
   11271:	c9                   	leave  
   11272:	c3                   	ret    

00011273 <task_set_sleep>:

void task_set_sleep( task_t * task , uint32_t ticks ){
   11273:	55                   	push   %ebp
   11274:	89 e5                	mov    %esp,%ebp
   11276:	83 ec 08             	sub    $0x8,%esp
    if( ticks == 0 ){
   11279:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1127d:	74 2b                	je     112aa <task_set_sleep+0x37>
        return ;
    } 
    task -> sleep_ticks = ticks;
   1127f:	8b 55 0c             	mov    0xc(%ebp),%edx
   11282:	8b 45 08             	mov    0x8(%ebp),%eax
   11285:	89 50 08             	mov    %edx,0x8(%eax)
    task -> state = TASK_SLEEP;
   11288:	8b 45 08             	mov    0x8(%ebp),%eax
   1128b:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    list_insert_last( &task_manager.sleep_list , &task->run_node );
   11291:	8b 45 08             	mov    0x8(%ebp),%eax
   11294:	83 c0 34             	add    $0x34,%eax
   11297:	83 ec 08             	sub    $0x8,%esp
   1129a:	50                   	push   %eax
   1129b:	68 3c 80 01 00       	push   $0x1803c
   112a0:	e8 00 19 00 00       	call   12ba5 <list_insert_last>
   112a5:	83 c4 10             	add    $0x10,%esp
   112a8:	eb 01                	jmp    112ab <task_set_sleep+0x38>
        return ;
   112aa:	90                   	nop
}
   112ab:	c9                   	leave  
   112ac:	c3                   	ret    

000112ad <task_set_wakeup>:


void task_set_wakeup( task_t * task ){
   112ad:	55                   	push   %ebp
   112ae:	89 e5                	mov    %esp,%ebp
   112b0:	83 ec 08             	sub    $0x8,%esp
    list_remove_node( &task_manager.sleep_list , &task->run_node );
   112b3:	8b 45 08             	mov    0x8(%ebp),%eax
   112b6:	83 c0 34             	add    $0x34,%eax
   112b9:	83 ec 08             	sub    $0x8,%esp
   112bc:	50                   	push   %eax
   112bd:	68 3c 80 01 00       	push   $0x1803c
   112c2:	e8 ba 19 00 00       	call   12c81 <list_remove_node>
   112c7:	83 c4 10             	add    $0x10,%esp
}
   112ca:	90                   	nop
   112cb:	c9                   	leave  
   112cc:	c3                   	ret    

000112cd <sys_sleep>:

void sys_sleep( uint32_t ms ){
   112cd:	55                   	push   %ebp
   112ce:	89 e5                	mov    %esp,%ebp
   112d0:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   112d3:	e8 3b 0c 00 00       	call   11f13 <irq_enter_protection>
   112d8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    task_set_block(task_manager.curr_task);
   112db:	a1 20 80 01 00       	mov    0x18020,%eax
   112e0:	83 ec 0c             	sub    $0xc,%esp
   112e3:	50                   	push   %eax
   112e4:	e8 a4 fd ff ff       	call   1108d <task_set_block>
   112e9:	83 c4 10             	add    $0x10,%esp
    task_set_sleep(task_manager.curr_task , ( ms + OS_TICKS_MS - 1 ) / OS_TICKS_MS );
   112ec:	8b 45 08             	mov    0x8(%ebp),%eax
   112ef:	83 c0 09             	add    $0x9,%eax
   112f2:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   112f7:	f7 e2                	mul    %edx
   112f9:	c1 ea 03             	shr    $0x3,%edx
   112fc:	a1 20 80 01 00       	mov    0x18020,%eax
   11301:	83 ec 08             	sub    $0x8,%esp
   11304:	52                   	push   %edx
   11305:	50                   	push   %eax
   11306:	e8 68 ff ff ff       	call   11273 <task_set_sleep>
   1130b:	83 c4 10             	add    $0x10,%esp
    task_dispatch();
   1130e:	e8 48 fe ff ff       	call   1115b <task_dispatch>
    irq_leave_protection( state );
   11313:	83 ec 0c             	sub    $0xc,%esp
   11316:	ff 75 f4             	pushl  -0xc(%ebp)
   11319:	e8 0d 0c 00 00       	call   11f2b <irq_leave_protection>
   1131e:	83 c4 10             	add    $0x10,%esp
}
   11321:	90                   	nop
   11322:	c9                   	leave  
   11323:	c3                   	ret    

00011324 <sys_getpid>:

uint32_t sys_getpid( void ){
   11324:	55                   	push   %ebp
   11325:	89 e5                	mov    %esp,%ebp
   11327:	83 ec 10             	sub    $0x10,%esp
    task_t * task = task_current();
   1132a:	e8 c1 fd ff ff       	call   110f0 <task_current>
   1132f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return task->pid;
   11332:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11335:	8b 40 04             	mov    0x4(%eax),%eax
   11338:	c9                   	leave  
   11339:	c3                   	ret    

0001133a <lgdt>:
static inline void lgdt( uint32_t start , uint32_t size ){
   1133a:	55                   	push   %ebp
   1133b:	89 e5                	mov    %esp,%ebp
   1133d:	83 ec 10             	sub    $0x10,%esp
    gdt.start31_16 = start >> 16;
   11340:	8b 45 08             	mov    0x8(%ebp),%eax
   11343:	c1 e8 10             	shr    $0x10,%eax
   11346:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    gdt.start15_0 = start & 0xFFFF;
   1134a:	8b 45 08             	mov    0x8(%ebp),%eax
   1134d:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.limit = size - 1;
   11351:	8b 45 0c             	mov    0xc(%ebp),%eax
   11354:	83 e8 01             	sub    $0x1,%eax
   11357:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__( "lgdt %[g]"::[g]"m"(gdt));
   1135b:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   1135f:	90                   	nop
   11360:	c9                   	leave  
   11361:	c3                   	ret    

00011362 <far_jump>:
static inline void far_jump( uint32_t selector,  uint32_t offset ){
   11362:	55                   	push   %ebp
   11363:	89 e5                	mov    %esp,%ebp
   11365:	83 ec 10             	sub    $0x10,%esp
    uint32_t addr[] = { offset , selector };
   11368:	8b 45 0c             	mov    0xc(%ebp),%eax
   1136b:	89 45 f8             	mov    %eax,-0x8(%ebp)
   1136e:	8b 45 08             	mov    0x8(%ebp),%eax
   11371:	89 45 fc             	mov    %eax,-0x4(%ebp)
    __asm__ __volatile__("ljmpl *(%[a])"::[a]"r"(addr));
   11374:	8d 45 f8             	lea    -0x8(%ebp),%eax
   11377:	ff 28                	ljmp   *(%eax)
}
   11379:	90                   	nop
   1137a:	c9                   	leave  
   1137b:	c3                   	ret    

0001137c <segment_desc_set>:
#include"core/syscall.h"

static _segment_desc_t gdt_table[GDT_TABLE_SIZE];
static mutex_t mutex;

void segment_desc_set( int selector , uint32_t base , uint32_t limit , uint16_t attr ){
   1137c:	55                   	push   %ebp
   1137d:	89 e5                	mov    %esp,%ebp
   1137f:	83 ec 14             	sub    $0x14,%esp
   11382:	8b 45 14             	mov    0x14(%ebp),%eax
   11385:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    _segment_desc_t *desc = gdt_table + ( selector >> 3 );
   11389:	8b 45 08             	mov    0x8(%ebp),%eax
   1138c:	c1 f8 03             	sar    $0x3,%eax
   1138f:	c1 e0 03             	shl    $0x3,%eax
   11392:	05 c0 81 01 00       	add    $0x181c0,%eax
   11397:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if( limit > 0xFFFFF ){
   1139a:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   113a1:	76 0f                	jbe    113b2 <segment_desc_set+0x36>
        attr |= 0x8000; 
   113a3:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
        limit /= 0x1000;
   113a9:	8b 45 10             	mov    0x10(%ebp),%eax
   113ac:	c1 e8 0c             	shr    $0xc,%eax
   113af:	89 45 10             	mov    %eax,0x10(%ebp)
    }
    desc->limit15_0 = limit & 0xFFFF;
   113b2:	8b 45 10             	mov    0x10(%ebp),%eax
   113b5:	89 c2                	mov    %eax,%edx
   113b7:	8b 45 fc             	mov    -0x4(%ebp),%eax
   113ba:	66 89 10             	mov    %dx,(%eax)
    desc->base15_0 = base & 0xFFFF;
   113bd:	8b 45 0c             	mov    0xc(%ebp),%eax
   113c0:	89 c2                	mov    %eax,%edx
   113c2:	8b 45 fc             	mov    -0x4(%ebp),%eax
   113c5:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = ( base >> 16 ) & 0xFF;
   113c9:	8b 45 0c             	mov    0xc(%ebp),%eax
   113cc:	c1 e8 10             	shr    $0x10,%eax
   113cf:	89 c2                	mov    %eax,%edx
   113d1:	8b 45 fc             	mov    -0x4(%ebp),%eax
   113d4:	88 50 04             	mov    %dl,0x4(%eax)
    desc->attr = attr | ( ( (limit >> 16) & 0xF ) << 8 );
   113d7:	8b 45 10             	mov    0x10(%ebp),%eax
   113da:	c1 e8 10             	shr    $0x10,%eax
   113dd:	c1 e0 08             	shl    $0x8,%eax
   113e0:	66 25 00 0f          	and    $0xf00,%ax
   113e4:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   113e8:	89 c2                	mov    %eax,%edx
   113ea:	8b 45 fc             	mov    -0x4(%ebp),%eax
   113ed:	66 89 50 05          	mov    %dx,0x5(%eax)
    desc->base31_24 = ( base >> 24 ) & 0xFF;
   113f1:	8b 45 0c             	mov    0xc(%ebp),%eax
   113f4:	c1 e8 18             	shr    $0x18,%eax
   113f7:	89 c2                	mov    %eax,%edx
   113f9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   113fc:	88 50 07             	mov    %dl,0x7(%eax)
}
   113ff:	90                   	nop
   11400:	c9                   	leave  
   11401:	c3                   	ret    

00011402 <init_gdt>:

void init_gdt( void ){
   11402:	55                   	push   %ebp
   11403:	89 e5                	mov    %esp,%ebp
   11405:	83 ec 18             	sub    $0x18,%esp
    for( int i = 0 ; i < GDT_TABLE_SIZE ; i ++ ){
   11408:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1140f:	eb 19                	jmp    1142a <init_gdt+0x28>
        segment_desc_set( i << 3 , 0 , 0 , 0 );
   11411:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11414:	c1 e0 03             	shl    $0x3,%eax
   11417:	6a 00                	push   $0x0
   11419:	6a 00                	push   $0x0
   1141b:	6a 00                	push   $0x0
   1141d:	50                   	push   %eax
   1141e:	e8 59 ff ff ff       	call   1137c <segment_desc_set>
   11423:	83 c4 10             	add    $0x10,%esp
    for( int i = 0 ; i < GDT_TABLE_SIZE ; i ++ ){
   11426:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1142a:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   11431:	7e de                	jle    11411 <init_gdt+0xf>
    }

    segment_desc_set( KERNEL_SELECTOR_CS , 0 , 0xFFFFFFFF ,  
   11433:	68 98 40 00 00       	push   $0x4098
   11438:	6a ff                	push   $0xffffffff
   1143a:	6a 00                	push   $0x0
   1143c:	6a 08                	push   $0x8
   1143e:	e8 39 ff ff ff       	call   1137c <segment_desc_set>
   11443:	83 c4 10             	add    $0x10,%esp
    SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE | SEG_D );

    segment_desc_set( KERNEL_SELECTOR_DS , 0 , 0xFFFFFFFF ,  
   11446:	68 92 40 00 00       	push   $0x4092
   1144b:	6a ff                	push   $0xffffffff
   1144d:	6a 00                	push   $0x0
   1144f:	6a 10                	push   $0x10
   11451:	e8 26 ff ff ff       	call   1137c <segment_desc_set>
   11456:	83 c4 10             	add    $0x10,%esp
    SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA | SEG_TYPE_RW  | SEG_D );

    gate_desc_set((gate_desc_t * )(gdt_table + ( SELECTOR_SYSCAL >> 3 )) , 
   11459:	ba da 02 01 00       	mov    $0x102da,%edx
   1145e:	b8 d8 81 01 00       	mov    $0x181d8,%eax
   11463:	68 05 ec 00 00       	push   $0xec05
   11468:	52                   	push   %edx
   11469:	6a 08                	push   $0x8
   1146b:	50                   	push   %eax
   1146c:	e8 3a 00 00 00       	call   114ab <gate_desc_set>
   11471:	83 c4 10             	add    $0x10,%esp
        KERNEL_SELECTOR_CS , (uint32_t)exception_handler_syscall ,
        GATE_P_PRESENT | GATE_DPL3 | GATE_TYPE_SYSCALL | SYSCALL_PARAM_COUNT );

    lgdt( (uint32_t)gdt_table , sizeof(gdt_table) );
   11474:	b8 c0 81 01 00       	mov    $0x181c0,%eax
   11479:	83 ec 08             	sub    $0x8,%esp
   1147c:	68 00 08 00 00       	push   $0x800
   11481:	50                   	push   %eax
   11482:	e8 b3 fe ff ff       	call   1133a <lgdt>
   11487:	83 c4 10             	add    $0x10,%esp
}
   1148a:	90                   	nop
   1148b:	c9                   	leave  
   1148c:	c3                   	ret    

0001148d <cpu_init>:

void cpu_init( void ){
   1148d:	55                   	push   %ebp
   1148e:	89 e5                	mov    %esp,%ebp
   11490:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&mutex);
   11493:	83 ec 0c             	sub    $0xc,%esp
   11496:	68 c0 89 01 00       	push   $0x189c0
   1149b:	e8 73 0c 00 00       	call   12113 <mutex_init>
   114a0:	83 c4 10             	add    $0x10,%esp
    init_gdt(); 
   114a3:	e8 5a ff ff ff       	call   11402 <init_gdt>
}
   114a8:	90                   	nop
   114a9:	c9                   	leave  
   114aa:	c3                   	ret    

000114ab <gate_desc_set>:

void gate_desc_set( gate_desc_t * desc , uint16_t selector , uint32_t offset , uint16_t attr ){
   114ab:	55                   	push   %ebp
   114ac:	89 e5                	mov    %esp,%ebp
   114ae:	83 ec 08             	sub    $0x8,%esp
   114b1:	8b 55 0c             	mov    0xc(%ebp),%edx
   114b4:	8b 45 14             	mov    0x14(%ebp),%eax
   114b7:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   114bb:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    desc ->offset15_0 = offset & 0xffff;
   114bf:	8b 45 10             	mov    0x10(%ebp),%eax
   114c2:	89 c2                	mov    %eax,%edx
   114c4:	8b 45 08             	mov    0x8(%ebp),%eax
   114c7:	66 89 10             	mov    %dx,(%eax)
    desc ->selector = selector;
   114ca:	8b 45 08             	mov    0x8(%ebp),%eax
   114cd:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   114d1:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc ->attr = attr;
   114d5:	8b 45 08             	mov    0x8(%ebp),%eax
   114d8:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   114dc:	66 89 50 04          	mov    %dx,0x4(%eax)
    desc ->offset31_16 = ( offset >> 16 ) & 0xffff;
   114e0:	8b 45 10             	mov    0x10(%ebp),%eax
   114e3:	c1 e8 10             	shr    $0x10,%eax
   114e6:	89 c2                	mov    %eax,%edx
   114e8:	8b 45 08             	mov    0x8(%ebp),%eax
   114eb:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   114ef:	90                   	nop
   114f0:	c9                   	leave  
   114f1:	c3                   	ret    

000114f2 <gdt_alloc_desc>:

int gdt_alloc_desc(){
   114f2:	55                   	push   %ebp
   114f3:	89 e5                	mov    %esp,%ebp
   114f5:	83 ec 18             	sub    $0x18,%esp
    mutex_lock(&mutex);
   114f8:	83 ec 0c             	sub    $0xc,%esp
   114fb:	68 c0 89 01 00       	push   $0x189c0
   11500:	e8 3c 0c 00 00       	call   12141 <mutex_lock>
   11505:	83 c4 10             	add    $0x10,%esp
    for( int i = 1 ; i < GDT_TABLE_SIZE ; i ++ ){
   11508:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   1150f:	eb 3f                	jmp    11550 <gdt_alloc_desc+0x5e>
        _segment_desc_t * desc = gdt_table + i;
   11511:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11514:	c1 e0 03             	shl    $0x3,%eax
   11517:	05 c0 81 01 00       	add    $0x181c0,%eax
   1151c:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if( desc->attr == 0 ){
   1151f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11522:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   11526:	66 85 c0             	test   %ax,%ax
   11529:	75 21                	jne    1154c <gdt_alloc_desc+0x5a>
            desc->attr = SEG_P_PRESENT;
   1152b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1152e:	66 c7 40 05 80 00    	movw   $0x80,0x5(%eax)
            mutex_unlock(&mutex);
   11534:	83 ec 0c             	sub    $0xc,%esp
   11537:	68 c0 89 01 00       	push   $0x189c0
   1153c:	e8 91 0c 00 00       	call   121d2 <mutex_unlock>
   11541:	83 c4 10             	add    $0x10,%esp
            return i * sizeof( _segment_desc_t ); 
   11544:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11547:	c1 e0 03             	shl    $0x3,%eax
   1154a:	eb 22                	jmp    1156e <gdt_alloc_desc+0x7c>
    for( int i = 1 ; i < GDT_TABLE_SIZE ; i ++ ){
   1154c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11550:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   11557:	7e b8                	jle    11511 <gdt_alloc_desc+0x1f>
        }
    }
    mutex_unlock(&mutex);
   11559:	83 ec 0c             	sub    $0xc,%esp
   1155c:	68 c0 89 01 00       	push   $0x189c0
   11561:	e8 6c 0c 00 00       	call   121d2 <mutex_unlock>
   11566:	83 c4 10             	add    $0x10,%esp
    return -1;
   11569:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1156e:	c9                   	leave  
   1156f:	c3                   	ret    

00011570 <swith_to_tss>:

void swith_to_tss( uint32_t tss_sel ){
   11570:	55                   	push   %ebp
   11571:	89 e5                	mov    %esp,%ebp
    far_jump( tss_sel , 0 );
   11573:	6a 00                	push   $0x0
   11575:	ff 75 08             	pushl  0x8(%ebp)
   11578:	e8 e5 fd ff ff       	call   11362 <far_jump>
   1157d:	83 c4 08             	add    $0x8,%esp
}
   11580:	90                   	nop
   11581:	c9                   	leave  
   11582:	c3                   	ret    

00011583 <gdt_free_sel>:

void gdt_free_sel(int sel){
   11583:	55                   	push   %ebp
   11584:	89 e5                	mov    %esp,%ebp
   11586:	83 ec 08             	sub    $0x8,%esp
    mutex_lock(&mutex); 
   11589:	83 ec 0c             	sub    $0xc,%esp
   1158c:	68 c0 89 01 00       	push   $0x189c0
   11591:	e8 ab 0b 00 00       	call   12141 <mutex_lock>
   11596:	83 c4 10             	add    $0x10,%esp
    gdt_table[ sel / sizeof(_segment_desc_t) ].attr = 0;
   11599:	8b 45 08             	mov    0x8(%ebp),%eax
   1159c:	c1 e8 03             	shr    $0x3,%eax
   1159f:	66 c7 04 c5 c5 81 01 	movw   $0x0,0x181c5(,%eax,8)
   115a6:	00 00 00 
    mutex_unlock(&mutex);
   115a9:	83 ec 0c             	sub    $0xc,%esp
   115ac:	68 c0 89 01 00       	push   $0x189c0
   115b1:	e8 1c 0c 00 00       	call   121d2 <mutex_unlock>
   115b6:	83 c4 10             	add    $0x10,%esp
   115b9:	90                   	nop
   115ba:	c9                   	leave  
   115bb:	c3                   	ret    

000115bc <cli>:
static inline void cli( void ){
   115bc:	55                   	push   %ebp
   115bd:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("cli");
   115bf:	fa                   	cli    
}
   115c0:	90                   	nop
   115c1:	5d                   	pop    %ebp
   115c2:	c3                   	ret    

000115c3 <sti>:
static inline void sti( void ){
   115c3:	55                   	push   %ebp
   115c4:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("sti");
   115c6:	fb                   	sti    
}
   115c7:	90                   	nop
   115c8:	5d                   	pop    %ebp
   115c9:	c3                   	ret    

000115ca <inb>:
static inline uint8_t inb( uint16_t port ){
   115ca:	55                   	push   %ebp
   115cb:	89 e5                	mov    %esp,%ebp
   115cd:	83 ec 14             	sub    $0x14,%esp
   115d0:	8b 45 08             	mov    0x8(%ebp),%eax
   115d3:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p] , %[v]" : [v]"=a"(rv) : [p]"d"(port));
   115d7:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   115db:	89 c2                	mov    %eax,%edx
   115dd:	ec                   	in     (%dx),%al
   115de:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   115e1:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   115e5:	c9                   	leave  
   115e6:	c3                   	ret    

000115e7 <outb>:
static inline void outb( uint16_t port , uint8_t data ){
   115e7:	55                   	push   %ebp
   115e8:	89 e5                	mov    %esp,%ebp
   115ea:	83 ec 08             	sub    $0x8,%esp
   115ed:	8b 55 08             	mov    0x8(%ebp),%edx
   115f0:	8b 45 0c             	mov    0xc(%ebp),%eax
   115f3:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   115f7:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v] , %[p]"::[p]"d"(port) , [v]"a"(data));
   115fa:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   115fe:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11602:	ee                   	out    %al,(%dx)
}
   11603:	90                   	nop
   11604:	c9                   	leave  
   11605:	c3                   	ret    

00011606 <lidt>:
static inline void lidt( uint32_t start , uint32_t size ){
   11606:	55                   	push   %ebp
   11607:	89 e5                	mov    %esp,%ebp
   11609:	83 ec 10             	sub    $0x10,%esp
    idt.start31_16 = start >> 16;
   1160c:	8b 45 08             	mov    0x8(%ebp),%eax
   1160f:	c1 e8 10             	shr    $0x10,%eax
   11612:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    idt.start15_0 = start & 0xFFFF;
   11616:	8b 45 08             	mov    0x8(%ebp),%eax
   11619:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    idt.limit = size - 1;
   1161d:	8b 45 0c             	mov    0xc(%ebp),%eax
   11620:	83 e8 01             	sub    $0x1,%eax
   11623:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__( "lidt %[g]"::[g]"m"(idt));
   11627:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   1162b:	90                   	nop
   1162c:	c9                   	leave  
   1162d:	c3                   	ret    

0001162e <hlt>:
static inline void hlt( void ){
   1162e:	55                   	push   %ebp
   1162f:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   11631:	f4                   	hlt    
}
   11632:	90                   	nop
   11633:	5d                   	pop    %ebp
   11634:	c3                   	ret    

00011635 <read_eflags>:
static inline uint32_t read_eflags( void ){
   11635:	55                   	push   %ebp
   11636:	89 e5                	mov    %esp,%ebp
   11638:	83 ec 10             	sub    $0x10,%esp
    __asm__ __volatile__( "pushf\n\tpop %%eax":"=a"(eflags));
   1163b:	9c                   	pushf  
   1163c:	58                   	pop    %eax
   1163d:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eflags;
   11640:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11643:	c9                   	leave  
   11644:	c3                   	ret    

00011645 <write_eflags>:
static inline void write_eflags( uint32_t eflags ){
   11645:	55                   	push   %ebp
   11646:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__( "push %%eax\n\tpopf"::"a"(eflags)); 
   11648:	8b 45 08             	mov    0x8(%ebp),%eax
   1164b:	50                   	push   %eax
   1164c:	9d                   	popf   
}
   1164d:	90                   	nop
   1164e:	5d                   	pop    %ebp
   1164f:	c3                   	ret    

00011650 <read_cr2>:

static inline uint32_t read_cr2( void ){
   11650:	55                   	push   %ebp
   11651:	89 e5                	mov    %esp,%ebp
   11653:	83 ec 10             	sub    $0x10,%esp
    uint32_t cr2;
    __asm__ __volatile__("mov %%cr2 , %[v]":[v]"=r"(cr2));
   11656:	0f 20 d0             	mov    %cr2,%eax
   11659:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return cr2;
   1165c:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1165f:	c9                   	leave  
   11660:	c3                   	ret    

00011661 <dump_core_regs>:
#include"comm/cpu_instr.h"
#include"cpu/irq.h"
#include"cpu/cpu.h"
#include"os_cfg.h"
#include"tools/log.h"
static void dump_core_regs( exception_frame_t * frame ){
   11661:	55                   	push   %ebp
   11662:	89 e5                	mov    %esp,%ebp
   11664:	57                   	push   %edi
   11665:	56                   	push   %esi
   11666:	53                   	push   %ebx
   11667:	83 ec 2c             	sub    $0x2c,%esp
    uint32_t ss , esp;
    if( frame->cs & 0x3 ){
   1166a:	8b 45 08             	mov    0x8(%ebp),%eax
   1166d:	8b 40 3c             	mov    0x3c(%eax),%eax
   11670:	83 e0 03             	and    $0x3,%eax
   11673:	85 c0                	test   %eax,%eax
   11675:	74 14                	je     1168b <dump_core_regs+0x2a>
        ss = frame -> ss3;
   11677:	8b 45 08             	mov    0x8(%ebp),%eax
   1167a:	8b 40 48             	mov    0x48(%eax),%eax
   1167d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        esp = frame -> esp3;
   11680:	8b 45 08             	mov    0x8(%ebp),%eax
   11683:	8b 40 44             	mov    0x44(%eax),%eax
   11686:	89 45 e0             	mov    %eax,-0x20(%ebp)
   11689:	eb 12                	jmp    1169d <dump_core_regs+0x3c>
    }
    else{
        ss = frame -> ds;
   1168b:	8b 45 08             	mov    0x8(%ebp),%eax
   1168e:	8b 40 0c             	mov    0xc(%eax),%eax
   11691:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        esp = frame -> esp;
   11694:	8b 45 08             	mov    0x8(%ebp),%eax
   11697:	8b 40 1c             	mov    0x1c(%eax),%eax
   1169a:	89 45 e0             	mov    %eax,-0x20(%ebp)
    }

    log_printf("IRQ: %d , error code : %d" , frame->num , frame->error_code);
   1169d:	8b 45 08             	mov    0x8(%ebp),%eax
   116a0:	8b 50 34             	mov    0x34(%eax),%edx
   116a3:	8b 45 08             	mov    0x8(%ebp),%eax
   116a6:	8b 40 30             	mov    0x30(%eax),%eax
   116a9:	83 ec 04             	sub    $0x4,%esp
   116ac:	52                   	push   %edx
   116ad:	50                   	push   %eax
   116ae:	68 64 32 01 00       	push   $0x13264
   116b3:	e8 27 17 00 00       	call   12ddf <log_printf>
   116b8:	83 c4 10             	add    $0x10,%esp
    log_printf("CS: %d\n\rDS: %d\n\rES: %d\n\rSS: %d\n\rFS: %d\n\rGS: %d" , 
   116bb:	8b 45 08             	mov    0x8(%ebp),%eax
   116be:	8b 30                	mov    (%eax),%esi
   116c0:	8b 45 08             	mov    0x8(%ebp),%eax
   116c3:	8b 58 04             	mov    0x4(%eax),%ebx
   116c6:	8b 45 08             	mov    0x8(%ebp),%eax
   116c9:	8b 48 08             	mov    0x8(%eax),%ecx
   116cc:	8b 45 08             	mov    0x8(%ebp),%eax
   116cf:	8b 50 0c             	mov    0xc(%eax),%edx
   116d2:	8b 45 08             	mov    0x8(%ebp),%eax
   116d5:	8b 40 3c             	mov    0x3c(%eax),%eax
   116d8:	83 ec 04             	sub    $0x4,%esp
   116db:	56                   	push   %esi
   116dc:	53                   	push   %ebx
   116dd:	ff 75 e4             	pushl  -0x1c(%ebp)
   116e0:	51                   	push   %ecx
   116e1:	52                   	push   %edx
   116e2:	50                   	push   %eax
   116e3:	68 80 32 01 00       	push   $0x13280
   116e8:	e8 f2 16 00 00       	call   12ddf <log_printf>
   116ed:	83 c4 20             	add    $0x20,%esp
    frame->cs , frame->ds , frame->es , ss , frame->fs , frame->gs );
    log_printf("EAX: %x\n\r"
   116f0:	8b 45 08             	mov    0x8(%ebp),%eax
   116f3:	8b 40 18             	mov    0x18(%eax),%eax
   116f6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
   116f9:	8b 45 08             	mov    0x8(%ebp),%eax
   116fc:	8b 78 14             	mov    0x14(%eax),%edi
   116ff:	8b 45 08             	mov    0x8(%ebp),%eax
   11702:	8b 70 10             	mov    0x10(%eax),%esi
   11705:	8b 45 08             	mov    0x8(%ebp),%eax
   11708:	8b 58 24             	mov    0x24(%eax),%ebx
   1170b:	8b 45 08             	mov    0x8(%ebp),%eax
   1170e:	8b 48 28             	mov    0x28(%eax),%ecx
   11711:	8b 45 08             	mov    0x8(%ebp),%eax
   11714:	8b 50 20             	mov    0x20(%eax),%edx
   11717:	8b 45 08             	mov    0x8(%ebp),%eax
   1171a:	8b 40 2c             	mov    0x2c(%eax),%eax
   1171d:	83 ec 0c             	sub    $0xc,%esp
   11720:	ff 75 e0             	pushl  -0x20(%ebp)
   11723:	ff 75 d4             	pushl  -0x2c(%ebp)
   11726:	57                   	push   %edi
   11727:	56                   	push   %esi
   11728:	53                   	push   %ebx
   11729:	51                   	push   %ecx
   1172a:	52                   	push   %edx
   1172b:	50                   	push   %eax
   1172c:	68 b0 32 01 00       	push   $0x132b0
   11731:	e8 a9 16 00 00       	call   12ddf <log_printf>
   11736:	83 c4 30             	add    $0x30,%esp
    "EDI: %x\n\r"
    "ESI: %x\n\r"
    "EBP: %x\n\r"
    "ESP: %x" , frame->eax , frame->ebx , frame->ecx , frame->edx , frame->edi , frame->esi,
    frame->ebp , esp );
    log_printf("EIP: %x\n\rELFAGS: %x", frame ->eip , frame -> eflags );
   11739:	8b 45 08             	mov    0x8(%ebp),%eax
   1173c:	8b 50 40             	mov    0x40(%eax),%edx
   1173f:	8b 45 08             	mov    0x8(%ebp),%eax
   11742:	8b 40 38             	mov    0x38(%eax),%eax
   11745:	83 ec 04             	sub    $0x4,%esp
   11748:	52                   	push   %edx
   11749:	50                   	push   %eax
   1174a:	68 f7 32 01 00       	push   $0x132f7
   1174f:	e8 8b 16 00 00       	call   12ddf <log_printf>
   11754:	83 c4 10             	add    $0x10,%esp
}
   11757:	90                   	nop
   11758:	8d 65 f4             	lea    -0xc(%ebp),%esp
   1175b:	5b                   	pop    %ebx
   1175c:	5e                   	pop    %esi
   1175d:	5f                   	pop    %edi
   1175e:	5d                   	pop    %ebp
   1175f:	c3                   	ret    

00011760 <do_default_handler>:

static void do_default_handler( exception_frame_t * frame ,  char * message ){
   11760:	55                   	push   %ebp
   11761:	89 e5                	mov    %esp,%ebp
   11763:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------");
   11766:	83 ec 0c             	sub    $0xc,%esp
   11769:	68 0b 33 01 00       	push   $0x1330b
   1176e:	e8 6c 16 00 00       	call   12ddf <log_printf>
   11773:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend : %s" , message );
   11776:	83 ec 08             	sub    $0x8,%esp
   11779:	ff 75 0c             	pushl  0xc(%ebp)
   1177c:	68 20 33 01 00       	push   $0x13320
   11781:	e8 59 16 00 00       	call   12ddf <log_printf>
   11786:	83 c4 10             	add    $0x10,%esp
    dump_core_regs( frame );
   11789:	83 ec 0c             	sub    $0xc,%esp
   1178c:	ff 75 08             	pushl  0x8(%ebp)
   1178f:	e8 cd fe ff ff       	call   11661 <dump_core_regs>
   11794:	83 c4 10             	add    $0x10,%esp
}
   11797:	90                   	nop
   11798:	c9                   	leave  
   11799:	c3                   	ret    

0001179a <do_handler_unknown>:
//unknown error
void do_handler_unknown( exception_frame_t * frame ){
   1179a:	55                   	push   %ebp
   1179b:	89 e5                	mov    %esp,%ebp
   1179d:	83 ec 08             	sub    $0x8,%esp
    do_default_handler( frame  , "unknown exception");
   117a0:	83 ec 08             	sub    $0x8,%esp
   117a3:	68 3b 33 01 00       	push   $0x1333b
   117a8:	ff 75 08             	pushl  0x8(%ebp)
   117ab:	e8 b0 ff ff ff       	call   11760 <do_default_handler>
   117b0:	83 c4 10             	add    $0x10,%esp
}
   117b3:	90                   	nop
   117b4:	c9                   	leave  
   117b5:	c3                   	ret    

000117b6 <do_handler_divider>:
//#divide error #DE
void do_handler_divider( exception_frame_t * frame ){
   117b6:	55                   	push   %ebp
   117b7:	89 e5                	mov    %esp,%ebp
   117b9:	83 ec 08             	sub    $0x8,%esp
    do_default_handler( frame  , "Divder exception");
   117bc:	83 ec 08             	sub    $0x8,%esp
   117bf:	68 4d 33 01 00       	push   $0x1334d
   117c4:	ff 75 08             	pushl  0x8(%ebp)
   117c7:	e8 94 ff ff ff       	call   11760 <do_default_handler>
   117cc:	83 c4 10             	add    $0x10,%esp
}
   117cf:	90                   	nop
   117d0:	c9                   	leave  
   117d1:	c3                   	ret    

000117d2 <do_handler_Debug>:
void do_handler_Debug( exception_frame_t * frame ){
   117d2:	55                   	push   %ebp
   117d3:	89 e5                	mov    %esp,%ebp
   117d5:	83 ec 08             	sub    $0x8,%esp
    do_default_handler( frame  , "Debug exception");
   117d8:	83 ec 08             	sub    $0x8,%esp
   117db:	68 5e 33 01 00       	push   $0x1335e
   117e0:	ff 75 08             	pushl  0x8(%ebp)
   117e3:	e8 78 ff ff ff       	call   11760 <do_default_handler>
   117e8:	83 c4 10             	add    $0x10,%esp
}
   117eb:	90                   	nop
   117ec:	c9                   	leave  
   117ed:	c3                   	ret    

000117ee <do_handler_NMI>:
void do_handler_NMI( exception_frame_t * frame ){
   117ee:	55                   	push   %ebp
   117ef:	89 e5                	mov    %esp,%ebp
   117f1:	83 ec 08             	sub    $0x8,%esp
    do_default_handler( frame  , "NMI exception");
   117f4:	83 ec 08             	sub    $0x8,%esp
   117f7:	68 6e 33 01 00       	push   $0x1336e
   117fc:	ff 75 08             	pushl  0x8(%ebp)
   117ff:	e8 5c ff ff ff       	call   11760 <do_default_handler>
   11804:	83 c4 10             	add    $0x10,%esp
}
   11807:	90                   	nop
   11808:	c9                   	leave  
   11809:	c3                   	ret    

0001180a <do_handler_breakpoint>:
void do_handler_breakpoint( exception_frame_t * frame ){
   1180a:	55                   	push   %ebp
   1180b:	89 e5                	mov    %esp,%ebp
   1180d:	83 ec 08             	sub    $0x8,%esp
    do_default_handler( frame  , "breakpoint exception");
   11810:	83 ec 08             	sub    $0x8,%esp
   11813:	68 7c 33 01 00       	push   $0x1337c
   11818:	ff 75 08             	pushl  0x8(%ebp)
   1181b:	e8 40 ff ff ff       	call   11760 <do_default_handler>
   11820:	83 c4 10             	add    $0x10,%esp
}
   11823:	90                   	nop
   11824:	c9                   	leave  
   11825:	c3                   	ret    

00011826 <do_handler_overflow>:
void do_handler_overflow( exception_frame_t * frame ){
   11826:	55                   	push   %ebp
   11827:	89 e5                	mov    %esp,%ebp
   11829:	83 ec 08             	sub    $0x8,%esp
    do_default_handler( frame  , "overflow exception");
   1182c:	83 ec 08             	sub    $0x8,%esp
   1182f:	68 91 33 01 00       	push   $0x13391
   11834:	ff 75 08             	pushl  0x8(%ebp)
   11837:	e8 24 ff ff ff       	call   11760 <do_default_handler>
   1183c:	83 c4 10             	add    $0x10,%esp
}
   1183f:	90                   	nop
   11840:	c9                   	leave  
   11841:	c3                   	ret    

00011842 <do_handler_bound_range_exceeded>:
void do_handler_bound_range_exceeded( exception_frame_t * frame ){
   11842:	55                   	push   %ebp
   11843:	89 e5                	mov    %esp,%ebp
   11845:	83 ec 08             	sub    $0x8,%esp
    do_default_handler( frame  , "bound range exceeded exception");
   11848:	83 ec 08             	sub    $0x8,%esp
   1184b:	68 a4 33 01 00       	push   $0x133a4
   11850:	ff 75 08             	pushl  0x8(%ebp)
   11853:	e8 08 ff ff ff       	call   11760 <do_default_handler>
   11858:	83 c4 10             	add    $0x10,%esp
}
   1185b:	90                   	nop
   1185c:	c9                   	leave  
   1185d:	c3                   	ret    

0001185e <do_handler_invalid_opcode>:
void do_handler_invalid_opcode( exception_frame_t * frame ){
   1185e:	55                   	push   %ebp
   1185f:	89 e5                	mov    %esp,%ebp
   11861:	83 ec 08             	sub    $0x8,%esp
    do_default_handler( frame  , "invalid opcode exception");
   11864:	83 ec 08             	sub    $0x8,%esp
   11867:	68 c3 33 01 00       	push   $0x133c3
   1186c:	ff 75 08             	pushl  0x8(%ebp)
   1186f:	e8 ec fe ff ff       	call   11760 <do_default_handler>
   11874:	83 c4 10             	add    $0x10,%esp
}
   11877:	90                   	nop
   11878:	c9                   	leave  
   11879:	c3                   	ret    

0001187a <do_handler_device_not_available>:
void do_handler_device_not_available( exception_frame_t * frame ){
   1187a:	55                   	push   %ebp
   1187b:	89 e5                	mov    %esp,%ebp
   1187d:	83 ec 08             	sub    $0x8,%esp
    do_default_handler( frame  , "device not available exception");
   11880:	83 ec 08             	sub    $0x8,%esp
   11883:	68 dc 33 01 00       	push   $0x133dc
   11888:	ff 75 08             	pushl  0x8(%ebp)
   1188b:	e8 d0 fe ff ff       	call   11760 <do_default_handler>
   11890:	83 c4 10             	add    $0x10,%esp
}
   11893:	90                   	nop
   11894:	c9                   	leave  
   11895:	c3                   	ret    

00011896 <do_handler_double_fault>:
void do_handler_double_fault( exception_frame_t * frame ){
   11896:	55                   	push   %ebp
   11897:	89 e5                	mov    %esp,%ebp
   11899:	83 ec 08             	sub    $0x8,%esp
    do_default_handler( frame  , "double fault exception");
   1189c:	83 ec 08             	sub    $0x8,%esp
   1189f:	68 fb 33 01 00       	push   $0x133fb
   118a4:	ff 75 08             	pushl  0x8(%ebp)
   118a7:	e8 b4 fe ff ff       	call   11760 <do_default_handler>
   118ac:	83 c4 10             	add    $0x10,%esp
}
   118af:	90                   	nop
   118b0:	c9                   	leave  
   118b1:	c3                   	ret    

000118b2 <do_handler_invalid_tss>:
void do_handler_invalid_tss( exception_frame_t * frame ){
   118b2:	55                   	push   %ebp
   118b3:	89 e5                	mov    %esp,%ebp
   118b5:	83 ec 08             	sub    $0x8,%esp
    do_default_handler( frame  , "invalid tss exception");
   118b8:	83 ec 08             	sub    $0x8,%esp
   118bb:	68 12 34 01 00       	push   $0x13412
   118c0:	ff 75 08             	pushl  0x8(%ebp)
   118c3:	e8 98 fe ff ff       	call   11760 <do_default_handler>
   118c8:	83 c4 10             	add    $0x10,%esp
}
   118cb:	90                   	nop
   118cc:	c9                   	leave  
   118cd:	c3                   	ret    

000118ce <do_handler_segment_not_present>:
void do_handler_segment_not_present( exception_frame_t * frame ){
   118ce:	55                   	push   %ebp
   118cf:	89 e5                	mov    %esp,%ebp
   118d1:	83 ec 08             	sub    $0x8,%esp
    do_default_handler( frame  , "segment not present");
   118d4:	83 ec 08             	sub    $0x8,%esp
   118d7:	68 28 34 01 00       	push   $0x13428
   118dc:	ff 75 08             	pushl  0x8(%ebp)
   118df:	e8 7c fe ff ff       	call   11760 <do_default_handler>
   118e4:	83 c4 10             	add    $0x10,%esp
}
   118e7:	90                   	nop
   118e8:	c9                   	leave  
   118e9:	c3                   	ret    

000118ea <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault( exception_frame_t * frame ){
   118ea:	55                   	push   %ebp
   118eb:	89 e5                	mov    %esp,%ebp
   118ed:	83 ec 08             	sub    $0x8,%esp
    do_default_handler( frame  , "stack segment fault exception");
   118f0:	83 ec 08             	sub    $0x8,%esp
   118f3:	68 3c 34 01 00       	push   $0x1343c
   118f8:	ff 75 08             	pushl  0x8(%ebp)
   118fb:	e8 60 fe ff ff       	call   11760 <do_default_handler>
   11900:	83 c4 10             	add    $0x10,%esp
}
   11903:	90                   	nop
   11904:	c9                   	leave  
   11905:	c3                   	ret    

00011906 <do_handler_general_protection>:
void do_handler_general_protection( exception_frame_t * frame ){
   11906:	55                   	push   %ebp
   11907:	89 e5                	mov    %esp,%ebp
   11909:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------");
   1190c:	83 ec 0c             	sub    $0xc,%esp
   1190f:	68 5a 34 01 00       	push   $0x1345a
   11914:	e8 c6 14 00 00       	call   12ddf <log_printf>
   11919:	83 c4 10             	add    $0x10,%esp
    log_printf("GP fault.");
   1191c:	83 ec 0c             	sub    $0xc,%esp
   1191f:	68 63 34 01 00       	push   $0x13463
   11924:	e8 b6 14 00 00       	call   12ddf <log_printf>
   11929:	83 c4 10             	add    $0x10,%esp

    if( frame -> error_code & ERR_EXT ){
   1192c:	8b 45 08             	mov    0x8(%ebp),%eax
   1192f:	8b 40 34             	mov    0x34(%eax),%eax
   11932:	83 e0 01             	and    $0x1,%eax
   11935:	85 c0                	test   %eax,%eax
   11937:	74 12                	je     1194b <do_handler_general_protection+0x45>
        log_printf("exception occurred during delivery of an event external to the program");
   11939:	83 ec 0c             	sub    $0xc,%esp
   1193c:	68 70 34 01 00       	push   $0x13470
   11941:	e8 99 14 00 00       	call   12ddf <log_printf>
   11946:	83 c4 10             	add    $0x10,%esp
   11949:	eb 10                	jmp    1195b <do_handler_general_protection+0x55>
    }
    else{
        log_printf("exception occurred during delivery of a software interrupt ");
   1194b:	83 ec 0c             	sub    $0xc,%esp
   1194e:	68 b8 34 01 00       	push   $0x134b8
   11953:	e8 87 14 00 00       	call   12ddf <log_printf>
   11958:	83 c4 10             	add    $0x10,%esp
    }

    if( frame->error_code & ERR_IDT ){
   1195b:	8b 45 08             	mov    0x8(%ebp),%eax
   1195e:	8b 40 34             	mov    0x34(%eax),%eax
   11961:	83 e0 02             	and    $0x2,%eax
   11964:	85 c0                	test   %eax,%eax
   11966:	74 12                	je     1197a <do_handler_general_protection+0x74>
        log_printf(" the index portion of the error code refers to a gate descriptor in the IDT");
   11968:	83 ec 0c             	sub    $0xc,%esp
   1196b:	68 f4 34 01 00       	push   $0x134f4
   11970:	e8 6a 14 00 00       	call   12ddf <log_printf>
   11975:	83 c4 10             	add    $0x10,%esp
   11978:	eb 10                	jmp    1198a <do_handler_general_protection+0x84>
    }
    else{
        log_printf(" the index refers to a descriptor in the GDT.");
   1197a:	83 ec 0c             	sub    $0xc,%esp
   1197d:	68 40 35 01 00       	push   $0x13540
   11982:	e8 58 14 00 00       	call   12ddf <log_printf>
   11987:	83 c4 10             	add    $0x10,%esp
    }

    log_printf("selector index: %d" , frame->error_code & 0xfff8 );
   1198a:	8b 45 08             	mov    0x8(%ebp),%eax
   1198d:	8b 40 34             	mov    0x34(%eax),%eax
   11990:	25 f8 ff 00 00       	and    $0xfff8,%eax
   11995:	83 ec 08             	sub    $0x8,%esp
   11998:	50                   	push   %eax
   11999:	68 6e 35 01 00       	push   $0x1356e
   1199e:	e8 3c 14 00 00       	call   12ddf <log_printf>
   119a3:	83 c4 10             	add    $0x10,%esp
    dump_core_regs(frame);
   119a6:	83 ec 0c             	sub    $0xc,%esp
   119a9:	ff 75 08             	pushl  0x8(%ebp)
   119ac:	e8 b0 fc ff ff       	call   11661 <dump_core_regs>
   119b1:	83 c4 10             	add    $0x10,%esp
    while(1){
        hlt();
   119b4:	e8 75 fc ff ff       	call   1162e <hlt>
   119b9:	eb f9                	jmp    119b4 <do_handler_general_protection+0xae>

000119bb <do_handler_page_fault>:
    }
}
void do_handler_page_fault( exception_frame_t * frame ){
   119bb:	55                   	push   %ebp
   119bc:	89 e5                	mov    %esp,%ebp
   119be:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------");
   119c1:	83 ec 0c             	sub    $0xc,%esp
   119c4:	68 5a 34 01 00       	push   $0x1345a
   119c9:	e8 11 14 00 00       	call   12ddf <log_printf>
   119ce:	83 c4 10             	add    $0x10,%esp
    log_printf("Page fault.");
   119d1:	83 ec 0c             	sub    $0xc,%esp
   119d4:	68 81 35 01 00       	push   $0x13581
   119d9:	e8 01 14 00 00       	call   12ddf <log_printf>
   119de:	83 c4 10             	add    $0x10,%esp

    if( frame -> error_code & ERR_PAGE_P ){
   119e1:	8b 45 08             	mov    0x8(%ebp),%eax
   119e4:	8b 40 34             	mov    0x34(%eax),%eax
   119e7:	83 e0 01             	and    $0x1,%eax
   119ea:	85 c0                	test   %eax,%eax
   119ec:	74 12                	je     11a00 <do_handler_page_fault+0x45>
        log_printf("The fault was caused by a page-level protection violation");
   119ee:	83 ec 0c             	sub    $0xc,%esp
   119f1:	68 90 35 01 00       	push   $0x13590
   119f6:	e8 e4 13 00 00       	call   12ddf <log_printf>
   119fb:	83 c4 10             	add    $0x10,%esp
   119fe:	eb 16                	jmp    11a16 <do_handler_page_fault+0x5b>
    }
    else{
        log_printf("The fault was caused by a non-present page:%x" , read_cr2() );
   11a00:	e8 4b fc ff ff       	call   11650 <read_cr2>
   11a05:	83 ec 08             	sub    $0x8,%esp
   11a08:	50                   	push   %eax
   11a09:	68 cc 35 01 00       	push   $0x135cc
   11a0e:	e8 cc 13 00 00       	call   12ddf <log_printf>
   11a13:	83 c4 10             	add    $0x10,%esp
    }

    if( frame -> error_code & ERR_PAGE_WR ){
   11a16:	8b 45 08             	mov    0x8(%ebp),%eax
   11a19:	8b 40 34             	mov    0x34(%eax),%eax
   11a1c:	83 e0 02             	and    $0x2,%eax
   11a1f:	85 c0                	test   %eax,%eax
   11a21:	74 18                	je     11a3b <do_handler_page_fault+0x80>
        log_printf("The access causing the fault was a write:%x" , read_cr2());
   11a23:	e8 28 fc ff ff       	call   11650 <read_cr2>
   11a28:	83 ec 08             	sub    $0x8,%esp
   11a2b:	50                   	push   %eax
   11a2c:	68 fc 35 01 00       	push   $0x135fc
   11a31:	e8 a9 13 00 00       	call   12ddf <log_printf>
   11a36:	83 c4 10             	add    $0x10,%esp
   11a39:	eb 16                	jmp    11a51 <do_handler_page_fault+0x96>
    }
    else{
        log_printf("The access causing the fault was a read:%x" , read_cr2() );
   11a3b:	e8 10 fc ff ff       	call   11650 <read_cr2>
   11a40:	83 ec 08             	sub    $0x8,%esp
   11a43:	50                   	push   %eax
   11a44:	68 28 36 01 00       	push   $0x13628
   11a49:	e8 91 13 00 00       	call   12ddf <log_printf>
   11a4e:	83 c4 10             	add    $0x10,%esp
    }

    if( frame -> error_code & ERR_PAGE_US ){
   11a51:	8b 45 08             	mov    0x8(%ebp),%eax
   11a54:	8b 40 34             	mov    0x34(%eax),%eax
   11a57:	83 e0 02             	and    $0x2,%eax
   11a5a:	85 c0                	test   %eax,%eax
   11a5c:	74 18                	je     11a76 <do_handler_page_fault+0xbb>
        log_printf("A user-mode access caused the fault.:%x" , read_cr2());
   11a5e:	e8 ed fb ff ff       	call   11650 <read_cr2>
   11a63:	83 ec 08             	sub    $0x8,%esp
   11a66:	50                   	push   %eax
   11a67:	68 54 36 01 00       	push   $0x13654
   11a6c:	e8 6e 13 00 00       	call   12ddf <log_printf>
   11a71:	83 c4 10             	add    $0x10,%esp
   11a74:	eb 16                	jmp    11a8c <do_handler_page_fault+0xd1>
    }
    else{
        log_printf("A supervisor-mode access caused the fault.:%x" , read_cr2());
   11a76:	e8 d5 fb ff ff       	call   11650 <read_cr2>
   11a7b:	83 ec 08             	sub    $0x8,%esp
   11a7e:	50                   	push   %eax
   11a7f:	68 7c 36 01 00       	push   $0x1367c
   11a84:	e8 56 13 00 00       	call   12ddf <log_printf>
   11a89:	83 c4 10             	add    $0x10,%esp
    }

    dump_core_regs(frame);
   11a8c:	83 ec 0c             	sub    $0xc,%esp
   11a8f:	ff 75 08             	pushl  0x8(%ebp)
   11a92:	e8 ca fb ff ff       	call   11661 <dump_core_regs>
   11a97:	83 c4 10             	add    $0x10,%esp
    while(1){
        hlt();
   11a9a:	e8 8f fb ff ff       	call   1162e <hlt>
   11a9f:	eb f9                	jmp    11a9a <do_handler_page_fault+0xdf>

00011aa1 <do_handler_fpu_error>:
    }
}
void do_handler_fpu_error( exception_frame_t * frame ){
   11aa1:	55                   	push   %ebp
   11aa2:	89 e5                	mov    %esp,%ebp
   11aa4:	83 ec 08             	sub    $0x8,%esp
    do_default_handler( frame  , "fpu error exception");
   11aa7:	83 ec 08             	sub    $0x8,%esp
   11aaa:	68 aa 36 01 00       	push   $0x136aa
   11aaf:	ff 75 08             	pushl  0x8(%ebp)
   11ab2:	e8 a9 fc ff ff       	call   11760 <do_default_handler>
   11ab7:	83 c4 10             	add    $0x10,%esp
}
   11aba:	90                   	nop
   11abb:	c9                   	leave  
   11abc:	c3                   	ret    

00011abd <do_handler_alignment_check>:
void do_handler_alignment_check( exception_frame_t * frame ){
   11abd:	55                   	push   %ebp
   11abe:	89 e5                	mov    %esp,%ebp
   11ac0:	83 ec 08             	sub    $0x8,%esp
    do_default_handler( frame  , "alignment check exception");
   11ac3:	83 ec 08             	sub    $0x8,%esp
   11ac6:	68 be 36 01 00       	push   $0x136be
   11acb:	ff 75 08             	pushl  0x8(%ebp)
   11ace:	e8 8d fc ff ff       	call   11760 <do_default_handler>
   11ad3:	83 c4 10             	add    $0x10,%esp
}
   11ad6:	90                   	nop
   11ad7:	c9                   	leave  
   11ad8:	c3                   	ret    

00011ad9 <do_handler_machine_check>:
void do_handler_machine_check( exception_frame_t * frame ){
   11ad9:	55                   	push   %ebp
   11ada:	89 e5                	mov    %esp,%ebp
   11adc:	83 ec 08             	sub    $0x8,%esp
    do_default_handler( frame  , "machine check exception");
   11adf:	83 ec 08             	sub    $0x8,%esp
   11ae2:	68 d8 36 01 00       	push   $0x136d8
   11ae7:	ff 75 08             	pushl  0x8(%ebp)
   11aea:	e8 71 fc ff ff       	call   11760 <do_default_handler>
   11aef:	83 c4 10             	add    $0x10,%esp
}
   11af2:	90                   	nop
   11af3:	c9                   	leave  
   11af4:	c3                   	ret    

00011af5 <do_handler_simd_exception>:
void do_handler_simd_exception( exception_frame_t * frame ){
   11af5:	55                   	push   %ebp
   11af6:	89 e5                	mov    %esp,%ebp
   11af8:	83 ec 08             	sub    $0x8,%esp
    do_default_handler( frame  , "simd exception exception");
   11afb:	83 ec 08             	sub    $0x8,%esp
   11afe:	68 f0 36 01 00       	push   $0x136f0
   11b03:	ff 75 08             	pushl  0x8(%ebp)
   11b06:	e8 55 fc ff ff       	call   11760 <do_default_handler>
   11b0b:	83 c4 10             	add    $0x10,%esp
}
   11b0e:	90                   	nop
   11b0f:	c9                   	leave  
   11b10:	c3                   	ret    

00011b11 <do_handler_virtualization_exception>:
void do_handler_virtualization_exception( exception_frame_t * frame ){
   11b11:	55                   	push   %ebp
   11b12:	89 e5                	mov    %esp,%ebp
   11b14:	83 ec 08             	sub    $0x8,%esp
    do_default_handler( frame  , "virtualization exception");
   11b17:	83 ec 08             	sub    $0x8,%esp
   11b1a:	68 09 37 01 00       	push   $0x13709
   11b1f:	ff 75 08             	pushl  0x8(%ebp)
   11b22:	e8 39 fc ff ff       	call   11760 <do_default_handler>
   11b27:	83 c4 10             	add    $0x10,%esp
}
   11b2a:	90                   	nop
   11b2b:	c9                   	leave  
   11b2c:	c3                   	ret    

00011b2d <do_handler_control_protection_exception>:
void do_handler_control_protection_exception( exception_frame_t * frame ){
   11b2d:	55                   	push   %ebp
   11b2e:	89 e5                	mov    %esp,%ebp
   11b30:	83 ec 08             	sub    $0x8,%esp
    do_default_handler( frame  , "control protection exception");
   11b33:	83 ec 08             	sub    $0x8,%esp
   11b36:	68 22 37 01 00       	push   $0x13722
   11b3b:	ff 75 08             	pushl  0x8(%ebp)
   11b3e:	e8 1d fc ff ff       	call   11760 <do_default_handler>
   11b43:	83 c4 10             	add    $0x10,%esp
}
   11b46:	90                   	nop
   11b47:	c9                   	leave  
   11b48:	c3                   	ret    

00011b49 <init_pic>:

static void init_pic ( void ){
   11b49:	55                   	push   %ebp
   11b4a:	89 e5                	mov    %esp,%ebp
    outb( PIC0_ICW1 , PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4 );
   11b4c:	6a 11                	push   $0x11
   11b4e:	6a 20                	push   $0x20
   11b50:	e8 92 fa ff ff       	call   115e7 <outb>
   11b55:	83 c4 08             	add    $0x8,%esp
    outb( PIC0_ICW2 , IRQ_PIC_START );   
   11b58:	6a 20                	push   $0x20
   11b5a:	6a 21                	push   $0x21
   11b5c:	e8 86 fa ff ff       	call   115e7 <outb>
   11b61:	83 c4 08             	add    $0x8,%esp
    outb( PIC0_ICW3 , 1 << 2 );
   11b64:	6a 04                	push   $0x4
   11b66:	6a 21                	push   $0x21
   11b68:	e8 7a fa ff ff       	call   115e7 <outb>
   11b6d:	83 c4 08             	add    $0x8,%esp
    outb( PIC0_ICW4 , PIC_ICW4_8086 );
   11b70:	6a 01                	push   $0x1
   11b72:	6a 21                	push   $0x21
   11b74:	e8 6e fa ff ff       	call   115e7 <outb>
   11b79:	83 c4 08             	add    $0x8,%esp

    outb( PIC1_ICW1 , PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4 );
   11b7c:	6a 11                	push   $0x11
   11b7e:	68 a0 00 00 00       	push   $0xa0
   11b83:	e8 5f fa ff ff       	call   115e7 <outb>
   11b88:	83 c4 08             	add    $0x8,%esp
    outb( PIC1_ICW2 , IRQ_PIC_START + 8 ); 
   11b8b:	6a 28                	push   $0x28
   11b8d:	68 a1 00 00 00       	push   $0xa1
   11b92:	e8 50 fa ff ff       	call   115e7 <outb>
   11b97:	83 c4 08             	add    $0x8,%esp
    outb( PIC1_ICW3 , 2 );
   11b9a:	6a 02                	push   $0x2
   11b9c:	68 a1 00 00 00       	push   $0xa1
   11ba1:	e8 41 fa ff ff       	call   115e7 <outb>
   11ba6:	83 c4 08             	add    $0x8,%esp
    outb( PIC1_ICW4 , PIC_ICW4_8086 ); 
   11ba9:	6a 01                	push   $0x1
   11bab:	68 a1 00 00 00       	push   $0xa1
   11bb0:	e8 32 fa ff ff       	call   115e7 <outb>
   11bb5:	83 c4 08             	add    $0x8,%esp

    outb( PIC0_IMR ,  0xff & ~( 1 << 2 ));
   11bb8:	68 fb 00 00 00       	push   $0xfb
   11bbd:	6a 21                	push   $0x21
   11bbf:	e8 23 fa ff ff       	call   115e7 <outb>
   11bc4:	83 c4 08             	add    $0x8,%esp
    outb( PIC1_IMR , 0xff );
   11bc7:	68 ff 00 00 00       	push   $0xff
   11bcc:	68 a1 00 00 00       	push   $0xa1
   11bd1:	e8 11 fa ff ff       	call   115e7 <outb>
   11bd6:	83 c4 08             	add    $0x8,%esp
}
   11bd9:	90                   	nop
   11bda:	c9                   	leave  
   11bdb:	c3                   	ret    

00011bdc <irq_init>:


static gate_desc_t idt_table[IDT_TABLE_NR];

void irq_init( void ){
   11bdc:	55                   	push   %ebp
   11bdd:	89 e5                	mov    %esp,%ebp
   11bdf:	83 ec 18             	sub    $0x18,%esp
    for( int i = 0 ; i < IDT_TABLE_NR ; i ++ ){
   11be2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11be9:	eb 25                	jmp    11c10 <irq_init+0x34>
        gate_desc_set( idt_table + i , KERNEL_SELECTOR_CS , (uint32_t)exception_handler_unknown
   11beb:	ba 2b 00 01 00       	mov    $0x1002b,%edx
   11bf0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11bf3:	c1 e0 03             	shl    $0x3,%eax
   11bf6:	05 e0 89 01 00       	add    $0x189e0,%eax
   11bfb:	68 00 8e 00 00       	push   $0x8e00
   11c00:	52                   	push   %edx
   11c01:	6a 08                	push   $0x8
   11c03:	50                   	push   %eax
   11c04:	e8 a2 f8 ff ff       	call   114ab <gate_desc_set>
   11c09:	83 c4 10             	add    $0x10,%esp
    for( int i = 0 ; i < IDT_TABLE_NR ; i ++ ){
   11c0c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11c10:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   11c14:	7e d5                	jle    11beb <irq_init+0xf>
         , GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_INT ); 
    }
    irq_install( IRQ0_DE ,  (irq_handler_t)exception_handler_divider );
   11c16:	83 ec 08             	sub    $0x8,%esp
   11c19:	68 4a 00 01 00       	push   $0x1004a
   11c1e:	6a 00                	push   $0x0
   11c20:	e8 77 01 00 00       	call   11d9c <irq_install>
   11c25:	83 c4 10             	add    $0x10,%esp
    irq_install( IRQ1_DB ,  (irq_handler_t)exception_handler_Debug );
   11c28:	83 ec 08             	sub    $0x8,%esp
   11c2b:	68 69 00 01 00       	push   $0x10069
   11c30:	6a 01                	push   $0x1
   11c32:	e8 65 01 00 00       	call   11d9c <irq_install>
   11c37:	83 c4 10             	add    $0x10,%esp
    irq_install( IRQ2_NMI ,  (irq_handler_t)exception_handler_NMI );
   11c3a:	83 ec 08             	sub    $0x8,%esp
   11c3d:	68 88 00 01 00       	push   $0x10088
   11c42:	6a 02                	push   $0x2
   11c44:	e8 53 01 00 00       	call   11d9c <irq_install>
   11c49:	83 c4 10             	add    $0x10,%esp
    irq_install( IRQ3_BP ,  (irq_handler_t)exception_handler_breakpoint );
   11c4c:	83 ec 08             	sub    $0x8,%esp
   11c4f:	68 a7 00 01 00       	push   $0x100a7
   11c54:	6a 03                	push   $0x3
   11c56:	e8 41 01 00 00       	call   11d9c <irq_install>
   11c5b:	83 c4 10             	add    $0x10,%esp
    irq_install( IRQ4_OF ,  (irq_handler_t)exception_handler_overflow );
   11c5e:	83 ec 08             	sub    $0x8,%esp
   11c61:	68 c6 00 01 00       	push   $0x100c6
   11c66:	6a 04                	push   $0x4
   11c68:	e8 2f 01 00 00       	call   11d9c <irq_install>
   11c6d:	83 c4 10             	add    $0x10,%esp
    irq_install( IRQ5_BR ,  (irq_handler_t)exception_handler_bound_range_exceeded );
   11c70:	83 ec 08             	sub    $0x8,%esp
   11c73:	68 e5 00 01 00       	push   $0x100e5
   11c78:	6a 05                	push   $0x5
   11c7a:	e8 1d 01 00 00       	call   11d9c <irq_install>
   11c7f:	83 c4 10             	add    $0x10,%esp
    irq_install( IRQ6_UD ,  (irq_handler_t)exception_handler_invalid_opcode );
   11c82:	83 ec 08             	sub    $0x8,%esp
   11c85:	68 04 01 01 00       	push   $0x10104
   11c8a:	6a 06                	push   $0x6
   11c8c:	e8 0b 01 00 00       	call   11d9c <irq_install>
   11c91:	83 c4 10             	add    $0x10,%esp
    irq_install( IRQ7_NM ,  (irq_handler_t)exception_handler_device_not_available );
   11c94:	83 ec 08             	sub    $0x8,%esp
   11c97:	68 23 01 01 00       	push   $0x10123
   11c9c:	6a 07                	push   $0x7
   11c9e:	e8 f9 00 00 00       	call   11d9c <irq_install>
   11ca3:	83 c4 10             	add    $0x10,%esp
    irq_install( IRQ8_DF ,  (irq_handler_t)exception_handler_double_fault );
   11ca6:	83 ec 08             	sub    $0x8,%esp
   11ca9:	68 42 01 01 00       	push   $0x10142
   11cae:	6a 08                	push   $0x8
   11cb0:	e8 e7 00 00 00       	call   11d9c <irq_install>
   11cb5:	83 c4 10             	add    $0x10,%esp
    irq_install( IRQ10_TS ,  (irq_handler_t)exception_handler_invalid_tss );
   11cb8:	83 ec 08             	sub    $0x8,%esp
   11cbb:	68 5f 01 01 00       	push   $0x1015f
   11cc0:	6a 0a                	push   $0xa
   11cc2:	e8 d5 00 00 00       	call   11d9c <irq_install>
   11cc7:	83 c4 10             	add    $0x10,%esp
    irq_install( IRQ11_NP ,  (irq_handler_t)exception_handler_segment_not_present );
   11cca:	83 ec 08             	sub    $0x8,%esp
   11ccd:	68 7c 01 01 00       	push   $0x1017c
   11cd2:	6a 0b                	push   $0xb
   11cd4:	e8 c3 00 00 00       	call   11d9c <irq_install>
   11cd9:	83 c4 10             	add    $0x10,%esp
    irq_install( IRQ12_SS ,  (irq_handler_t)exception_handler_stack_segment_fault );
   11cdc:	83 ec 08             	sub    $0x8,%esp
   11cdf:	68 99 01 01 00       	push   $0x10199
   11ce4:	6a 0c                	push   $0xc
   11ce6:	e8 b1 00 00 00       	call   11d9c <irq_install>
   11ceb:	83 c4 10             	add    $0x10,%esp
    irq_install( IRQ13_GP ,  (irq_handler_t)exception_handler_general_protection );
   11cee:	83 ec 08             	sub    $0x8,%esp
   11cf1:	68 b6 01 01 00       	push   $0x101b6
   11cf6:	6a 0d                	push   $0xd
   11cf8:	e8 9f 00 00 00       	call   11d9c <irq_install>
   11cfd:	83 c4 10             	add    $0x10,%esp
    irq_install( IRQ14_FP ,  (irq_handler_t)exception_handler_page_fault );
   11d00:	83 ec 08             	sub    $0x8,%esp
   11d03:	68 d3 01 01 00       	push   $0x101d3
   11d08:	6a 0e                	push   $0xe
   11d0a:	e8 8d 00 00 00       	call   11d9c <irq_install>
   11d0f:	83 c4 10             	add    $0x10,%esp
    irq_install( IRQ16_MF ,  (irq_handler_t)exception_handler_fpu_error );
   11d12:	83 ec 08             	sub    $0x8,%esp
   11d15:	68 f0 01 01 00       	push   $0x101f0
   11d1a:	6a 10                	push   $0x10
   11d1c:	e8 7b 00 00 00       	call   11d9c <irq_install>
   11d21:	83 c4 10             	add    $0x10,%esp
    irq_install( IRQ17_AC ,  (irq_handler_t)exception_handler_alignment_check );
   11d24:	83 ec 08             	sub    $0x8,%esp
   11d27:	68 0f 02 01 00       	push   $0x1020f
   11d2c:	6a 11                	push   $0x11
   11d2e:	e8 69 00 00 00       	call   11d9c <irq_install>
   11d33:	83 c4 10             	add    $0x10,%esp
    irq_install( IRQ18_MC ,  (irq_handler_t)exception_handler_machine_check );
   11d36:	83 ec 08             	sub    $0x8,%esp
   11d39:	68 2c 02 01 00       	push   $0x1022c
   11d3e:	6a 12                	push   $0x12
   11d40:	e8 57 00 00 00       	call   11d9c <irq_install>
   11d45:	83 c4 10             	add    $0x10,%esp
    irq_install( IRQ19_XM ,  (irq_handler_t)exception_handler_simd_exception );
   11d48:	83 ec 08             	sub    $0x8,%esp
   11d4b:	68 4b 02 01 00       	push   $0x1024b
   11d50:	6a 13                	push   $0x13
   11d52:	e8 45 00 00 00       	call   11d9c <irq_install>
   11d57:	83 c4 10             	add    $0x10,%esp
    irq_install( IRQ20_VE ,  (irq_handler_t)exception_handler_virtualization_exception );
   11d5a:	83 ec 08             	sub    $0x8,%esp
   11d5d:	68 6a 02 01 00       	push   $0x1026a
   11d62:	6a 14                	push   $0x14
   11d64:	e8 33 00 00 00       	call   11d9c <irq_install>
   11d69:	83 c4 10             	add    $0x10,%esp
    irq_install( IRQ21_CP ,  (irq_handler_t)exception_handler_control_protection_exception );
   11d6c:	83 ec 08             	sub    $0x8,%esp
   11d6f:	68 89 02 01 00       	push   $0x10289
   11d74:	6a 15                	push   $0x15
   11d76:	e8 21 00 00 00       	call   11d9c <irq_install>
   11d7b:	83 c4 10             	add    $0x10,%esp

    lidt( (uint32_t)idt_table , sizeof(idt_table) );
   11d7e:	b8 e0 89 01 00       	mov    $0x189e0,%eax
   11d83:	83 ec 08             	sub    $0x8,%esp
   11d86:	68 00 04 00 00       	push   $0x400
   11d8b:	50                   	push   %eax
   11d8c:	e8 75 f8 ff ff       	call   11606 <lidt>
   11d91:	83 c4 10             	add    $0x10,%esp
    init_pic();
   11d94:	e8 b0 fd ff ff       	call   11b49 <init_pic>
}
   11d99:	90                   	nop
   11d9a:	c9                   	leave  
   11d9b:	c3                   	ret    

00011d9c <irq_install>:

int irq_install( int irq_num , irq_handler_t handler ){
   11d9c:	55                   	push   %ebp
   11d9d:	89 e5                	mov    %esp,%ebp
   11d9f:	83 ec 08             	sub    $0x8,%esp
    if ( irq_num >= IDT_TABLE_NR ){
   11da2:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   11da6:	7e 07                	jle    11daf <irq_install+0x13>
        return -1;
   11da8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11dad:	eb 25                	jmp    11dd4 <irq_install+0x38>
    }

    gate_desc_set( idt_table + irq_num , KERNEL_SELECTOR_CS , (uint32_t)handler 
   11daf:	8b 45 0c             	mov    0xc(%ebp),%eax
   11db2:	8b 55 08             	mov    0x8(%ebp),%edx
   11db5:	c1 e2 03             	shl    $0x3,%edx
   11db8:	81 c2 e0 89 01 00    	add    $0x189e0,%edx
   11dbe:	68 00 8e 00 00       	push   $0x8e00
   11dc3:	50                   	push   %eax
   11dc4:	6a 08                	push   $0x8
   11dc6:	52                   	push   %edx
   11dc7:	e8 df f6 ff ff       	call   114ab <gate_desc_set>
   11dcc:	83 c4 10             	add    $0x10,%esp
     , GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_INT );

     return 0;
   11dcf:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11dd4:	c9                   	leave  
   11dd5:	c3                   	ret    

00011dd6 <irq_enable>:

void irq_enable( int irq_num ){
   11dd6:	55                   	push   %ebp
   11dd7:	89 e5                	mov    %esp,%ebp
   11dd9:	53                   	push   %ebx
   11dda:	83 ec 10             	sub    $0x10,%esp
    if( irq_num < IRQ_PIC_START ){
   11ddd:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   11de1:	7e 6d                	jle    11e50 <irq_enable+0x7a>
        return ;
    }

    irq_num -= IRQ_PIC_START;
   11de3:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if( irq_num < 8 ){
   11de7:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11deb:	7f 32                	jg     11e1f <irq_enable+0x49>
        uint8_t mask = inb( PIC0_IMR ) & ~( 1 << irq_num );
   11ded:	6a 21                	push   $0x21
   11def:	e8 d6 f7 ff ff       	call   115ca <inb>
   11df4:	83 c4 04             	add    $0x4,%esp
   11df7:	89 c2                	mov    %eax,%edx
   11df9:	8b 45 08             	mov    0x8(%ebp),%eax
   11dfc:	bb 01 00 00 00       	mov    $0x1,%ebx
   11e01:	89 c1                	mov    %eax,%ecx
   11e03:	d3 e3                	shl    %cl,%ebx
   11e05:	89 d8                	mov    %ebx,%eax
   11e07:	f7 d0                	not    %eax
   11e09:	21 d0                	and    %edx,%eax
   11e0b:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb( PIC0_IMR , mask );
   11e0e:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   11e12:	50                   	push   %eax
   11e13:	6a 21                	push   $0x21
   11e15:	e8 cd f7 ff ff       	call   115e7 <outb>
   11e1a:	83 c4 08             	add    $0x8,%esp
   11e1d:	eb 32                	jmp    11e51 <irq_enable+0x7b>
    }
    else{
        uint8_t mask = inb( PIC1_IMR ) & ~( 1 << ( irq_num % 8 ) );
   11e1f:	68 a1 00 00 00       	push   $0xa1
   11e24:	e8 a1 f7 ff ff       	call   115ca <inb>
   11e29:	83 c4 04             	add    $0x4,%esp
   11e2c:	89 c3                	mov    %eax,%ebx
   11e2e:	8b 45 08             	mov    0x8(%ebp),%eax
   11e31:	99                   	cltd   
   11e32:	c1 ea 1d             	shr    $0x1d,%edx
   11e35:	01 d0                	add    %edx,%eax
   11e37:	83 e0 07             	and    $0x7,%eax
   11e3a:	29 d0                	sub    %edx,%eax
   11e3c:	ba 01 00 00 00       	mov    $0x1,%edx
   11e41:	89 c1                	mov    %eax,%ecx
   11e43:	d3 e2                	shl    %cl,%edx
   11e45:	89 d0                	mov    %edx,%eax
   11e47:	f7 d0                	not    %eax
   11e49:	21 d8                	and    %ebx,%eax
   11e4b:	88 45 fb             	mov    %al,-0x5(%ebp)
   11e4e:	eb 01                	jmp    11e51 <irq_enable+0x7b>
        return ;
   11e50:	90                   	nop
    }
}
   11e51:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11e54:	c9                   	leave  
   11e55:	c3                   	ret    

00011e56 <irq_disable>:

void irq_disable( int irq_num ){
   11e56:	55                   	push   %ebp
   11e57:	89 e5                	mov    %esp,%ebp
   11e59:	53                   	push   %ebx
   11e5a:	83 ec 10             	sub    $0x10,%esp
    if( irq_num < IRQ_PIC_START ){
   11e5d:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   11e61:	7e 69                	jle    11ecc <irq_disable+0x76>
        return ;
    }

    irq_num -= IRQ_PIC_START;
   11e63:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if( irq_num < 8 ){
   11e67:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11e6b:	7f 30                	jg     11e9d <irq_disable+0x47>
        uint8_t mask = inb( PIC0_IMR ) | ( 1 << irq_num );
   11e6d:	6a 21                	push   $0x21
   11e6f:	e8 56 f7 ff ff       	call   115ca <inb>
   11e74:	83 c4 04             	add    $0x4,%esp
   11e77:	89 c3                	mov    %eax,%ebx
   11e79:	8b 45 08             	mov    0x8(%ebp),%eax
   11e7c:	ba 01 00 00 00       	mov    $0x1,%edx
   11e81:	89 c1                	mov    %eax,%ecx
   11e83:	d3 e2                	shl    %cl,%edx
   11e85:	89 d0                	mov    %edx,%eax
   11e87:	09 d8                	or     %ebx,%eax
   11e89:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb( PIC0_IMR , mask );
   11e8c:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   11e90:	50                   	push   %eax
   11e91:	6a 21                	push   $0x21
   11e93:	e8 4f f7 ff ff       	call   115e7 <outb>
   11e98:	83 c4 08             	add    $0x8,%esp
   11e9b:	eb 30                	jmp    11ecd <irq_disable+0x77>
    }
    else{
        uint8_t mask = inb( PIC1_IMR ) | ( 1 << ( irq_num % 8 ) );
   11e9d:	68 a1 00 00 00       	push   $0xa1
   11ea2:	e8 23 f7 ff ff       	call   115ca <inb>
   11ea7:	83 c4 04             	add    $0x4,%esp
   11eaa:	89 c3                	mov    %eax,%ebx
   11eac:	8b 45 08             	mov    0x8(%ebp),%eax
   11eaf:	99                   	cltd   
   11eb0:	c1 ea 1d             	shr    $0x1d,%edx
   11eb3:	01 d0                	add    %edx,%eax
   11eb5:	83 e0 07             	and    $0x7,%eax
   11eb8:	29 d0                	sub    %edx,%eax
   11eba:	ba 01 00 00 00       	mov    $0x1,%edx
   11ebf:	89 c1                	mov    %eax,%ecx
   11ec1:	d3 e2                	shl    %cl,%edx
   11ec3:	89 d0                	mov    %edx,%eax
   11ec5:	09 d8                	or     %ebx,%eax
   11ec7:	88 45 fb             	mov    %al,-0x5(%ebp)
   11eca:	eb 01                	jmp    11ecd <irq_disable+0x77>
        return ;
   11ecc:	90                   	nop
    }
}
   11ecd:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11ed0:	c9                   	leave  
   11ed1:	c3                   	ret    

00011ed2 <irq_disable_global>:

void irq_disable_global( void ){
   11ed2:	55                   	push   %ebp
   11ed3:	89 e5                	mov    %esp,%ebp
    cli();
   11ed5:	e8 e2 f6 ff ff       	call   115bc <cli>
}
   11eda:	90                   	nop
   11edb:	5d                   	pop    %ebp
   11edc:	c3                   	ret    

00011edd <irq_enable_global>:

void irq_enable_global( void ){
   11edd:	55                   	push   %ebp
   11ede:	89 e5                	mov    %esp,%ebp
    sti();
   11ee0:	e8 de f6 ff ff       	call   115c3 <sti>
}
   11ee5:	90                   	nop
   11ee6:	5d                   	pop    %ebp
   11ee7:	c3                   	ret    

00011ee8 <pic_send_eoi>:

void pic_send_eoi( int irq_num ){
   11ee8:	55                   	push   %ebp
   11ee9:	89 e5                	mov    %esp,%ebp
    irq_num -= IRQ_PIC_START;
   11eeb:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if( irq_num >= 8 ){
   11eef:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11ef3:	7e 0f                	jle    11f04 <pic_send_eoi+0x1c>
        outb( PIC1_OCW2 , PIC_OCW2_EOI );
   11ef5:	6a 20                	push   $0x20
   11ef7:	68 a0 00 00 00       	push   $0xa0
   11efc:	e8 e6 f6 ff ff       	call   115e7 <outb>
   11f01:	83 c4 08             	add    $0x8,%esp
    }
    outb( PIC0_OCW2 , PIC_OCW2_EOI );
   11f04:	6a 20                	push   $0x20
   11f06:	6a 20                	push   $0x20
   11f08:	e8 da f6 ff ff       	call   115e7 <outb>
   11f0d:	83 c4 08             	add    $0x8,%esp
}
   11f10:	90                   	nop
   11f11:	c9                   	leave  
   11f12:	c3                   	ret    

00011f13 <irq_enter_protection>:


irq_state_t irq_enter_protection( void ){
   11f13:	55                   	push   %ebp
   11f14:	89 e5                	mov    %esp,%ebp
   11f16:	83 ec 10             	sub    $0x10,%esp
    irq_state_t state = read_eflags();
   11f19:	e8 17 f7 ff ff       	call   11635 <read_eflags>
   11f1e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    irq_disable_global();
   11f21:	e8 ac ff ff ff       	call   11ed2 <irq_disable_global>
    return state;
   11f26:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11f29:	c9                   	leave  
   11f2a:	c3                   	ret    

00011f2b <irq_leave_protection>:
void irq_leave_protection( irq_state_t state ){
   11f2b:	55                   	push   %ebp
   11f2c:	89 e5                	mov    %esp,%ebp
    write_eflags( state );
   11f2e:	ff 75 08             	pushl  0x8(%ebp)
   11f31:	e8 0f f7 ff ff       	call   11645 <write_eflags>
   11f36:	83 c4 04             	add    $0x4,%esp
   11f39:	90                   	nop
   11f3a:	c9                   	leave  
   11f3b:	c3                   	ret    

00011f3c <outb>:
static inline void outb( uint16_t port , uint8_t data ){
   11f3c:	55                   	push   %ebp
   11f3d:	89 e5                	mov    %esp,%ebp
   11f3f:	83 ec 08             	sub    $0x8,%esp
   11f42:	8b 55 08             	mov    0x8(%ebp),%edx
   11f45:	8b 45 0c             	mov    0xc(%ebp),%eax
   11f48:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   11f4c:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v] , %[p]"::[p]"d"(port) , [v]"a"(data));
   11f4f:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11f53:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11f57:	ee                   	out    %al,(%dx)
}
   11f58:	90                   	nop
   11f59:	c9                   	leave  
   11f5a:	c3                   	ret    

00011f5b <do_handler_time>:
#include"os_cfg.h"
#include"comm/cpu_instr.h"
#include"tools/log.h"
#include"core/task.h"
static uint32_t sys_tick;
void do_handler_time( exception_frame_t * frame ){
   11f5b:	55                   	push   %ebp
   11f5c:	89 e5                	mov    %esp,%ebp
   11f5e:	83 ec 08             	sub    $0x8,%esp
    sys_tick ++;
   11f61:	a1 e0 8d 01 00       	mov    0x18de0,%eax
   11f66:	83 c0 01             	add    $0x1,%eax
   11f69:	a3 e0 8d 01 00       	mov    %eax,0x18de0
    pic_send_eoi( IRQ0_TIMER );
   11f6e:	83 ec 0c             	sub    $0xc,%esp
   11f71:	6a 20                	push   $0x20
   11f73:	e8 70 ff ff ff       	call   11ee8 <pic_send_eoi>
   11f78:	83 c4 10             	add    $0x10,%esp
    task_time_tick();
   11f7b:	e8 36 f2 ff ff       	call   111b6 <task_time_tick>
}
   11f80:	90                   	nop
   11f81:	c9                   	leave  
   11f82:	c3                   	ret    

00011f83 <init_pit>:

static void init_pit( void ){
   11f83:	55                   	push   %ebp
   11f84:	89 e5                	mov    %esp,%ebp
   11f86:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = PIT_OSC_FREQ * OS_TICKS_MS / 1000;
   11f89:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)
    outb( PIT_COMMAND_MODE_PORT , PIT_CHANNEL | PIT_LOAD_LOHI | PIT_MODE3 );
   11f90:	6a 36                	push   $0x36
   11f92:	6a 43                	push   $0x43
   11f94:	e8 a3 ff ff ff       	call   11f3c <outb>
   11f99:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT , reload_count & 0xff );
   11f9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11f9f:	0f b6 c0             	movzbl %al,%eax
   11fa2:	50                   	push   %eax
   11fa3:	6a 40                	push   $0x40
   11fa5:	e8 92 ff ff ff       	call   11f3c <outb>
   11faa:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT , ( reload_count >> 8 ) & 0xff );
   11fad:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11fb0:	c1 e8 08             	shr    $0x8,%eax
   11fb3:	0f b6 c0             	movzbl %al,%eax
   11fb6:	50                   	push   %eax
   11fb7:	6a 40                	push   $0x40
   11fb9:	e8 7e ff ff ff       	call   11f3c <outb>
   11fbe:	83 c4 08             	add    $0x8,%esp
    irq_install( IRQ0_TIMER , (irq_handler_t)exception_handler_time );
   11fc1:	83 ec 08             	sub    $0x8,%esp
   11fc4:	68 a6 02 01 00       	push   $0x102a6
   11fc9:	6a 20                	push   $0x20
   11fcb:	e8 cc fd ff ff       	call   11d9c <irq_install>
   11fd0:	83 c4 10             	add    $0x10,%esp
    irq_enable( IRQ0_TIMER );
   11fd3:	83 ec 0c             	sub    $0xc,%esp
   11fd6:	6a 20                	push   $0x20
   11fd8:	e8 f9 fd ff ff       	call   11dd6 <irq_enable>
   11fdd:	83 c4 10             	add    $0x10,%esp
}
   11fe0:	90                   	nop
   11fe1:	c9                   	leave  
   11fe2:	c3                   	ret    

00011fe3 <time_init>:

void time_init( void ){
   11fe3:	55                   	push   %ebp
   11fe4:	89 e5                	mov    %esp,%ebp
   11fe6:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   11fe9:	c7 05 e0 8d 01 00 00 	movl   $0x0,0x18de0
   11ff0:	00 00 00 
    init_pit();
   11ff3:	e8 8b ff ff ff       	call   11f83 <init_pit>
   11ff8:	90                   	nop
   11ff9:	c9                   	leave  
   11ffa:	c3                   	ret    

00011ffb <kernel_init>:
#include"tools/list.h"
#include"ipc/sem.h"
#include"core/memory.h"


void kernel_init( boot_info_t * boot_info ){
   11ffb:	55                   	push   %ebp
   11ffc:	89 e5                	mov    %esp,%ebp
   11ffe:	83 ec 08             	sub    $0x8,%esp
    ASSERT(boot_info -> ram_region_count != 0 );
   12001:	8b 45 08             	mov    0x8(%ebp),%eax
   12004:	8b 40 50             	mov    0x50(%eax),%eax
   12007:	85 c0                	test   %eax,%eax
   12009:	75 19                	jne    12024 <kernel_init+0x29>
   1200b:	68 40 37 01 00       	push   $0x13740
   12010:	68 f4 37 01 00       	push   $0x137f4
   12015:	6a 11                	push   $0x11
   12017:	68 64 37 01 00       	push   $0x13764
   1201c:	e8 b7 0a 00 00       	call   12ad8 <pannic>
   12021:	83 c4 10             	add    $0x10,%esp
    cpu_init();
   12024:	e8 64 f4 ff ff       	call   1148d <cpu_init>
    log_init();
   12029:	e8 14 0d 00 00       	call   12d42 <log_init>
    memory_init( boot_info );
   1202e:	83 ec 0c             	sub    $0xc,%esp
   12031:	ff 75 08             	pushl  0x8(%ebp)
   12034:	e8 de e6 ff ff       	call   10717 <memory_init>
   12039:	83 c4 10             	add    $0x10,%esp
    irq_init();
   1203c:	e8 9b fb ff ff       	call   11bdc <irq_init>
    time_init();
   12041:	e8 9d ff ff ff       	call   11fe3 <time_init>
    task_manager_init();
   12046:	e8 5e ef ff ff       	call   10fa9 <task_manager_init>
}
   1204b:	90                   	nop
   1204c:	c9                   	leave  
   1204d:	c3                   	ret    

0001204e <move_to_first_task>:

void move_to_first_task( void ){
   1204e:	55                   	push   %ebp
   1204f:	89 e5                	mov    %esp,%ebp
   12051:	56                   	push   %esi
   12052:	53                   	push   %ebx
   12053:	83 ec 10             	sub    $0x10,%esp
    task_t * curr = task_current();
   12056:	e8 95 f0 ff ff       	call   110f0 <task_current>
   1205b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    ASSERT( curr != 0 );
   1205e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   12062:	75 19                	jne    1207d <move_to_first_task+0x2f>
   12064:	68 a1 37 01 00       	push   $0x137a1
   12069:	68 00 38 01 00       	push   $0x13800
   1206e:	6a 1c                	push   $0x1c
   12070:	68 64 37 01 00       	push   $0x13764
   12075:	e8 5e 0a 00 00       	call   12ad8 <pannic>
   1207a:	83 c4 10             	add    $0x10,%esp
    tss_t * tss = &(curr -> tss );
   1207d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12080:	83 c0 4c             	add    $0x4c,%eax
   12083:	89 45 f0             	mov    %eax,-0x10(%ebp)
        "push %[ss]\n\t"
        "push %[esp]\n\t"
        "push %[eflags]\n\t"
        "push %[cs]\n\t"
        "push %[eip]\n\t"
        "iret"::[ss]"r"(tss->ss) , [esp]"r"(tss->esp) ,
   12086:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12089:	8b 40 50             	mov    0x50(%eax),%eax
   1208c:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1208f:	8b 52 38             	mov    0x38(%edx),%edx
        [eflags]"r"(tss->eflags),[cs]"r"(tss->cs),[eip]"r"(tss->eip)
   12092:	8b 4d f0             	mov    -0x10(%ebp),%ecx
   12095:	8b 49 24             	mov    0x24(%ecx),%ecx
   12098:	8b 5d f0             	mov    -0x10(%ebp),%ebx
   1209b:	8b 5b 4c             	mov    0x4c(%ebx),%ebx
   1209e:	8b 75 f0             	mov    -0x10(%ebp),%esi
   120a1:	8b 76 20             	mov    0x20(%esi),%esi
    __asm__ __volatile__(
   120a4:	50                   	push   %eax
   120a5:	52                   	push   %edx
   120a6:	51                   	push   %ecx
   120a7:	53                   	push   %ebx
   120a8:	56                   	push   %esi
   120a9:	cf                   	iret   
    );
}
   120aa:	90                   	nop
   120ab:	8d 65 f8             	lea    -0x8(%ebp),%esp
   120ae:	5b                   	pop    %ebx
   120af:	5e                   	pop    %esi
   120b0:	5d                   	pop    %ebp
   120b1:	c3                   	ret    

000120b2 <init_main>:

void init_main( void ){
   120b2:	55                   	push   %ebp
   120b3:	89 e5                	mov    %esp,%ebp
   120b5:	83 ec 08             	sub    $0x8,%esp
    log_printf("Fu Junjie is loading the kernel....");
   120b8:	83 ec 0c             	sub    $0xc,%esp
   120bb:	68 ac 37 01 00       	push   $0x137ac
   120c0:	e8 1a 0d 00 00       	call   12ddf <log_printf>
   120c5:	83 c4 10             	add    $0x10,%esp
    log_printf("Version: %s" , OS_VERSION);
   120c8:	83 ec 08             	sub    $0x8,%esp
   120cb:	68 d0 37 01 00       	push   $0x137d0
   120d0:	68 da 37 01 00       	push   $0x137da
   120d5:	e8 05 0d 00 00       	call   12ddf <log_printf>
   120da:	83 c4 10             	add    $0x10,%esp
    log_printf("%d %d %x %c" , -123 , 123456 , 12345 , 'a' );
   120dd:	83 ec 0c             	sub    $0xc,%esp
   120e0:	6a 61                	push   $0x61
   120e2:	68 39 30 00 00       	push   $0x3039
   120e7:	68 40 e2 01 00       	push   $0x1e240
   120ec:	6a 85                	push   $0xffffff85
   120ee:	68 e6 37 01 00       	push   $0x137e6
   120f3:	e8 e7 0c 00 00       	call   12ddf <log_printf>
   120f8:	83 c4 20             	add    $0x20,%esp
    task_first_init();
   120fb:	e8 cf ed ff ff       	call   10ecf <task_first_init>
    move_to_first_task();
   12100:	e8 49 ff ff ff       	call   1204e <move_to_first_task>
   12105:	90                   	nop
   12106:	c9                   	leave  
   12107:	c3                   	ret    

00012108 <list_count>:
static inline int list_count( list_t * list ){
   12108:	55                   	push   %ebp
   12109:	89 e5                	mov    %esp,%ebp
    return list -> count;
   1210b:	8b 45 08             	mov    0x8(%ebp),%eax
   1210e:	8b 40 08             	mov    0x8(%eax),%eax
}
   12111:	5d                   	pop    %ebp
   12112:	c3                   	ret    

00012113 <mutex_init>:
#include"ipc/mutex.h"
#include"cpu/irq.h"
void mutex_init( mutex_t * mutex ){
   12113:	55                   	push   %ebp
   12114:	89 e5                	mov    %esp,%ebp
   12116:	83 ec 08             	sub    $0x8,%esp
    mutex->locked_count = 0;
   12119:	8b 45 08             	mov    0x8(%ebp),%eax
   1211c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    mutex->owner = (task_t *)0;
   12123:	8b 45 08             	mov    0x8(%ebp),%eax
   12126:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    list_init(&mutex->wait_list);
   1212c:	8b 45 08             	mov    0x8(%ebp),%eax
   1212f:	83 c0 08             	add    $0x8,%eax
   12132:	83 ec 0c             	sub    $0xc,%esp
   12135:	50                   	push   %eax
   12136:	e8 e6 09 00 00       	call   12b21 <list_init>
   1213b:	83 c4 10             	add    $0x10,%esp
}
   1213e:	90                   	nop
   1213f:	c9                   	leave  
   12140:	c3                   	ret    

00012141 <mutex_lock>:

void mutex_lock( mutex_t * mutex ){
   12141:	55                   	push   %ebp
   12142:	89 e5                	mov    %esp,%ebp
   12144:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   12147:	e8 c7 fd ff ff       	call   11f13 <irq_enter_protection>
   1214c:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t * curr = task_current();
   1214f:	e8 9c ef ff ff       	call   110f0 <task_current>
   12154:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if( mutex->locked_count == 0 ){
   12157:	8b 45 08             	mov    0x8(%ebp),%eax
   1215a:	8b 40 04             	mov    0x4(%eax),%eax
   1215d:	85 c0                	test   %eax,%eax
   1215f:	75 19                	jne    1217a <mutex_lock+0x39>
        mutex->locked_count++;
   12161:	8b 45 08             	mov    0x8(%ebp),%eax
   12164:	8b 40 04             	mov    0x4(%eax),%eax
   12167:	8d 50 01             	lea    0x1(%eax),%edx
   1216a:	8b 45 08             	mov    0x8(%ebp),%eax
   1216d:	89 50 04             	mov    %edx,0x4(%eax)
        mutex->owner = curr;
   12170:	8b 45 08             	mov    0x8(%ebp),%eax
   12173:	8b 55 f0             	mov    -0x10(%ebp),%edx
   12176:	89 10                	mov    %edx,(%eax)
   12178:	eb 47                	jmp    121c1 <mutex_lock+0x80>
    }
    else if( mutex->owner == curr ){
   1217a:	8b 45 08             	mov    0x8(%ebp),%eax
   1217d:	8b 00                	mov    (%eax),%eax
   1217f:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   12182:	75 11                	jne    12195 <mutex_lock+0x54>
        mutex->locked_count++;
   12184:	8b 45 08             	mov    0x8(%ebp),%eax
   12187:	8b 40 04             	mov    0x4(%eax),%eax
   1218a:	8d 50 01             	lea    0x1(%eax),%edx
   1218d:	8b 45 08             	mov    0x8(%ebp),%eax
   12190:	89 50 04             	mov    %edx,0x4(%eax)
   12193:	eb 2c                	jmp    121c1 <mutex_lock+0x80>
    }
    else{
        task_set_block(curr);
   12195:	83 ec 0c             	sub    $0xc,%esp
   12198:	ff 75 f0             	pushl  -0x10(%ebp)
   1219b:	e8 ed ee ff ff       	call   1108d <task_set_block>
   121a0:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&mutex->wait_list , &curr->wait_node );
   121a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   121a6:	8d 50 3c             	lea    0x3c(%eax),%edx
   121a9:	8b 45 08             	mov    0x8(%ebp),%eax
   121ac:	83 c0 08             	add    $0x8,%eax
   121af:	83 ec 08             	sub    $0x8,%esp
   121b2:	52                   	push   %edx
   121b3:	50                   	push   %eax
   121b4:	e8 ec 09 00 00       	call   12ba5 <list_insert_last>
   121b9:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   121bc:	e8 9a ef ff ff       	call   1115b <task_dispatch>
    }

    irq_leave_protection(state);
   121c1:	83 ec 0c             	sub    $0xc,%esp
   121c4:	ff 75 f4             	pushl  -0xc(%ebp)
   121c7:	e8 5f fd ff ff       	call   11f2b <irq_leave_protection>
   121cc:	83 c4 10             	add    $0x10,%esp
}
   121cf:	90                   	nop
   121d0:	c9                   	leave  
   121d1:	c3                   	ret    

000121d2 <mutex_unlock>:

void mutex_unlock( mutex_t * mutex ){
   121d2:	55                   	push   %ebp
   121d3:	89 e5                	mov    %esp,%ebp
   121d5:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   121d8:	e8 36 fd ff ff       	call   11f13 <irq_enter_protection>
   121dd:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    task_t * curr = task_current();
   121e0:	e8 0b ef ff ff       	call   110f0 <task_current>
   121e5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if( mutex-> owner == curr ){
   121e8:	8b 45 08             	mov    0x8(%ebp),%eax
   121eb:	8b 00                	mov    (%eax),%eax
   121ed:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   121f0:	0f 85 88 00 00 00    	jne    1227e <mutex_unlock+0xac>
        if( --mutex->locked_count == 0 ){
   121f6:	8b 45 08             	mov    0x8(%ebp),%eax
   121f9:	8b 40 04             	mov    0x4(%eax),%eax
   121fc:	8d 50 ff             	lea    -0x1(%eax),%edx
   121ff:	8b 45 08             	mov    0x8(%ebp),%eax
   12202:	89 50 04             	mov    %edx,0x4(%eax)
   12205:	8b 45 08             	mov    0x8(%ebp),%eax
   12208:	8b 40 04             	mov    0x4(%eax),%eax
   1220b:	85 c0                	test   %eax,%eax
   1220d:	75 6f                	jne    1227e <mutex_unlock+0xac>
            mutex->owner = (task_t *)0;
   1220f:	8b 45 08             	mov    0x8(%ebp),%eax
   12212:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

            if( list_count(&mutex->wait_list) ){
   12218:	8b 45 08             	mov    0x8(%ebp),%eax
   1221b:	83 c0 08             	add    $0x8,%eax
   1221e:	83 ec 0c             	sub    $0xc,%esp
   12221:	50                   	push   %eax
   12222:	e8 e1 fe ff ff       	call   12108 <list_count>
   12227:	83 c4 10             	add    $0x10,%esp
   1222a:	85 c0                	test   %eax,%eax
   1222c:	74 50                	je     1227e <mutex_unlock+0xac>
                list_node_t * node = list_remove_first(&mutex->wait_list);
   1222e:	8b 45 08             	mov    0x8(%ebp),%eax
   12231:	83 c0 08             	add    $0x8,%eax
   12234:	83 ec 0c             	sub    $0xc,%esp
   12237:	50                   	push   %eax
   12238:	e8 cc 09 00 00       	call   12c09 <list_remove_first>
   1223d:	83 c4 10             	add    $0x10,%esp
   12240:	89 45 ec             	mov    %eax,-0x14(%ebp)
                task_t * task = list_node_parent( node , task_t , wait_node );
   12243:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   12247:	74 08                	je     12251 <mutex_unlock+0x7f>
   12249:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1224c:	83 e8 3c             	sub    $0x3c,%eax
   1224f:	eb 05                	jmp    12256 <mutex_unlock+0x84>
   12251:	b8 00 00 00 00       	mov    $0x0,%eax
   12256:	89 45 e8             	mov    %eax,-0x18(%ebp)
                task_set_ready( task );
   12259:	83 ec 0c             	sub    $0xc,%esp
   1225c:	ff 75 e8             	pushl  -0x18(%ebp)
   1225f:	e8 f5 ed ff ff       	call   11059 <task_set_ready>
   12264:	83 c4 10             	add    $0x10,%esp
                mutex->locked_count = 1;
   12267:	8b 45 08             	mov    0x8(%ebp),%eax
   1226a:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
                mutex->owner = task;
   12271:	8b 45 08             	mov    0x8(%ebp),%eax
   12274:	8b 55 e8             	mov    -0x18(%ebp),%edx
   12277:	89 10                	mov    %edx,(%eax)
                task_dispatch();
   12279:	e8 dd ee ff ff       	call   1115b <task_dispatch>
            }
        }
    }

    irq_leave_protection(state);    
   1227e:	83 ec 0c             	sub    $0xc,%esp
   12281:	ff 75 f4             	pushl  -0xc(%ebp)
   12284:	e8 a2 fc ff ff       	call   11f2b <irq_leave_protection>
   12289:	83 c4 10             	add    $0x10,%esp
   1228c:	90                   	nop
   1228d:	c9                   	leave  
   1228e:	c3                   	ret    

0001228f <list_count>:
static inline int list_count( list_t * list ){
   1228f:	55                   	push   %ebp
   12290:	89 e5                	mov    %esp,%ebp
    return list -> count;
   12292:	8b 45 08             	mov    0x8(%ebp),%eax
   12295:	8b 40 08             	mov    0x8(%eax),%eax
}
   12298:	5d                   	pop    %ebp
   12299:	c3                   	ret    

0001229a <sem_init>:
#include"ipc/sem.h"
#include"core/task.h"
#include"cpu/irq.h"
void sem_init( sem_t * sem , int init_count ){
   1229a:	55                   	push   %ebp
   1229b:	89 e5                	mov    %esp,%ebp
   1229d:	83 ec 08             	sub    $0x8,%esp
    sem->count = init_count;
   122a0:	8b 45 08             	mov    0x8(%ebp),%eax
   122a3:	8b 55 0c             	mov    0xc(%ebp),%edx
   122a6:	89 10                	mov    %edx,(%eax)
    list_init( &sem->wait_list );
   122a8:	8b 45 08             	mov    0x8(%ebp),%eax
   122ab:	83 c0 04             	add    $0x4,%eax
   122ae:	83 ec 0c             	sub    $0xc,%esp
   122b1:	50                   	push   %eax
   122b2:	e8 6a 08 00 00       	call   12b21 <list_init>
   122b7:	83 c4 10             	add    $0x10,%esp
}
   122ba:	90                   	nop
   122bb:	c9                   	leave  
   122bc:	c3                   	ret    

000122bd <sem_wait>:

void sem_wait( sem_t * sem ){
   122bd:	55                   	push   %ebp
   122be:	89 e5                	mov    %esp,%ebp
   122c0:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   122c3:	e8 4b fc ff ff       	call   11f13 <irq_enter_protection>
   122c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if( sem->count > 0 ){
   122cb:	8b 45 08             	mov    0x8(%ebp),%eax
   122ce:	8b 00                	mov    (%eax),%eax
   122d0:	85 c0                	test   %eax,%eax
   122d2:	7e 0f                	jle    122e3 <sem_wait+0x26>
        sem->count -- ;
   122d4:	8b 45 08             	mov    0x8(%ebp),%eax
   122d7:	8b 00                	mov    (%eax),%eax
   122d9:	8d 50 ff             	lea    -0x1(%eax),%edx
   122dc:	8b 45 08             	mov    0x8(%ebp),%eax
   122df:	89 10                	mov    %edx,(%eax)
   122e1:	eb 34                	jmp    12317 <sem_wait+0x5a>
    }
    else{
        task_t * curr = task_current();
   122e3:	e8 08 ee ff ff       	call   110f0 <task_current>
   122e8:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_set_block( curr );
   122eb:	83 ec 0c             	sub    $0xc,%esp
   122ee:	ff 75 f0             	pushl  -0x10(%ebp)
   122f1:	e8 97 ed ff ff       	call   1108d <task_set_block>
   122f6:	83 c4 10             	add    $0x10,%esp
        list_insert_last( &sem->wait_list , &curr->wait_node );
   122f9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   122fc:	8d 50 3c             	lea    0x3c(%eax),%edx
   122ff:	8b 45 08             	mov    0x8(%ebp),%eax
   12302:	83 c0 04             	add    $0x4,%eax
   12305:	83 ec 08             	sub    $0x8,%esp
   12308:	52                   	push   %edx
   12309:	50                   	push   %eax
   1230a:	e8 96 08 00 00       	call   12ba5 <list_insert_last>
   1230f:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   12312:	e8 44 ee ff ff       	call   1115b <task_dispatch>
    }

    irq_leave_protection(state);    
   12317:	83 ec 0c             	sub    $0xc,%esp
   1231a:	ff 75 f4             	pushl  -0xc(%ebp)
   1231d:	e8 09 fc ff ff       	call   11f2b <irq_leave_protection>
   12322:	83 c4 10             	add    $0x10,%esp
}
   12325:	90                   	nop
   12326:	c9                   	leave  
   12327:	c3                   	ret    

00012328 <sem_notify>:

void sem_notify( sem_t * sem ){
   12328:	55                   	push   %ebp
   12329:	89 e5                	mov    %esp,%ebp
   1232b:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   1232e:	e8 e0 fb ff ff       	call   11f13 <irq_enter_protection>
   12333:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    if( list_count(&sem->wait_list) ){
   12336:	8b 45 08             	mov    0x8(%ebp),%eax
   12339:	83 c0 04             	add    $0x4,%eax
   1233c:	83 ec 0c             	sub    $0xc,%esp
   1233f:	50                   	push   %eax
   12340:	e8 4a ff ff ff       	call   1228f <list_count>
   12345:	83 c4 10             	add    $0x10,%esp
   12348:	85 c0                	test   %eax,%eax
   1234a:	74 40                	je     1238c <sem_notify+0x64>
        list_node_t * node = list_remove_first( &sem->wait_list );
   1234c:	8b 45 08             	mov    0x8(%ebp),%eax
   1234f:	83 c0 04             	add    $0x4,%eax
   12352:	83 ec 0c             	sub    $0xc,%esp
   12355:	50                   	push   %eax
   12356:	e8 ae 08 00 00       	call   12c09 <list_remove_first>
   1235b:	83 c4 10             	add    $0x10,%esp
   1235e:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_t * task = list_node_parent( node , task_t , wait_node );
   12361:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   12365:	74 08                	je     1236f <sem_notify+0x47>
   12367:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1236a:	83 e8 3c             	sub    $0x3c,%eax
   1236d:	eb 05                	jmp    12374 <sem_notify+0x4c>
   1236f:	b8 00 00 00 00       	mov    $0x0,%eax
   12374:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready( task );
   12377:	83 ec 0c             	sub    $0xc,%esp
   1237a:	ff 75 ec             	pushl  -0x14(%ebp)
   1237d:	e8 d7 ec ff ff       	call   11059 <task_set_ready>
   12382:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   12385:	e8 d1 ed ff ff       	call   1115b <task_dispatch>
   1238a:	eb 0d                	jmp    12399 <sem_notify+0x71>
    }
    else{
        sem->count ++ ;
   1238c:	8b 45 08             	mov    0x8(%ebp),%eax
   1238f:	8b 00                	mov    (%eax),%eax
   12391:	8d 50 01             	lea    0x1(%eax),%edx
   12394:	8b 45 08             	mov    0x8(%ebp),%eax
   12397:	89 10                	mov    %edx,(%eax)
    }
    irq_leave_protection(state);   
   12399:	83 ec 0c             	sub    $0xc,%esp
   1239c:	ff 75 f4             	pushl  -0xc(%ebp)
   1239f:	e8 87 fb ff ff       	call   11f2b <irq_leave_protection>
   123a4:	83 c4 10             	add    $0x10,%esp
}
   123a7:	90                   	nop
   123a8:	c9                   	leave  
   123a9:	c3                   	ret    

000123aa <sem_count>:

int sem_count( sem_t * sem ){
   123aa:	55                   	push   %ebp
   123ab:	89 e5                	mov    %esp,%ebp
   123ad:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   123b0:	e8 5e fb ff ff       	call   11f13 <irq_enter_protection>
   123b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int count = sem->count;
   123b8:	8b 45 08             	mov    0x8(%ebp),%eax
   123bb:	8b 00                	mov    (%eax),%eax
   123bd:	89 45 f0             	mov    %eax,-0x10(%ebp)
    irq_leave_protection(state);
   123c0:	83 ec 0c             	sub    $0xc,%esp
   123c3:	ff 75 f4             	pushl  -0xc(%ebp)
   123c6:	e8 60 fb ff ff       	call   11f2b <irq_leave_protection>
   123cb:	83 c4 10             	add    $0x10,%esp
    return count;
   123ce:	8b 45 f0             	mov    -0x10(%ebp),%eax
   123d1:	c9                   	leave  
   123d2:	c3                   	ret    

000123d3 <bitmap_byte_count>:
#include"tools/bitmap.h"
#include"tools/klib.h"

int bitmap_byte_count( int bit_count ){
   123d3:	55                   	push   %ebp
   123d4:	89 e5                	mov    %esp,%ebp
    return ( bit_count + 8 - 1 ) / 8 ;
   123d6:	8b 45 08             	mov    0x8(%ebp),%eax
   123d9:	83 c0 07             	add    $0x7,%eax
   123dc:	8d 50 07             	lea    0x7(%eax),%edx
   123df:	85 c0                	test   %eax,%eax
   123e1:	0f 48 c2             	cmovs  %edx,%eax
   123e4:	c1 f8 03             	sar    $0x3,%eax
}
   123e7:	5d                   	pop    %ebp
   123e8:	c3                   	ret    

000123e9 <bitmap_init>:

void bitmap_init( bitmap_t * bitmap , uint8_t * bits , int count , int init_bit ){
   123e9:	55                   	push   %ebp
   123ea:	89 e5                	mov    %esp,%ebp
   123ec:	83 ec 18             	sub    $0x18,%esp
    bitmap -> bit_count = count;
   123ef:	8b 45 08             	mov    0x8(%ebp),%eax
   123f2:	8b 55 10             	mov    0x10(%ebp),%edx
   123f5:	89 10                	mov    %edx,(%eax)
    bitmap -> bits = bits;
   123f7:	8b 45 08             	mov    0x8(%ebp),%eax
   123fa:	8b 55 0c             	mov    0xc(%ebp),%edx
   123fd:	89 50 04             	mov    %edx,0x4(%eax)
    int bytes = bitmap_byte_count( bitmap -> bit_count );
   12400:	8b 45 08             	mov    0x8(%ebp),%eax
   12403:	8b 00                	mov    (%eax),%eax
   12405:	50                   	push   %eax
   12406:	e8 c8 ff ff ff       	call   123d3 <bitmap_byte_count>
   1240b:	83 c4 04             	add    $0x4,%esp
   1240e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_memset( bitmap->bits , init_bit ? 0xFF : 0 , bytes );
   12411:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   12415:	74 07                	je     1241e <bitmap_init+0x35>
   12417:	ba ff 00 00 00       	mov    $0xff,%edx
   1241c:	eb 05                	jmp    12423 <bitmap_init+0x3a>
   1241e:	ba 00 00 00 00       	mov    $0x0,%edx
   12423:	8b 45 08             	mov    0x8(%ebp),%eax
   12426:	8b 40 04             	mov    0x4(%eax),%eax
   12429:	83 ec 04             	sub    $0x4,%esp
   1242c:	ff 75 f4             	pushl  -0xc(%ebp)
   1242f:	52                   	push   %edx
   12430:	50                   	push   %eax
   12431:	e8 95 03 00 00       	call   127cb <kernel_memset>
   12436:	83 c4 10             	add    $0x10,%esp
}
   12439:	90                   	nop
   1243a:	c9                   	leave  
   1243b:	c3                   	ret    

0001243c <bitmap_get_bit>:


int bitmap_get_bit( bitmap_t * bitmap , int index ){
   1243c:	55                   	push   %ebp
   1243d:	89 e5                	mov    %esp,%ebp
   1243f:	53                   	push   %ebx
    return bitmap->bits[ index / 8 ] & ( 1 << (index % 8 ) );
   12440:	8b 45 08             	mov    0x8(%ebp),%eax
   12443:	8b 50 04             	mov    0x4(%eax),%edx
   12446:	8b 45 0c             	mov    0xc(%ebp),%eax
   12449:	8d 48 07             	lea    0x7(%eax),%ecx
   1244c:	85 c0                	test   %eax,%eax
   1244e:	0f 48 c1             	cmovs  %ecx,%eax
   12451:	c1 f8 03             	sar    $0x3,%eax
   12454:	01 d0                	add    %edx,%eax
   12456:	0f b6 00             	movzbl (%eax),%eax
   12459:	0f b6 d8             	movzbl %al,%ebx
   1245c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1245f:	99                   	cltd   
   12460:	c1 ea 1d             	shr    $0x1d,%edx
   12463:	01 d0                	add    %edx,%eax
   12465:	83 e0 07             	and    $0x7,%eax
   12468:	29 d0                	sub    %edx,%eax
   1246a:	ba 01 00 00 00       	mov    $0x1,%edx
   1246f:	89 c1                	mov    %eax,%ecx
   12471:	d3 e2                	shl    %cl,%edx
   12473:	89 d0                	mov    %edx,%eax
   12475:	21 d8                	and    %ebx,%eax
}
   12477:	5b                   	pop    %ebx
   12478:	5d                   	pop    %ebp
   12479:	c3                   	ret    

0001247a <bitmap_set_bit>:

void bitmap_set_bit( bitmap_t * bitmap , int index , int count , int bit ){
   1247a:	55                   	push   %ebp
   1247b:	89 e5                	mov    %esp,%ebp
   1247d:	56                   	push   %esi
   1247e:	53                   	push   %ebx
   1247f:	83 ec 10             	sub    $0x10,%esp
    for(int i = 0 ; ( i < count ) && (index < bitmap->bit_count ) ; i ++ , index ++ ){
   12482:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   12489:	e9 a2 00 00 00       	jmp    12530 <bitmap_set_bit+0xb6>
        if( bit ){
   1248e:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   12492:	74 4a                	je     124de <bitmap_set_bit+0x64>
            bitmap->bits[ index / 8 ] |= ( 1 << (index % 8 ) );
   12494:	8b 45 08             	mov    0x8(%ebp),%eax
   12497:	8b 50 04             	mov    0x4(%eax),%edx
   1249a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1249d:	8d 48 07             	lea    0x7(%eax),%ecx
   124a0:	85 c0                	test   %eax,%eax
   124a2:	0f 48 c1             	cmovs  %ecx,%eax
   124a5:	c1 f8 03             	sar    $0x3,%eax
   124a8:	89 c3                	mov    %eax,%ebx
   124aa:	89 d8                	mov    %ebx,%eax
   124ac:	01 d0                	add    %edx,%eax
   124ae:	0f b6 00             	movzbl (%eax),%eax
   124b1:	89 c6                	mov    %eax,%esi
   124b3:	8b 45 0c             	mov    0xc(%ebp),%eax
   124b6:	99                   	cltd   
   124b7:	c1 ea 1d             	shr    $0x1d,%edx
   124ba:	01 d0                	add    %edx,%eax
   124bc:	83 e0 07             	and    $0x7,%eax
   124bf:	29 d0                	sub    %edx,%eax
   124c1:	ba 01 00 00 00       	mov    $0x1,%edx
   124c6:	89 c1                	mov    %eax,%ecx
   124c8:	d3 e2                	shl    %cl,%edx
   124ca:	89 d0                	mov    %edx,%eax
   124cc:	89 f2                	mov    %esi,%edx
   124ce:	09 c2                	or     %eax,%edx
   124d0:	8b 45 08             	mov    0x8(%ebp),%eax
   124d3:	8b 40 04             	mov    0x4(%eax),%eax
   124d6:	89 d9                	mov    %ebx,%ecx
   124d8:	01 c8                	add    %ecx,%eax
   124da:	88 10                	mov    %dl,(%eax)
   124dc:	eb 4a                	jmp    12528 <bitmap_set_bit+0xae>
        }
        else{
            bitmap->bits[ index / 8 ] &= ~( 1 << (index % 8 ) );
   124de:	8b 45 08             	mov    0x8(%ebp),%eax
   124e1:	8b 50 04             	mov    0x4(%eax),%edx
   124e4:	8b 45 0c             	mov    0xc(%ebp),%eax
   124e7:	8d 48 07             	lea    0x7(%eax),%ecx
   124ea:	85 c0                	test   %eax,%eax
   124ec:	0f 48 c1             	cmovs  %ecx,%eax
   124ef:	c1 f8 03             	sar    $0x3,%eax
   124f2:	89 c3                	mov    %eax,%ebx
   124f4:	89 d8                	mov    %ebx,%eax
   124f6:	01 d0                	add    %edx,%eax
   124f8:	0f b6 00             	movzbl (%eax),%eax
   124fb:	89 c6                	mov    %eax,%esi
   124fd:	8b 45 0c             	mov    0xc(%ebp),%eax
   12500:	99                   	cltd   
   12501:	c1 ea 1d             	shr    $0x1d,%edx
   12504:	01 d0                	add    %edx,%eax
   12506:	83 e0 07             	and    $0x7,%eax
   12509:	29 d0                	sub    %edx,%eax
   1250b:	ba 01 00 00 00       	mov    $0x1,%edx
   12510:	89 c1                	mov    %eax,%ecx
   12512:	d3 e2                	shl    %cl,%edx
   12514:	89 d0                	mov    %edx,%eax
   12516:	f7 d0                	not    %eax
   12518:	89 f2                	mov    %esi,%edx
   1251a:	21 c2                	and    %eax,%edx
   1251c:	8b 45 08             	mov    0x8(%ebp),%eax
   1251f:	8b 40 04             	mov    0x4(%eax),%eax
   12522:	89 d9                	mov    %ebx,%ecx
   12524:	01 c8                	add    %ecx,%eax
   12526:	88 10                	mov    %dl,(%eax)
    for(int i = 0 ; ( i < count ) && (index < bitmap->bit_count ) ; i ++ , index ++ ){
   12528:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1252c:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
   12530:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12533:	3b 45 10             	cmp    0x10(%ebp),%eax
   12536:	7d 0e                	jge    12546 <bitmap_set_bit+0xcc>
   12538:	8b 45 08             	mov    0x8(%ebp),%eax
   1253b:	8b 00                	mov    (%eax),%eax
   1253d:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12540:	0f 8c 48 ff ff ff    	jl     1248e <bitmap_set_bit+0x14>
        }
    }
}
   12546:	90                   	nop
   12547:	83 c4 10             	add    $0x10,%esp
   1254a:	5b                   	pop    %ebx
   1254b:	5e                   	pop    %esi
   1254c:	5d                   	pop    %ebp
   1254d:	c3                   	ret    

0001254e <bitmap_is_set>:

int bitmap_is_set( bitmap_t * bitmap , int index ){
   1254e:	55                   	push   %ebp
   1254f:	89 e5                	mov    %esp,%ebp
    return bitmap_get_bit( bitmap , index ) ? 1 : 0 ;
   12551:	ff 75 0c             	pushl  0xc(%ebp)
   12554:	ff 75 08             	pushl  0x8(%ebp)
   12557:	e8 e0 fe ff ff       	call   1243c <bitmap_get_bit>
   1255c:	83 c4 08             	add    $0x8,%esp
   1255f:	85 c0                	test   %eax,%eax
   12561:	0f 95 c0             	setne  %al
   12564:	0f b6 c0             	movzbl %al,%eax
}
   12567:	c9                   	leave  
   12568:	c3                   	ret    

00012569 <bitmap_alloc_nbits>:
int bitmap_alloc_nbits( bitmap_t * bitmap , int bit , int count ){
   12569:	55                   	push   %ebp
   1256a:	89 e5                	mov    %esp,%ebp
   1256c:	83 ec 10             	sub    $0x10,%esp
    int search_idx = 0 ;
   1256f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    int ok_index = -1;
   12576:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)
    while( search_idx < bitmap->bit_count ){
   1257d:	e9 8c 00 00 00       	jmp    1260e <bitmap_alloc_nbits+0xa5>
        if( bitmap_get_bit(bitmap , search_idx) != bit ){
   12582:	ff 75 fc             	pushl  -0x4(%ebp)
   12585:	ff 75 08             	pushl  0x8(%ebp)
   12588:	e8 af fe ff ff       	call   1243c <bitmap_get_bit>
   1258d:	83 c4 08             	add    $0x8,%esp
   12590:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12593:	74 06                	je     1259b <bitmap_alloc_nbits+0x32>
            search_idx ++ ;
   12595:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
            continue;
   12599:	eb 73                	jmp    1260e <bitmap_alloc_nbits+0xa5>
        }
        ok_index = search_idx;
   1259b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1259e:	89 45 f8             	mov    %eax,-0x8(%ebp)
        int i = 1;
   125a1:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
        for( i = 1 ; ( i < count ) && ( search_idx < bitmap->bit_count ) ; i ++ ){
   125a8:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   125af:	eb 27                	jmp    125d8 <bitmap_alloc_nbits+0x6f>
            if( bitmap_get_bit(bitmap , search_idx++ ) != bit ){
   125b1:	8b 45 fc             	mov    -0x4(%ebp),%eax
   125b4:	8d 50 01             	lea    0x1(%eax),%edx
   125b7:	89 55 fc             	mov    %edx,-0x4(%ebp)
   125ba:	50                   	push   %eax
   125bb:	ff 75 08             	pushl  0x8(%ebp)
   125be:	e8 79 fe ff ff       	call   1243c <bitmap_get_bit>
   125c3:	83 c4 08             	add    $0x8,%esp
   125c6:	39 45 0c             	cmp    %eax,0xc(%ebp)
   125c9:	74 09                	je     125d4 <bitmap_alloc_nbits+0x6b>
                ok_index = -1;
   125cb:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)
                break;
   125d2:	eb 16                	jmp    125ea <bitmap_alloc_nbits+0x81>
        for( i = 1 ; ( i < count ) && ( search_idx < bitmap->bit_count ) ; i ++ ){
   125d4:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   125d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   125db:	3b 45 10             	cmp    0x10(%ebp),%eax
   125de:	7d 0a                	jge    125ea <bitmap_alloc_nbits+0x81>
   125e0:	8b 45 08             	mov    0x8(%ebp),%eax
   125e3:	8b 00                	mov    (%eax),%eax
   125e5:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   125e8:	7c c7                	jl     125b1 <bitmap_alloc_nbits+0x48>
            }
        }
        
        if( i >= count ){
   125ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
   125ed:	3b 45 10             	cmp    0x10(%ebp),%eax
   125f0:	7c 1c                	jl     1260e <bitmap_alloc_nbits+0xa5>
            bitmap_set_bit( bitmap , ok_index , count , ~bit );
   125f2:	8b 45 0c             	mov    0xc(%ebp),%eax
   125f5:	f7 d0                	not    %eax
   125f7:	50                   	push   %eax
   125f8:	ff 75 10             	pushl  0x10(%ebp)
   125fb:	ff 75 f8             	pushl  -0x8(%ebp)
   125fe:	ff 75 08             	pushl  0x8(%ebp)
   12601:	e8 74 fe ff ff       	call   1247a <bitmap_set_bit>
   12606:	83 c4 10             	add    $0x10,%esp
            return ok_index;
   12609:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1260c:	eb 13                	jmp    12621 <bitmap_alloc_nbits+0xb8>
    while( search_idx < bitmap->bit_count ){
   1260e:	8b 45 08             	mov    0x8(%ebp),%eax
   12611:	8b 00                	mov    (%eax),%eax
   12613:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   12616:	0f 8c 66 ff ff ff    	jl     12582 <bitmap_alloc_nbits+0x19>
        }
    }
    return -1;
   1261c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   12621:	c9                   	leave  
   12622:	c3                   	ret    

00012623 <hlt>:
static inline void hlt( void ){
   12623:	55                   	push   %ebp
   12624:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   12626:	f4                   	hlt    
}
   12627:	90                   	nop
   12628:	5d                   	pop    %ebp
   12629:	c3                   	ret    

0001262a <kernel_strcpy>:
#include"tools/klib.h"
#include"comm/types.h"
#include"tools/log.h"
#include"comm/cpu_instr.h"
void kernel_strcpy( char * dest , const char * src ){
   1262a:	55                   	push   %ebp
   1262b:	89 e5                	mov    %esp,%ebp
    if( !dest || !src ){
   1262d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12631:	74 3b                	je     1266e <kernel_strcpy+0x44>
   12633:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12637:	74 35                	je     1266e <kernel_strcpy+0x44>
        return ;
    }

    while( *dest && *src ){
   12639:	eb 17                	jmp    12652 <kernel_strcpy+0x28>
        *dest ++ = *src ++ ;
   1263b:	8b 55 0c             	mov    0xc(%ebp),%edx
   1263e:	8d 42 01             	lea    0x1(%edx),%eax
   12641:	89 45 0c             	mov    %eax,0xc(%ebp)
   12644:	8b 45 08             	mov    0x8(%ebp),%eax
   12647:	8d 48 01             	lea    0x1(%eax),%ecx
   1264a:	89 4d 08             	mov    %ecx,0x8(%ebp)
   1264d:	0f b6 12             	movzbl (%edx),%edx
   12650:	88 10                	mov    %dl,(%eax)
    while( *dest && *src ){
   12652:	8b 45 08             	mov    0x8(%ebp),%eax
   12655:	0f b6 00             	movzbl (%eax),%eax
   12658:	84 c0                	test   %al,%al
   1265a:	74 0a                	je     12666 <kernel_strcpy+0x3c>
   1265c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1265f:	0f b6 00             	movzbl (%eax),%eax
   12662:	84 c0                	test   %al,%al
   12664:	75 d5                	jne    1263b <kernel_strcpy+0x11>
    }
    *dest = '\0';
   12666:	8b 45 08             	mov    0x8(%ebp),%eax
   12669:	c6 00 00             	movb   $0x0,(%eax)
   1266c:	eb 01                	jmp    1266f <kernel_strcpy+0x45>
        return ;
   1266e:	90                   	nop
}
   1266f:	5d                   	pop    %ebp
   12670:	c3                   	ret    

00012671 <kernel_strncpy>:
void kernel_strncpy( char * dest , const char * src , int size ){
   12671:	55                   	push   %ebp
   12672:	89 e5                	mov    %esp,%ebp
   12674:	83 ec 10             	sub    $0x10,%esp
    if( !dest || !src || !size ){
   12677:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1267b:	74 61                	je     126de <kernel_strncpy+0x6d>
   1267d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12681:	74 5b                	je     126de <kernel_strncpy+0x6d>
   12683:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12687:	74 55                	je     126de <kernel_strncpy+0x6d>
        return ;
    }
    char * d = dest;
   12689:	8b 45 08             	mov    0x8(%ebp),%eax
   1268c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char * s = src;
   1268f:	8b 45 0c             	mov    0xc(%ebp),%eax
   12692:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while( ( size -- > 0 ) && *s ){
   12695:	eb 17                	jmp    126ae <kernel_strncpy+0x3d>
        *d ++ = *s ++ ;
   12697:	8b 55 f8             	mov    -0x8(%ebp),%edx
   1269a:	8d 42 01             	lea    0x1(%edx),%eax
   1269d:	89 45 f8             	mov    %eax,-0x8(%ebp)
   126a0:	8b 45 fc             	mov    -0x4(%ebp),%eax
   126a3:	8d 48 01             	lea    0x1(%eax),%ecx
   126a6:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   126a9:	0f b6 12             	movzbl (%edx),%edx
   126ac:	88 10                	mov    %dl,(%eax)
    while( ( size -- > 0 ) && *s ){
   126ae:	8b 45 10             	mov    0x10(%ebp),%eax
   126b1:	8d 50 ff             	lea    -0x1(%eax),%edx
   126b4:	89 55 10             	mov    %edx,0x10(%ebp)
   126b7:	85 c0                	test   %eax,%eax
   126b9:	7e 0a                	jle    126c5 <kernel_strncpy+0x54>
   126bb:	8b 45 f8             	mov    -0x8(%ebp),%eax
   126be:	0f b6 00             	movzbl (%eax),%eax
   126c1:	84 c0                	test   %al,%al
   126c3:	75 d2                	jne    12697 <kernel_strncpy+0x26>
    }
    if( size == 0 ){
   126c5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   126c9:	75 0b                	jne    126d6 <kernel_strncpy+0x65>
        *( d - 1 ) = '\0';
   126cb:	8b 45 fc             	mov    -0x4(%ebp),%eax
   126ce:	83 e8 01             	sub    $0x1,%eax
   126d1:	c6 00 00             	movb   $0x0,(%eax)
   126d4:	eb 09                	jmp    126df <kernel_strncpy+0x6e>
    }
    else{
        *d = '\0';
   126d6:	8b 45 fc             	mov    -0x4(%ebp),%eax
   126d9:	c6 00 00             	movb   $0x0,(%eax)
   126dc:	eb 01                	jmp    126df <kernel_strncpy+0x6e>
        return ;
   126de:	90                   	nop
    }
}
   126df:	c9                   	leave  
   126e0:	c3                   	ret    

000126e1 <kernel_strncpm>:

int kernel_strncpm( const char * s1 , const char * s2 , int size ){
   126e1:	55                   	push   %ebp
   126e2:	89 e5                	mov    %esp,%ebp
    if( !s1 || !s2 ){
   126e4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   126e8:	74 06                	je     126f0 <kernel_strncpm+0xf>
   126ea:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   126ee:	75 13                	jne    12703 <kernel_strncpm+0x22>
        return -1;
   126f0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   126f5:	eb 48                	jmp    1273f <kernel_strncpm+0x5e>
    }

    while( *s1 && *s2 && ( *s1 == *s2 ) && size ){
        s1 ++ ;
   126f7:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        s2 ++ ;
   126fb:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
        size--;
   126ff:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
    while( *s1 && *s2 && ( *s1 == *s2 ) && size ){
   12703:	8b 45 08             	mov    0x8(%ebp),%eax
   12706:	0f b6 00             	movzbl (%eax),%eax
   12709:	84 c0                	test   %al,%al
   1270b:	74 20                	je     1272d <kernel_strncpm+0x4c>
   1270d:	8b 45 0c             	mov    0xc(%ebp),%eax
   12710:	0f b6 00             	movzbl (%eax),%eax
   12713:	84 c0                	test   %al,%al
   12715:	74 16                	je     1272d <kernel_strncpm+0x4c>
   12717:	8b 45 08             	mov    0x8(%ebp),%eax
   1271a:	0f b6 10             	movzbl (%eax),%edx
   1271d:	8b 45 0c             	mov    0xc(%ebp),%eax
   12720:	0f b6 00             	movzbl (%eax),%eax
   12723:	38 c2                	cmp    %al,%dl
   12725:	75 06                	jne    1272d <kernel_strncpm+0x4c>
   12727:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1272b:	75 ca                	jne    126f7 <kernel_strncpm+0x16>
    }
    if( size > 0 ) return 1;
   1272d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12731:	7e 07                	jle    1273a <kernel_strncpm+0x59>
   12733:	b8 01 00 00 00       	mov    $0x1,%eax
   12738:	eb 05                	jmp    1273f <kernel_strncpm+0x5e>
    else return 0;
   1273a:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1273f:	5d                   	pop    %ebp
   12740:	c3                   	ret    

00012741 <kernel_strlen>:
int kernel_strlen( const char * str ){
   12741:	55                   	push   %ebp
   12742:	89 e5                	mov    %esp,%ebp
   12744:	83 ec 10             	sub    $0x10,%esp
    if( !str ){
   12747:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1274b:	75 07                	jne    12754 <kernel_strlen+0x13>
        return 0;
   1274d:	b8 00 00 00 00       	mov    $0x0,%eax
   12752:	eb 26                	jmp    1277a <kernel_strlen+0x39>
    }
    const char * c = str;
   12754:	8b 45 08             	mov    0x8(%ebp),%eax
   12757:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int len = 0;
   1275a:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while( *c++ ){
   12761:	eb 04                	jmp    12767 <kernel_strlen+0x26>
        len ++ ;
   12763:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while( *c++ ){
   12767:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1276a:	8d 50 01             	lea    0x1(%eax),%edx
   1276d:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12770:	0f b6 00             	movzbl (%eax),%eax
   12773:	84 c0                	test   %al,%al
   12775:	75 ec                	jne    12763 <kernel_strlen+0x22>
    }
    return len;
   12777:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
   1277a:	c9                   	leave  
   1277b:	c3                   	ret    

0001277c <kernel_memcpy>:

void kernel_memcpy( void * dest , void * src , int size ){
   1277c:	55                   	push   %ebp
   1277d:	89 e5                	mov    %esp,%ebp
   1277f:	83 ec 10             	sub    $0x10,%esp
    if( !dest || !src || !size ){
   12782:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12786:	74 40                	je     127c8 <kernel_memcpy+0x4c>
   12788:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1278c:	74 3a                	je     127c8 <kernel_memcpy+0x4c>
   1278e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12792:	74 34                	je     127c8 <kernel_memcpy+0x4c>
        return ;
    }
    uint8_t * s = ( uint8_t * )src;
   12794:	8b 45 0c             	mov    0xc(%ebp),%eax
   12797:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t * d = ( uint8_t * )dest;
   1279a:	8b 45 08             	mov    0x8(%ebp),%eax
   1279d:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while( size -- ){
   127a0:	eb 17                	jmp    127b9 <kernel_memcpy+0x3d>
        *d ++ = *s ++;
   127a2:	8b 55 fc             	mov    -0x4(%ebp),%edx
   127a5:	8d 42 01             	lea    0x1(%edx),%eax
   127a8:	89 45 fc             	mov    %eax,-0x4(%ebp)
   127ab:	8b 45 f8             	mov    -0x8(%ebp),%eax
   127ae:	8d 48 01             	lea    0x1(%eax),%ecx
   127b1:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   127b4:	0f b6 12             	movzbl (%edx),%edx
   127b7:	88 10                	mov    %dl,(%eax)
    while( size -- ){
   127b9:	8b 45 10             	mov    0x10(%ebp),%eax
   127bc:	8d 50 ff             	lea    -0x1(%eax),%edx
   127bf:	89 55 10             	mov    %edx,0x10(%ebp)
   127c2:	85 c0                	test   %eax,%eax
   127c4:	75 dc                	jne    127a2 <kernel_memcpy+0x26>
   127c6:	eb 01                	jmp    127c9 <kernel_memcpy+0x4d>
        return ;
   127c8:	90                   	nop
    }
}
   127c9:	c9                   	leave  
   127ca:	c3                   	ret    

000127cb <kernel_memset>:
void kernel_memset( void * dest , uint8_t v , int size ){
   127cb:	55                   	push   %ebp
   127cc:	89 e5                	mov    %esp,%ebp
   127ce:	83 ec 14             	sub    $0x14,%esp
   127d1:	8b 45 0c             	mov    0xc(%ebp),%eax
   127d4:	88 45 ec             	mov    %al,-0x14(%ebp)
    if( !dest || !size ){
   127d7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   127db:	74 2c                	je     12809 <kernel_memset+0x3e>
   127dd:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   127e1:	74 26                	je     12809 <kernel_memset+0x3e>
        return ;
    }

    uint8_t *d = (uint8_t *)dest;
   127e3:	8b 45 08             	mov    0x8(%ebp),%eax
   127e6:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while( size -- ){
   127e9:	eb 0f                	jmp    127fa <kernel_memset+0x2f>
        *d ++ = v;
   127eb:	8b 45 fc             	mov    -0x4(%ebp),%eax
   127ee:	8d 50 01             	lea    0x1(%eax),%edx
   127f1:	89 55 fc             	mov    %edx,-0x4(%ebp)
   127f4:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   127f8:	88 10                	mov    %dl,(%eax)
    while( size -- ){
   127fa:	8b 45 10             	mov    0x10(%ebp),%eax
   127fd:	8d 50 ff             	lea    -0x1(%eax),%edx
   12800:	89 55 10             	mov    %edx,0x10(%ebp)
   12803:	85 c0                	test   %eax,%eax
   12805:	75 e4                	jne    127eb <kernel_memset+0x20>
   12807:	eb 01                	jmp    1280a <kernel_memset+0x3f>
        return ;
   12809:	90                   	nop
    }

}
   1280a:	c9                   	leave  
   1280b:	c3                   	ret    

0001280c <kernel_memcmp>:
int kernel_memcmp( void * d1 , void * d2 , int size ){
   1280c:	55                   	push   %ebp
   1280d:	89 e5                	mov    %esp,%ebp
   1280f:	83 ec 10             	sub    $0x10,%esp
        if( !d1 || !d2 || !size ){
   12812:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12816:	74 0c                	je     12824 <kernel_memcmp+0x18>
   12818:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1281c:	74 06                	je     12824 <kernel_memcmp+0x18>
   1281e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12822:	75 07                	jne    1282b <kernel_memcmp+0x1f>
        return 1;
   12824:	b8 01 00 00 00       	mov    $0x1,%eax
   12829:	eb 43                	jmp    1286e <kernel_memcmp+0x62>
    }
    uint8_t * s = ( uint8_t * )d1;
   1282b:	8b 45 08             	mov    0x8(%ebp),%eax
   1282e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t * d = ( uint8_t * )d2;
   12831:	8b 45 0c             	mov    0xc(%ebp),%eax
   12834:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while( size -- ){
   12837:	eb 23                	jmp    1285c <kernel_memcmp+0x50>
        if( *s ++ != *d ++ ){
   12839:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1283c:	8d 50 01             	lea    0x1(%eax),%edx
   1283f:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12842:	0f b6 08             	movzbl (%eax),%ecx
   12845:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12848:	8d 50 01             	lea    0x1(%eax),%edx
   1284b:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1284e:	0f b6 00             	movzbl (%eax),%eax
   12851:	38 c1                	cmp    %al,%cl
   12853:	74 07                	je     1285c <kernel_memcmp+0x50>
            return 1;
   12855:	b8 01 00 00 00       	mov    $0x1,%eax
   1285a:	eb 12                	jmp    1286e <kernel_memcmp+0x62>
    while( size -- ){
   1285c:	8b 45 10             	mov    0x10(%ebp),%eax
   1285f:	8d 50 ff             	lea    -0x1(%eax),%edx
   12862:	89 55 10             	mov    %edx,0x10(%ebp)
   12865:	85 c0                	test   %eax,%eax
   12867:	75 d0                	jne    12839 <kernel_memcmp+0x2d>
        }
    }
    return 0;
   12869:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1286e:	c9                   	leave  
   1286f:	c3                   	ret    

00012870 <kernel_sprintf>:

void kernel_sprintf( char * str_buf , const char * fmt , ... ){
   12870:	55                   	push   %ebp
   12871:	89 e5                	mov    %esp,%ebp
   12873:	83 ec 18             	sub    $0x18,%esp
    va_list args;
    va_start( args , fmt );
   12876:	8d 45 10             	lea    0x10(%ebp),%eax
   12879:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_vsprintf( str_buf , fmt , args );
   1287c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1287f:	83 ec 04             	sub    $0x4,%esp
   12882:	50                   	push   %eax
   12883:	ff 75 0c             	pushl  0xc(%ebp)
   12886:	ff 75 08             	pushl  0x8(%ebp)
   12889:	e8 ff 00 00 00       	call   1298d <kernel_vsprintf>
   1288e:	83 c4 10             	add    $0x10,%esp
    va_end( args );    
}
   12891:	90                   	nop
   12892:	c9                   	leave  
   12893:	c3                   	ret    

00012894 <kernel_itoa>:

void kernel_itoa( char * buf , int num , int base ){
   12894:	55                   	push   %ebp
   12895:	89 e5                	mov    %esp,%ebp
   12897:	83 ec 10             	sub    $0x10,%esp
    static const char* num2ch = {"0123456789ABCDEF"};
    char *p = buf;
   1289a:	8b 45 08             	mov    0x8(%ebp),%eax
   1289d:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if( base != 2 && base != 10 && base != 16 && base != 8 ){
   128a0:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   128a4:	74 1d                	je     128c3 <kernel_itoa+0x2f>
   128a6:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   128aa:	74 17                	je     128c3 <kernel_itoa+0x2f>
   128ac:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   128b0:	74 11                	je     128c3 <kernel_itoa+0x2f>
   128b2:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   128b6:	74 0b                	je     128c3 <kernel_itoa+0x2f>
        *p = '\0';
   128b8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   128bb:	c6 00 00             	movb   $0x0,(%eax)
        return ;
   128be:	e9 c8 00 00 00       	jmp    1298b <kernel_itoa+0xf7>
    }

    if( num < 0 && base == 10 ){
   128c3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   128c7:	79 15                	jns    128de <kernel_itoa+0x4a>
   128c9:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   128cd:	75 0f                	jne    128de <kernel_itoa+0x4a>
        *p++ = '-';
   128cf:	8b 45 fc             	mov    -0x4(%ebp),%eax
   128d2:	8d 50 01             	lea    0x1(%eax),%edx
   128d5:	89 55 fc             	mov    %edx,-0x4(%ebp)
   128d8:	c6 00 2d             	movb   $0x2d,(%eax)
        num = -num ;
   128db:	f7 5d 0c             	negl   0xc(%ebp)
    }
    if( base == 16 ){
   128de:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   128e2:	75 18                	jne    128fc <kernel_itoa+0x68>
        *p++ = '0';
   128e4:	8b 45 fc             	mov    -0x4(%ebp),%eax
   128e7:	8d 50 01             	lea    0x1(%eax),%edx
   128ea:	89 55 fc             	mov    %edx,-0x4(%ebp)
   128ed:	c6 00 30             	movb   $0x30,(%eax)
        *p++ = 'X';
   128f0:	8b 45 fc             	mov    -0x4(%ebp),%eax
   128f3:	8d 50 01             	lea    0x1(%eax),%edx
   128f6:	89 55 fc             	mov    %edx,-0x4(%ebp)
   128f9:	c6 00 58             	movb   $0x58,(%eax)
    }
    do{
        char ch = num2ch[num % base];
   128fc:	8b 0d 40 40 01 00    	mov    0x14040,%ecx
   12902:	8b 45 0c             	mov    0xc(%ebp),%eax
   12905:	99                   	cltd   
   12906:	f7 7d 10             	idivl  0x10(%ebp)
   12909:	89 d0                	mov    %edx,%eax
   1290b:	01 c8                	add    %ecx,%eax
   1290d:	0f b6 00             	movzbl (%eax),%eax
   12910:	88 45 f7             	mov    %al,-0x9(%ebp)
        *p++ = ch;
   12913:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12916:	8d 50 01             	lea    0x1(%eax),%edx
   12919:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1291c:	0f b6 55 f7          	movzbl -0x9(%ebp),%edx
   12920:	88 10                	mov    %dl,(%eax)
        num /= base;
   12922:	8b 45 0c             	mov    0xc(%ebp),%eax
   12925:	99                   	cltd   
   12926:	f7 7d 10             	idivl  0x10(%ebp)
   12929:	89 45 0c             	mov    %eax,0xc(%ebp)
    }while( num );
   1292c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12930:	75 ca                	jne    128fc <kernel_itoa+0x68>
    *p-- = '\0';
   12932:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12935:	8d 50 ff             	lea    -0x1(%eax),%edx
   12938:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1293b:	c6 00 00             	movb   $0x0,(%eax)

    char *start = buf;
   1293e:	8b 45 08             	mov    0x8(%ebp),%eax
   12941:	89 45 f8             	mov    %eax,-0x8(%ebp)

    if( (char)*buf == '-' ){
   12944:	8b 45 08             	mov    0x8(%ebp),%eax
   12947:	0f b6 00             	movzbl (%eax),%eax
   1294a:	3c 2d                	cmp    $0x2d,%al
   1294c:	75 04                	jne    12952 <kernel_itoa+0xbe>
        start = start + 1;
   1294e:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    }
    if( base == 16 ){
   12952:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   12956:	75 2b                	jne    12983 <kernel_itoa+0xef>
        start = start + 2;
   12958:	83 45 f8 02          	addl   $0x2,-0x8(%ebp)
    }
    while( start < p ){
   1295c:	eb 25                	jmp    12983 <kernel_itoa+0xef>
        char ch = *start;
   1295e:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12961:	0f b6 00             	movzbl (%eax),%eax
   12964:	88 45 f6             	mov    %al,-0xa(%ebp)
        *start = *p;
   12967:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1296a:	0f b6 10             	movzbl (%eax),%edx
   1296d:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12970:	88 10                	mov    %dl,(%eax)
        *p = ch;
   12972:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12975:	0f b6 55 f6          	movzbl -0xa(%ebp),%edx
   12979:	88 10                	mov    %dl,(%eax)
        start ++;
   1297b:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
        p --;
   1297f:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
    while( start < p ){
   12983:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12986:	3b 45 fc             	cmp    -0x4(%ebp),%eax
   12989:	72 d3                	jb     1295e <kernel_itoa+0xca>
    }
}
   1298b:	c9                   	leave  
   1298c:	c3                   	ret    

0001298d <kernel_vsprintf>:

void kernel_vsprintf( char * buf , const char * fmt , va_list args ){
   1298d:	55                   	push   %ebp
   1298e:	89 e5                	mov    %esp,%ebp
   12990:	83 ec 20             	sub    $0x20,%esp
    enum { NORMAL , READ_FMT } state = NORMAL;
   12993:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    char * curr = buf;
   1299a:	8b 45 08             	mov    0x8(%ebp),%eax
   1299d:	89 45 f8             	mov    %eax,-0x8(%ebp)
    char ch;
    while( (ch = *fmt++ ) ){
   129a0:	e9 17 01 00 00       	jmp    12abc <kernel_vsprintf+0x12f>
        switch( state ){
   129a5:	8b 45 fc             	mov    -0x4(%ebp),%eax
   129a8:	85 c0                	test   %eax,%eax
   129aa:	74 0a                	je     129b6 <kernel_vsprintf+0x29>
   129ac:	83 f8 01             	cmp    $0x1,%eax
   129af:	74 2b                	je     129dc <kernel_vsprintf+0x4f>
   129b1:	e9 06 01 00 00       	jmp    12abc <kernel_vsprintf+0x12f>
            case NORMAL:
                if( ch == '%'){
   129b6:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   129ba:	75 0c                	jne    129c8 <kernel_vsprintf+0x3b>
                    state = READ_FMT;
   129bc:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   129c3:	e9 f4 00 00 00       	jmp    12abc <kernel_vsprintf+0x12f>
                }
                else{
                    *curr ++ = ch;
   129c8:	8b 45 f8             	mov    -0x8(%ebp),%eax
   129cb:	8d 50 01             	lea    0x1(%eax),%edx
   129ce:	89 55 f8             	mov    %edx,-0x8(%ebp)
   129d1:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   129d5:	88 10                	mov    %dl,(%eax)
                }
                break;
   129d7:	e9 e0 00 00 00       	jmp    12abc <kernel_vsprintf+0x12f>
            case READ_FMT:
                if( ch == 'd' ){
   129dc:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   129e0:	75 31                	jne    12a13 <kernel_vsprintf+0x86>
                    int num = va_arg( args , int );
   129e2:	8b 45 10             	mov    0x10(%ebp),%eax
   129e5:	8d 50 04             	lea    0x4(%eax),%edx
   129e8:	89 55 10             	mov    %edx,0x10(%ebp)
   129eb:	8b 00                	mov    (%eax),%eax
   129ed:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                    kernel_itoa( curr , num , 10 );
   129f0:	6a 0a                	push   $0xa
   129f2:	ff 75 e4             	pushl  -0x1c(%ebp)
   129f5:	ff 75 f8             	pushl  -0x8(%ebp)
   129f8:	e8 97 fe ff ff       	call   12894 <kernel_itoa>
   129fd:	83 c4 0c             	add    $0xc,%esp
                    curr = curr +  kernel_strlen( curr );
   12a00:	ff 75 f8             	pushl  -0x8(%ebp)
   12a03:	e8 39 fd ff ff       	call   12741 <kernel_strlen>
   12a08:	83 c4 04             	add    $0x4,%esp
   12a0b:	01 45 f8             	add    %eax,-0x8(%ebp)
   12a0e:	e9 a1 00 00 00       	jmp    12ab4 <kernel_vsprintf+0x127>
                }
                else if( ch == 'x' ){
   12a13:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   12a17:	75 2e                	jne    12a47 <kernel_vsprintf+0xba>
                    int num = va_arg( args , int );
   12a19:	8b 45 10             	mov    0x10(%ebp),%eax
   12a1c:	8d 50 04             	lea    0x4(%eax),%edx
   12a1f:	89 55 10             	mov    %edx,0x10(%ebp)
   12a22:	8b 00                	mov    (%eax),%eax
   12a24:	89 45 e8             	mov    %eax,-0x18(%ebp)
                    kernel_itoa( curr , num , 16 );
   12a27:	6a 10                	push   $0x10
   12a29:	ff 75 e8             	pushl  -0x18(%ebp)
   12a2c:	ff 75 f8             	pushl  -0x8(%ebp)
   12a2f:	e8 60 fe ff ff       	call   12894 <kernel_itoa>
   12a34:	83 c4 0c             	add    $0xc,%esp
                    curr = curr + kernel_strlen( curr );                   
   12a37:	ff 75 f8             	pushl  -0x8(%ebp)
   12a3a:	e8 02 fd ff ff       	call   12741 <kernel_strlen>
   12a3f:	83 c4 04             	add    $0x4,%esp
   12a42:	01 45 f8             	add    %eax,-0x8(%ebp)
   12a45:	eb 6d                	jmp    12ab4 <kernel_vsprintf+0x127>
                }
                else if( ch == 'c' ){
   12a47:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   12a4b:	75 1f                	jne    12a6c <kernel_vsprintf+0xdf>
                    char c = va_arg( args , int );
   12a4d:	8b 45 10             	mov    0x10(%ebp),%eax
   12a50:	8d 50 04             	lea    0x4(%eax),%edx
   12a53:	89 55 10             	mov    %edx,0x10(%ebp)
   12a56:	8b 00                	mov    (%eax),%eax
   12a58:	88 45 ee             	mov    %al,-0x12(%ebp)
                    *curr++ = c;
   12a5b:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12a5e:	8d 50 01             	lea    0x1(%eax),%edx
   12a61:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12a64:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   12a68:	88 10                	mov    %dl,(%eax)
   12a6a:	eb 48                	jmp    12ab4 <kernel_vsprintf+0x127>
                }
                else if( ch == 's' ){
   12a6c:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   12a70:	75 42                	jne    12ab4 <kernel_vsprintf+0x127>
                    const char * str = va_arg( args , char * );
   12a72:	8b 45 10             	mov    0x10(%ebp),%eax
   12a75:	8d 50 04             	lea    0x4(%eax),%edx
   12a78:	89 55 10             	mov    %edx,0x10(%ebp)
   12a7b:	8b 00                	mov    (%eax),%eax
   12a7d:	89 45 f4             	mov    %eax,-0xc(%ebp)
                    int len = kernel_strlen( str );
   12a80:	ff 75 f4             	pushl  -0xc(%ebp)
   12a83:	e8 b9 fc ff ff       	call   12741 <kernel_strlen>
   12a88:	83 c4 04             	add    $0x4,%esp
   12a8b:	89 45 f0             	mov    %eax,-0x10(%ebp)
                    while( len -- ){
   12a8e:	eb 17                	jmp    12aa7 <kernel_vsprintf+0x11a>
                        *curr ++ = *str ++;
   12a90:	8b 55 f4             	mov    -0xc(%ebp),%edx
   12a93:	8d 42 01             	lea    0x1(%edx),%eax
   12a96:	89 45 f4             	mov    %eax,-0xc(%ebp)
   12a99:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12a9c:	8d 48 01             	lea    0x1(%eax),%ecx
   12a9f:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   12aa2:	0f b6 12             	movzbl (%edx),%edx
   12aa5:	88 10                	mov    %dl,(%eax)
                    while( len -- ){
   12aa7:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12aaa:	8d 50 ff             	lea    -0x1(%eax),%edx
   12aad:	89 55 f0             	mov    %edx,-0x10(%ebp)
   12ab0:	85 c0                	test   %eax,%eax
   12ab2:	75 dc                	jne    12a90 <kernel_vsprintf+0x103>

                    }
                }
                state = NORMAL;
   12ab4:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
                break;
   12abb:	90                   	nop
    while( (ch = *fmt++ ) ){
   12abc:	8b 45 0c             	mov    0xc(%ebp),%eax
   12abf:	8d 50 01             	lea    0x1(%eax),%edx
   12ac2:	89 55 0c             	mov    %edx,0xc(%ebp)
   12ac5:	0f b6 00             	movzbl (%eax),%eax
   12ac8:	88 45 ef             	mov    %al,-0x11(%ebp)
   12acb:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   12acf:	0f 85 d0 fe ff ff    	jne    129a5 <kernel_vsprintf+0x18>
        }
    }
}
   12ad5:	90                   	nop
   12ad6:	c9                   	leave  
   12ad7:	c3                   	ret    

00012ad8 <pannic>:

void pannic( const char* file , int line , const char* func , const char*  cond ){
   12ad8:	55                   	push   %ebp
   12ad9:	89 e5                	mov    %esp,%ebp
   12adb:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert failed! %s" , cond );
   12ade:	83 ec 08             	sub    $0x8,%esp
   12ae1:	ff 75 14             	pushl  0x14(%ebp)
   12ae4:	68 13 38 01 00       	push   $0x13813
   12ae9:	e8 f1 02 00 00       	call   12ddf <log_printf>
   12aee:	83 c4 10             	add    $0x10,%esp
    log_printf("file: %s\n\rline: %d\n\rfunc: %s" , file , line , func );
   12af1:	ff 75 10             	pushl  0x10(%ebp)
   12af4:	ff 75 0c             	pushl  0xc(%ebp)
   12af7:	ff 75 08             	pushl  0x8(%ebp)
   12afa:	68 25 38 01 00       	push   $0x13825
   12aff:	e8 db 02 00 00       	call   12ddf <log_printf>
   12b04:	83 c4 10             	add    $0x10,%esp
    for( ; ; ){
        hlt();
   12b07:	e8 17 fb ff ff       	call   12623 <hlt>
   12b0c:	eb f9                	jmp    12b07 <pannic+0x2f>

00012b0e <list_is_empty>:
static inline int list_is_empty( list_t * list ){
   12b0e:	55                   	push   %ebp
   12b0f:	89 e5                	mov    %esp,%ebp
    return list->count == 0;
   12b11:	8b 45 08             	mov    0x8(%ebp),%eax
   12b14:	8b 40 08             	mov    0x8(%eax),%eax
   12b17:	85 c0                	test   %eax,%eax
   12b19:	0f 94 c0             	sete   %al
   12b1c:	0f b6 c0             	movzbl %al,%eax
}
   12b1f:	5d                   	pop    %ebp
   12b20:	c3                   	ret    

00012b21 <list_init>:
#include"tools/list.h"

void list_init( list_t * list ){
   12b21:	55                   	push   %ebp
   12b22:	89 e5                	mov    %esp,%ebp
    list->first = list->last = (list_node_t *)0;
   12b24:	8b 45 08             	mov    0x8(%ebp),%eax
   12b27:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12b2e:	8b 45 08             	mov    0x8(%ebp),%eax
   12b31:	8b 50 04             	mov    0x4(%eax),%edx
   12b34:	8b 45 08             	mov    0x8(%ebp),%eax
   12b37:	89 10                	mov    %edx,(%eax)
    list->count = 0;
   12b39:	8b 45 08             	mov    0x8(%ebp),%eax
   12b3c:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   12b43:	90                   	nop
   12b44:	5d                   	pop    %ebp
   12b45:	c3                   	ret    

00012b46 <list_insert_first>:


void list_insert_first( list_t * list , list_node_t * node ){
   12b46:	55                   	push   %ebp
   12b47:	89 e5                	mov    %esp,%ebp
    node -> next = list -> first;
   12b49:	8b 45 08             	mov    0x8(%ebp),%eax
   12b4c:	8b 10                	mov    (%eax),%edx
   12b4e:	8b 45 0c             	mov    0xc(%ebp),%eax
   12b51:	89 50 04             	mov    %edx,0x4(%eax)
    node -> pre = ( list_node_t * )0;
   12b54:	8b 45 0c             	mov    0xc(%ebp),%eax
   12b57:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    if( list_is_empty(list) ){
   12b5d:	ff 75 08             	pushl  0x8(%ebp)
   12b60:	e8 a9 ff ff ff       	call   12b0e <list_is_empty>
   12b65:	83 c4 04             	add    $0x4,%esp
   12b68:	85 c0                	test   %eax,%eax
   12b6a:	74 15                	je     12b81 <list_insert_first+0x3b>
        list -> last = list -> first = node;
   12b6c:	8b 45 08             	mov    0x8(%ebp),%eax
   12b6f:	8b 55 0c             	mov    0xc(%ebp),%edx
   12b72:	89 10                	mov    %edx,(%eax)
   12b74:	8b 45 08             	mov    0x8(%ebp),%eax
   12b77:	8b 10                	mov    (%eax),%edx
   12b79:	8b 45 08             	mov    0x8(%ebp),%eax
   12b7c:	89 50 04             	mov    %edx,0x4(%eax)
   12b7f:	eb 12                	jmp    12b93 <list_insert_first+0x4d>
    }
    else{
        list -> first -> pre = node;
   12b81:	8b 45 08             	mov    0x8(%ebp),%eax
   12b84:	8b 00                	mov    (%eax),%eax
   12b86:	8b 55 0c             	mov    0xc(%ebp),%edx
   12b89:	89 10                	mov    %edx,(%eax)
        list -> first = node;
   12b8b:	8b 45 08             	mov    0x8(%ebp),%eax
   12b8e:	8b 55 0c             	mov    0xc(%ebp),%edx
   12b91:	89 10                	mov    %edx,(%eax)
    }
    list -> count ++;
   12b93:	8b 45 08             	mov    0x8(%ebp),%eax
   12b96:	8b 40 08             	mov    0x8(%eax),%eax
   12b99:	8d 50 01             	lea    0x1(%eax),%edx
   12b9c:	8b 45 08             	mov    0x8(%ebp),%eax
   12b9f:	89 50 08             	mov    %edx,0x8(%eax)
}
   12ba2:	90                   	nop
   12ba3:	c9                   	leave  
   12ba4:	c3                   	ret    

00012ba5 <list_insert_last>:
void list_insert_last( list_t * list , list_node_t * node ){
   12ba5:	55                   	push   %ebp
   12ba6:	89 e5                	mov    %esp,%ebp
    node -> pre = list -> last;
   12ba8:	8b 45 08             	mov    0x8(%ebp),%eax
   12bab:	8b 50 04             	mov    0x4(%eax),%edx
   12bae:	8b 45 0c             	mov    0xc(%ebp),%eax
   12bb1:	89 10                	mov    %edx,(%eax)
    node -> next = (list_node_t * )0;
   12bb3:	8b 45 0c             	mov    0xc(%ebp),%eax
   12bb6:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    if( list_is_empty(list) ){
   12bbd:	ff 75 08             	pushl  0x8(%ebp)
   12bc0:	e8 49 ff ff ff       	call   12b0e <list_is_empty>
   12bc5:	83 c4 04             	add    $0x4,%esp
   12bc8:	85 c0                	test   %eax,%eax
   12bca:	74 16                	je     12be2 <list_insert_last+0x3d>
        list -> first =  list -> last = node;
   12bcc:	8b 45 08             	mov    0x8(%ebp),%eax
   12bcf:	8b 55 0c             	mov    0xc(%ebp),%edx
   12bd2:	89 50 04             	mov    %edx,0x4(%eax)
   12bd5:	8b 45 08             	mov    0x8(%ebp),%eax
   12bd8:	8b 50 04             	mov    0x4(%eax),%edx
   12bdb:	8b 45 08             	mov    0x8(%ebp),%eax
   12bde:	89 10                	mov    %edx,(%eax)
   12be0:	eb 15                	jmp    12bf7 <list_insert_last+0x52>
    }
    else{
        list -> last -> next = node;
   12be2:	8b 45 08             	mov    0x8(%ebp),%eax
   12be5:	8b 40 04             	mov    0x4(%eax),%eax
   12be8:	8b 55 0c             	mov    0xc(%ebp),%edx
   12beb:	89 50 04             	mov    %edx,0x4(%eax)
        list -> last = node;
   12bee:	8b 45 08             	mov    0x8(%ebp),%eax
   12bf1:	8b 55 0c             	mov    0xc(%ebp),%edx
   12bf4:	89 50 04             	mov    %edx,0x4(%eax)
    }
    list -> count ++;
   12bf7:	8b 45 08             	mov    0x8(%ebp),%eax
   12bfa:	8b 40 08             	mov    0x8(%eax),%eax
   12bfd:	8d 50 01             	lea    0x1(%eax),%edx
   12c00:	8b 45 08             	mov    0x8(%ebp),%eax
   12c03:	89 50 08             	mov    %edx,0x8(%eax)
}
   12c06:	90                   	nop
   12c07:	c9                   	leave  
   12c08:	c3                   	ret    

00012c09 <list_remove_first>:

list_node_t * list_remove_first( list_t * list ){
   12c09:	55                   	push   %ebp
   12c0a:	89 e5                	mov    %esp,%ebp
   12c0c:	83 ec 10             	sub    $0x10,%esp
    if( list_is_empty(list) ){
   12c0f:	ff 75 08             	pushl  0x8(%ebp)
   12c12:	e8 f7 fe ff ff       	call   12b0e <list_is_empty>
   12c17:	83 c4 04             	add    $0x4,%esp
   12c1a:	85 c0                	test   %eax,%eax
   12c1c:	74 07                	je     12c25 <list_remove_first+0x1c>
        return (list_node_t *)0;
   12c1e:	b8 00 00 00 00       	mov    $0x0,%eax
   12c23:	eb 5a                	jmp    12c7f <list_remove_first+0x76>
    }

    list_node_t * remove_node = list -> first;
   12c25:	8b 45 08             	mov    0x8(%ebp),%eax
   12c28:	8b 00                	mov    (%eax),%eax
   12c2a:	89 45 fc             	mov    %eax,-0x4(%ebp)
    list -> first = remove_node -> next;
   12c2d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12c30:	8b 50 04             	mov    0x4(%eax),%edx
   12c33:	8b 45 08             	mov    0x8(%ebp),%eax
   12c36:	89 10                	mov    %edx,(%eax)

    if( list -> first == (list_node_t *)0 ){
   12c38:	8b 45 08             	mov    0x8(%ebp),%eax
   12c3b:	8b 00                	mov    (%eax),%eax
   12c3d:	85 c0                	test   %eax,%eax
   12c3f:	75 0c                	jne    12c4d <list_remove_first+0x44>
        list -> last = (list_node_t *)0;
   12c41:	8b 45 08             	mov    0x8(%ebp),%eax
   12c44:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12c4b:	eb 0b                	jmp    12c58 <list_remove_first+0x4f>
    }
    else{
        list -> first -> pre = ( list_node_t *)0;
   12c4d:	8b 45 08             	mov    0x8(%ebp),%eax
   12c50:	8b 00                	mov    (%eax),%eax
   12c52:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }
    list -> count --;
   12c58:	8b 45 08             	mov    0x8(%ebp),%eax
   12c5b:	8b 40 08             	mov    0x8(%eax),%eax
   12c5e:	8d 50 ff             	lea    -0x1(%eax),%edx
   12c61:	8b 45 08             	mov    0x8(%ebp),%eax
   12c64:	89 50 08             	mov    %edx,0x8(%eax)
    remove_node -> pre = remove_node -> next = ( list_node_t * )0;
   12c67:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12c6a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12c71:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12c74:	8b 50 04             	mov    0x4(%eax),%edx
   12c77:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12c7a:	89 10                	mov    %edx,(%eax)
    return remove_node;
   12c7c:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   12c7f:	c9                   	leave  
   12c80:	c3                   	ret    

00012c81 <list_remove_node>:

list_node_t * list_remove_node( list_t * list , list_node_t * node ){
   12c81:	55                   	push   %ebp
   12c82:	89 e5                	mov    %esp,%ebp
    if( node == list -> first ){
   12c84:	8b 45 08             	mov    0x8(%ebp),%eax
   12c87:	8b 00                	mov    (%eax),%eax
   12c89:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12c8c:	75 0b                	jne    12c99 <list_remove_node+0x18>
        list -> first = node -> next; 
   12c8e:	8b 45 0c             	mov    0xc(%ebp),%eax
   12c91:	8b 50 04             	mov    0x4(%eax),%edx
   12c94:	8b 45 08             	mov    0x8(%ebp),%eax
   12c97:	89 10                	mov    %edx,(%eax)
    }
    if( node == list -> last ){
   12c99:	8b 45 08             	mov    0x8(%ebp),%eax
   12c9c:	8b 40 04             	mov    0x4(%eax),%eax
   12c9f:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12ca2:	75 0b                	jne    12caf <list_remove_node+0x2e>
        list -> last = node -> pre;
   12ca4:	8b 45 0c             	mov    0xc(%ebp),%eax
   12ca7:	8b 10                	mov    (%eax),%edx
   12ca9:	8b 45 08             	mov    0x8(%ebp),%eax
   12cac:	89 50 04             	mov    %edx,0x4(%eax)
    }
    if( node -> pre ){
   12caf:	8b 45 0c             	mov    0xc(%ebp),%eax
   12cb2:	8b 00                	mov    (%eax),%eax
   12cb4:	85 c0                	test   %eax,%eax
   12cb6:	74 0e                	je     12cc6 <list_remove_node+0x45>
        node -> pre -> next = node -> next;
   12cb8:	8b 45 0c             	mov    0xc(%ebp),%eax
   12cbb:	8b 00                	mov    (%eax),%eax
   12cbd:	8b 55 0c             	mov    0xc(%ebp),%edx
   12cc0:	8b 52 04             	mov    0x4(%edx),%edx
   12cc3:	89 50 04             	mov    %edx,0x4(%eax)
    }
    if( node -> next ){
   12cc6:	8b 45 0c             	mov    0xc(%ebp),%eax
   12cc9:	8b 40 04             	mov    0x4(%eax),%eax
   12ccc:	85 c0                	test   %eax,%eax
   12cce:	74 0d                	je     12cdd <list_remove_node+0x5c>
        node -> next -> pre = node -> pre;
   12cd0:	8b 45 0c             	mov    0xc(%ebp),%eax
   12cd3:	8b 40 04             	mov    0x4(%eax),%eax
   12cd6:	8b 55 0c             	mov    0xc(%ebp),%edx
   12cd9:	8b 12                	mov    (%edx),%edx
   12cdb:	89 10                	mov    %edx,(%eax)
    }

    node -> pre = node -> next = ( list_node_t *)0;
   12cdd:	8b 45 0c             	mov    0xc(%ebp),%eax
   12ce0:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12ce7:	8b 45 0c             	mov    0xc(%ebp),%eax
   12cea:	8b 50 04             	mov    0x4(%eax),%edx
   12ced:	8b 45 0c             	mov    0xc(%ebp),%eax
   12cf0:	89 10                	mov    %edx,(%eax)
    list -> count --;
   12cf2:	8b 45 08             	mov    0x8(%ebp),%eax
   12cf5:	8b 40 08             	mov    0x8(%eax),%eax
   12cf8:	8d 50 ff             	lea    -0x1(%eax),%edx
   12cfb:	8b 45 08             	mov    0x8(%ebp),%eax
   12cfe:	89 50 08             	mov    %edx,0x8(%eax)
    return node;
   12d01:	8b 45 0c             	mov    0xc(%ebp),%eax
   12d04:	5d                   	pop    %ebp
   12d05:	c3                   	ret    

00012d06 <inb>:
static inline uint8_t inb( uint16_t port ){
   12d06:	55                   	push   %ebp
   12d07:	89 e5                	mov    %esp,%ebp
   12d09:	83 ec 14             	sub    $0x14,%esp
   12d0c:	8b 45 08             	mov    0x8(%ebp),%eax
   12d0f:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p] , %[v]" : [v]"=a"(rv) : [p]"d"(port));
   12d13:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   12d17:	89 c2                	mov    %eax,%edx
   12d19:	ec                   	in     (%dx),%al
   12d1a:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   12d1d:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   12d21:	c9                   	leave  
   12d22:	c3                   	ret    

00012d23 <outb>:
static inline void outb( uint16_t port , uint8_t data ){
   12d23:	55                   	push   %ebp
   12d24:	89 e5                	mov    %esp,%ebp
   12d26:	83 ec 08             	sub    $0x8,%esp
   12d29:	8b 55 08             	mov    0x8(%ebp),%edx
   12d2c:	8b 45 0c             	mov    0xc(%ebp),%eax
   12d2f:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   12d33:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v] , %[p]"::[p]"d"(port) , [v]"a"(data));
   12d36:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   12d3a:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   12d3e:	ee                   	out    %al,(%dx)
}
   12d3f:	90                   	nop
   12d40:	c9                   	leave  
   12d41:	c3                   	ret    

00012d42 <log_init>:
#include"ipc/mutex.h"
#define COM1_PORT   0x3F8

static mutex_t mutex;

void log_init( void ){
   12d42:	55                   	push   %ebp
   12d43:	89 e5                	mov    %esp,%ebp
   12d45:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&mutex);
   12d48:	83 ec 0c             	sub    $0xc,%esp
   12d4b:	68 e4 8d 01 00       	push   $0x18de4
   12d50:	e8 be f3 ff ff       	call   12113 <mutex_init>
   12d55:	83 c4 10             	add    $0x10,%esp
    outb( COM1_PORT + 1 , 0x00 );
   12d58:	83 ec 08             	sub    $0x8,%esp
   12d5b:	6a 00                	push   $0x0
   12d5d:	68 f9 03 00 00       	push   $0x3f9
   12d62:	e8 bc ff ff ff       	call   12d23 <outb>
   12d67:	83 c4 10             	add    $0x10,%esp
    outb( COM1_PORT + 3 , 0x80 ); 
   12d6a:	83 ec 08             	sub    $0x8,%esp
   12d6d:	68 80 00 00 00       	push   $0x80
   12d72:	68 fb 03 00 00       	push   $0x3fb
   12d77:	e8 a7 ff ff ff       	call   12d23 <outb>
   12d7c:	83 c4 10             	add    $0x10,%esp
    outb( COM1_PORT + 0 , 0x03 );
   12d7f:	83 ec 08             	sub    $0x8,%esp
   12d82:	6a 03                	push   $0x3
   12d84:	68 f8 03 00 00       	push   $0x3f8
   12d89:	e8 95 ff ff ff       	call   12d23 <outb>
   12d8e:	83 c4 10             	add    $0x10,%esp
    outb( COM1_PORT + 1 , 0x00 );
   12d91:	83 ec 08             	sub    $0x8,%esp
   12d94:	6a 00                	push   $0x0
   12d96:	68 f9 03 00 00       	push   $0x3f9
   12d9b:	e8 83 ff ff ff       	call   12d23 <outb>
   12da0:	83 c4 10             	add    $0x10,%esp
    outb( COM1_PORT + 3 , 0x03 );
   12da3:	83 ec 08             	sub    $0x8,%esp
   12da6:	6a 03                	push   $0x3
   12da8:	68 fb 03 00 00       	push   $0x3fb
   12dad:	e8 71 ff ff ff       	call   12d23 <outb>
   12db2:	83 c4 10             	add    $0x10,%esp
    outb( COM1_PORT + 2 , 0xc7 );
   12db5:	83 ec 08             	sub    $0x8,%esp
   12db8:	68 c7 00 00 00       	push   $0xc7
   12dbd:	68 fa 03 00 00       	push   $0x3fa
   12dc2:	e8 5c ff ff ff       	call   12d23 <outb>
   12dc7:	83 c4 10             	add    $0x10,%esp
    outb( COM1_PORT + 4 , 0x0f );
   12dca:	83 ec 08             	sub    $0x8,%esp
   12dcd:	6a 0f                	push   $0xf
   12dcf:	68 fc 03 00 00       	push   $0x3fc
   12dd4:	e8 4a ff ff ff       	call   12d23 <outb>
   12dd9:	83 c4 10             	add    $0x10,%esp
}
   12ddc:	90                   	nop
   12ddd:	c9                   	leave  
   12dde:	c3                   	ret    

00012ddf <log_printf>:

void log_printf( const char * fmt , ... ){
   12ddf:	55                   	push   %ebp
   12de0:	89 e5                	mov    %esp,%ebp
   12de2:	81 ec 98 00 00 00    	sub    $0x98,%esp
    char str_buf[128];
    va_list args;
    kernel_memset( str_buf , '\0' , sizeof(str_buf) );
   12de8:	83 ec 04             	sub    $0x4,%esp
   12deb:	68 80 00 00 00       	push   $0x80
   12df0:	6a 00                	push   $0x0
   12df2:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12df8:	50                   	push   %eax
   12df9:	e8 cd f9 ff ff       	call   127cb <kernel_memset>
   12dfe:	83 c4 10             	add    $0x10,%esp
    va_start( args , fmt );
   12e01:	8d 45 0c             	lea    0xc(%ebp),%eax
   12e04:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kernel_vsprintf( str_buf , fmt , args );
   12e0a:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   12e10:	83 ec 04             	sub    $0x4,%esp
   12e13:	50                   	push   %eax
   12e14:	ff 75 08             	pushl  0x8(%ebp)
   12e17:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12e1d:	50                   	push   %eax
   12e1e:	e8 6a fb ff ff       	call   1298d <kernel_vsprintf>
   12e23:	83 c4 10             	add    $0x10,%esp
    va_end( args );

    mutex_lock(&mutex);
   12e26:	83 ec 0c             	sub    $0xc,%esp
   12e29:	68 e4 8d 01 00       	push   $0x18de4
   12e2e:	e8 0e f3 ff ff       	call   12141 <mutex_lock>
   12e33:	83 c4 10             	add    $0x10,%esp
//临界区
    const char * p = str_buf;
   12e36:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12e3c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while( *p != '\0' ){
   12e3f:	eb 3b                	jmp    12e7c <log_printf+0x9d>
        while((inb(COM1_PORT + 5) & ( 1 << 6 )) == 0 );
   12e41:	90                   	nop
   12e42:	83 ec 0c             	sub    $0xc,%esp
   12e45:	68 fd 03 00 00       	push   $0x3fd
   12e4a:	e8 b7 fe ff ff       	call   12d06 <inb>
   12e4f:	83 c4 10             	add    $0x10,%esp
   12e52:	0f b6 c0             	movzbl %al,%eax
   12e55:	83 e0 40             	and    $0x40,%eax
   12e58:	85 c0                	test   %eax,%eax
   12e5a:	74 e6                	je     12e42 <log_printf+0x63>
        outb( COM1_PORT , *p++ );
   12e5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12e5f:	8d 50 01             	lea    0x1(%eax),%edx
   12e62:	89 55 f4             	mov    %edx,-0xc(%ebp)
   12e65:	0f b6 00             	movzbl (%eax),%eax
   12e68:	0f b6 c0             	movzbl %al,%eax
   12e6b:	83 ec 08             	sub    $0x8,%esp
   12e6e:	50                   	push   %eax
   12e6f:	68 f8 03 00 00       	push   $0x3f8
   12e74:	e8 aa fe ff ff       	call   12d23 <outb>
   12e79:	83 c4 10             	add    $0x10,%esp
    while( *p != '\0' ){
   12e7c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12e7f:	0f b6 00             	movzbl (%eax),%eax
   12e82:	84 c0                	test   %al,%al
   12e84:	75 bb                	jne    12e41 <log_printf+0x62>
    }

    outb( COM1_PORT , '\r' );
   12e86:	83 ec 08             	sub    $0x8,%esp
   12e89:	6a 0d                	push   $0xd
   12e8b:	68 f8 03 00 00       	push   $0x3f8
   12e90:	e8 8e fe ff ff       	call   12d23 <outb>
   12e95:	83 c4 10             	add    $0x10,%esp
    outb( COM1_PORT , '\n' );
   12e98:	83 ec 08             	sub    $0x8,%esp
   12e9b:	6a 0a                	push   $0xa
   12e9d:	68 f8 03 00 00       	push   $0x3f8
   12ea2:	e8 7c fe ff ff       	call   12d23 <outb>
   12ea7:	83 c4 10             	add    $0x10,%esp
//临界区
    mutex_unlock(&mutex);
   12eaa:	83 ec 0c             	sub    $0xc,%esp
   12ead:	68 e4 8d 01 00       	push   $0x18de4
   12eb2:	e8 1b f3 ff ff       	call   121d2 <mutex_unlock>
   12eb7:	83 c4 10             	add    $0x10,%esp
   12eba:	90                   	nop
   12ebb:	c9                   	leave  
   12ebc:	c3                   	ret    

Disassembly of section .first_task:

80000000 <first_task_entry>:
	.code32
	.text
	.global first_task_entry
	.extern first_task_main
first_task_entry:
	mov %ss , %ax
80000000:	66 8c d0             	mov    %ss,%ax
	mov %ax , %ds
80000003:	8e d8                	mov    %eax,%ds
	mov %ax , %ss
80000005:	8e d0                	mov    %eax,%ss
	mov %ax , %es
80000007:	8e c0                	mov    %eax,%es
	mov %ax , %fs
80000009:	8e e0                	mov    %eax,%fs
	mov %ax , %gs
8000000b:	8e e8                	mov    %eax,%gs
	jmp first_task_main
8000000d:	e9 bd 00 00 00       	jmp    800000cf <first_task_main>

80000012 <sys_call>:
    uint32_t arg2;
    uint32_t arg3;
}syscall_args_t;


static inline int sys_call( syscall_args_t * args ){
80000012:	55                   	push   %ebp
80000013:	89 e5                	mov    %esp,%ebp
80000015:	57                   	push   %edi
80000016:	56                   	push   %esi
80000017:	53                   	push   %ebx
80000018:	83 ec 10             	sub    $0x10,%esp
    uint32_t addr[] = { 0 , SELECTOR_SYSCAL | 0 };
8000001b:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
80000022:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%ebp)
        "push %[arg2]\n\t"
        "push %[arg1]\n\t"
        "push %[arg0]\n\t"
        "push %[id]\n\t"
        "lcall *(%[a])":"=a"(ret):
        [arg3]"r"(args->arg3) , [arg2]"r"(args->arg2) , [arg1]"r"(args->arg1) ,
80000029:	8b 45 08             	mov    0x8(%ebp),%eax
8000002c:	8b 40 10             	mov    0x10(%eax),%eax
8000002f:	8b 55 08             	mov    0x8(%ebp),%edx
80000032:	8b 52 0c             	mov    0xc(%edx),%edx
80000035:	8b 4d 08             	mov    0x8(%ebp),%ecx
80000038:	8b 49 08             	mov    0x8(%ecx),%ecx
        [arg0]"r"(args->arg0) , [id]"r"(args->id) ,
8000003b:	8b 5d 08             	mov    0x8(%ebp),%ebx
8000003e:	8b 5b 04             	mov    0x4(%ebx),%ebx
80000041:	8b 75 08             	mov    0x8(%ebp),%esi
80000044:	8b 36                	mov    (%esi),%esi
    __asm__ __volatile__(
80000046:	8d 7d e8             	lea    -0x18(%ebp),%edi
80000049:	50                   	push   %eax
8000004a:	52                   	push   %edx
8000004b:	51                   	push   %ecx
8000004c:	53                   	push   %ebx
8000004d:	56                   	push   %esi
8000004e:	ff 1f                	lcall  *(%edi)
80000050:	89 45 f0             	mov    %eax,-0x10(%ebp)
        [a]"r"(addr));
}
80000053:	90                   	nop
80000054:	83 c4 10             	add    $0x10,%esp
80000057:	5b                   	pop    %ebx
80000058:	5e                   	pop    %esi
80000059:	5f                   	pop    %edi
8000005a:	5d                   	pop    %ebp
8000005b:	c3                   	ret    

8000005c <msleep>:

static inline void msleep( int ms ){
8000005c:	55                   	push   %ebp
8000005d:	89 e5                	mov    %esp,%ebp
8000005f:	83 ec 20             	sub    $0x20,%esp
    if( ms <= 0 ){
80000062:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
80000066:	7e 1b                	jle    80000083 <msleep+0x27>
        return ;
    }
    syscall_args_t args;
    args.id = SYS_sleep;
80000068:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    args.arg0 = ms;
8000006f:	8b 45 08             	mov    0x8(%ebp),%eax
80000072:	89 45 f0             	mov    %eax,-0x10(%ebp)
    sys_call(&args);
80000075:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000078:	50                   	push   %eax
80000079:	e8 94 ff ff ff       	call   80000012 <sys_call>
8000007e:	83 c4 04             	add    $0x4,%esp
80000081:	eb 01                	jmp    80000084 <msleep+0x28>
        return ;
80000083:	90                   	nop
}
80000084:	c9                   	leave  
80000085:	c3                   	ret    

80000086 <getpid>:

static inline int getpid ( void ){
80000086:	55                   	push   %ebp
80000087:	89 e5                	mov    %esp,%ebp
80000089:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_getpid;
8000008c:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
    int result = sys_call(&args);
80000093:	8d 45 e8             	lea    -0x18(%ebp),%eax
80000096:	50                   	push   %eax
80000097:	e8 76 ff ff ff       	call   80000012 <sys_call>
8000009c:	83 c4 04             	add    $0x4,%esp
8000009f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return result;
800000a2:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
800000a5:	c9                   	leave  
800000a6:	c3                   	ret    

800000a7 <print_msg>:

static inline void print_msg ( const char * fmt , int arg ){
800000a7:	55                   	push   %ebp
800000a8:	89 e5                	mov    %esp,%ebp
800000aa:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_printmsg;
800000ad:	c7 45 ec 64 00 00 00 	movl   $0x64,-0x14(%ebp)
    args.arg0 = (uint32_t)fmt;
800000b4:	8b 45 08             	mov    0x8(%ebp),%eax
800000b7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = arg;
800000ba:	8b 45 0c             	mov    0xc(%ebp),%eax
800000bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
    sys_call(&args);    
800000c0:	8d 45 ec             	lea    -0x14(%ebp),%eax
800000c3:	50                   	push   %eax
800000c4:	e8 49 ff ff ff       	call   80000012 <sys_call>
800000c9:	83 c4 04             	add    $0x4,%esp
}
800000cc:	90                   	nop
800000cd:	c9                   	leave  
800000ce:	c3                   	ret    

800000cf <first_task_main>:
#include"core/task.h"
#include"tools/log.h"
#include"core/memory.h"
#include"applib/lib_syscall.h"
int first_task_main( void ){
800000cf:	55                   	push   %ebp
800000d0:	89 e5                	mov    %esp,%ebp
800000d2:	83 ec 10             	sub    $0x10,%esp
    int pid = getpid();
800000d5:	e8 ac ff ff ff       	call   80000086 <getpid>
800000da:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int value = 20;
800000dd:	c7 45 f8 14 00 00 00 	movl   $0x14,-0x8(%ebp)

    for( ; ; ){
        print_msg("task id = %d" , pid );
800000e4:	ff 75 fc             	pushl  -0x4(%ebp)
800000e7:	68 03 01 00 80       	push   $0x80000103
800000ec:	e8 b6 ff ff ff       	call   800000a7 <print_msg>
800000f1:	83 c4 08             	add    $0x8,%esp
        msleep(1000);
800000f4:	68 e8 03 00 00       	push   $0x3e8
800000f9:	e8 5e ff ff ff       	call   8000005c <msleep>
800000fe:	83 c4 04             	add    $0x4,%esp
        print_msg("task id = %d" , pid );
80000101:	eb e1                	jmp    800000e4 <first_task_main+0x15>
80000103:	74 61                	je     80000166 <first_task_main+0x97>
80000105:	73 6b                	jae    80000172 <first_task_main+0xa3>
80000107:	20 69 64             	and    %ch,0x64(%ecx)
8000010a:	20 3d 20 25 64 00    	and    %bh,0x642520
